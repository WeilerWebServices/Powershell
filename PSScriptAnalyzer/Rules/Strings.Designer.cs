//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Windows.PowerShell.ScriptAnalyzer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Windows.PowerShell.ScriptAnalyzer.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align assignment statement.
        /// </summary>
        internal static string AlignAssignmentStatementCommonName {
            get {
                return ResourceManager.GetString("AlignAssignmentStatementCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line up assignment statements such that the assignment operator are aligned..
        /// </summary>
        internal static string AlignAssignmentStatementDescription {
            get {
                return ResourceManager.GetString("AlignAssignmentStatementDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment statements are not aligned.
        /// </summary>
        internal static string AlignAssignmentStatementError {
            get {
                return ResourceManager.GetString("AlignAssignmentStatementError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AlignAssignmentStatement.
        /// </summary>
        internal static string AlignAssignmentStatementName {
            get {
                return ResourceManager.GetString("AlignAssignmentStatementName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidAssignmentToAutomaticVariable.
        /// </summary>
        internal static string AvoidAssignmentToAutomaticVariableName {
            get {
                return ResourceManager.GetString("AvoidAssignmentToAutomaticVariableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a different variable name.
        /// </summary>
        internal static string AvoidAssignmentToReadOnlyAutomaticVariable {
            get {
                return ResourceManager.GetString("AvoidAssignmentToReadOnlyAutomaticVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changing automtic variables might have undesired side effects.
        /// </summary>
        internal static string AvoidAssignmentToReadOnlyAutomaticVariableCommonName {
            get {
                return ResourceManager.GetString("AvoidAssignmentToReadOnlyAutomaticVariableCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This automatic variables is built into PowerShell and readonly..
        /// </summary>
        internal static string AvoidAssignmentToReadOnlyAutomaticVariableDescription {
            get {
                return ResourceManager.GetString("AvoidAssignmentToReadOnlyAutomaticVariableDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Variable &apos;{0}&apos; cannot be assigned since it is a readonly automatic variable that is built into PowerShell, please use a different name..
        /// </summary>
        internal static string AvoidAssignmentToReadOnlyAutomaticVariableError {
            get {
                return ResourceManager.GetString("AvoidAssignmentToReadOnlyAutomaticVariableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting from PowerShell 6.0, the Variable &apos;{0}&apos; cannot be assigned any more since it is a readonly automatic variable that is built into PowerShell, please use a different name..
        /// </summary>
        internal static string AvoidAssignmentToReadOnlyAutomaticVariableIntroducedInPowerShell6_0Error {
            get {
                return ResourceManager.GetString("AvoidAssignmentToReadOnlyAutomaticVariableIntroducedInPowerShell6_0Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Variable &apos;{0}&apos; is an automatic variable that is built into PowerShell, assigning to it might have undesired side effects. If assignment is not by design, please use a different name..
        /// </summary>
        internal static string AvoidAssignmentToWritableAutomaticVariableError {
            get {
                return ResourceManager.GetString("AvoidAssignmentToWritableAutomaticVariableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using ComputerName Hardcoded.
        /// </summary>
        internal static string AvoidComputerNameHardcodedCommonName {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ComputerName parameter of a cmdlet should not be hardcoded as this will expose sensitive information about the system..
        /// </summary>
        internal static string AvoidComputerNameHardcodedDescription {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ComputerName parameter of cmdlet &apos;{0}&apos; is hardcoded. This will expose sensitive information about the system if the script is shared..
        /// </summary>
        internal static string AvoidComputerNameHardcodedError {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingComputerNameHardcoded.
        /// </summary>
        internal static string AvoidComputerNameHardcodedName {
            get {
                return ResourceManager.GetString("AvoidComputerNameHardcodedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Default Value For Mandatory Parameter.
        /// </summary>
        internal static string AvoidDefaultValueForMandatoryParameterCommonName {
            get {
                return ResourceManager.GetString("AvoidDefaultValueForMandatoryParameterCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mandatory parameter should not be initialized with a default value in the param block because this value will be ignored.. To fix a violation of this rule, please avoid initializing a value for the mandatory parameter in the param block..
        /// </summary>
        internal static string AvoidDefaultValueForMandatoryParameterDescription {
            get {
                return ResourceManager.GetString("AvoidDefaultValueForMandatoryParameterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mandatory Parameter &apos;{0}&apos; is initialized in the Param block. To fix a violation of this rule, please leave it uninitialized..
        /// </summary>
        internal static string AvoidDefaultValueForMandatoryParameterError {
            get {
                return ResourceManager.GetString("AvoidDefaultValueForMandatoryParameterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidDefaultValueForMandatoryParameter.
        /// </summary>
        internal static string AvoidDefaultValueForMandatoryParameterName {
            get {
                return ResourceManager.GetString("AvoidDefaultValueForMandatoryParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch Parameters Should Not Default To True.
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterCommonName {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch parameter should not default to true..
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterDescription {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; has a switch parameter default to true..
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterError {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script definition has a switch parameter default to true..
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterErrorScriptDefinition {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterErrorScriptDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidDefaultValueSwitchParameter.
        /// </summary>
        internal static string AvoidDefaultValueSwitchParameterName {
            get {
                return ResourceManager.GetString("AvoidDefaultValueSwitchParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty catch block is used. Please use Write-Error or throw statements in catch blocks..
        /// </summary>
        internal static string AvoidEmptyCatchBlockError {
            get {
                return ResourceManager.GetString("AvoidEmptyCatchBlockError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid global aliases..
        /// </summary>
        internal static string AvoidGlobalAliasesCommonName {
            get {
                return ResourceManager.GetString("AvoidGlobalAliasesCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that global aliases are not used. Global aliases are strongly discouraged as they overwrite desired aliases with name conflicts..
        /// </summary>
        internal static string AvoidGlobalAliasesDescription {
            get {
                return ResourceManager.GetString("AvoidGlobalAliasesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid creating aliases with a Global scope..
        /// </summary>
        internal static string AvoidGlobalAliasesError {
            get {
                return ResourceManager.GetString("AvoidGlobalAliasesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidGlobalAliases.
        /// </summary>
        internal static string AvoidGlobalAliasesName {
            get {
                return ResourceManager.GetString("AvoidGlobalAliasesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid global functiosn and aliases.
        /// </summary>
        internal static string AvoidGlobalFunctionsCommonName {
            get {
                return ResourceManager.GetString("AvoidGlobalFunctionsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that global functions and aliases are not used. Global functions are strongly discouraged as they can cause errors across different systems..
        /// </summary>
        internal static string AvoidGlobalFunctionsDescription {
            get {
                return ResourceManager.GetString("AvoidGlobalFunctionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid creating functions with a Global scope..
        /// </summary>
        internal static string AvoidGlobalFunctionsError {
            get {
                return ResourceManager.GetString("AvoidGlobalFunctionsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidGlobalFunctions.
        /// </summary>
        internal static string AvoidGlobalFunctionsName {
            get {
                return ResourceManager.GetString("AvoidGlobalFunctionsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Global Variables.
        /// </summary>
        internal static string AvoidGlobalVarsCommonName {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that global variables are not used. Global variables are strongly discouraged as they can cause errors across different systems..
        /// </summary>
        internal static string AvoidGlobalVarsDescription {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found global variable &apos;{0}&apos;..
        /// </summary>
        internal static string AvoidGlobalVarsError {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidGlobalVars.
        /// </summary>
        internal static string AvoidGlobalVarsName {
            get {
                return ResourceManager.GetString("AvoidGlobalVarsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Invoking Empty Members.
        /// </summary>
        internal static string AvoidInvokingEmptyMembersCommonName {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoking non-constant members would cause potential bugs. Please double check the syntax to make sure members invoked are non-constant..
        /// </summary>
        internal static string AvoidInvokingEmptyMembersDescription {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has non-constant members. Invoking non-constant members may cause bugs in the script..
        /// </summary>
        internal static string AvoidInvokingEmptyMembersError {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidInvokingEmptyMembers.
        /// </summary>
        internal static string AvoidInvokingEmptyMembersName {
            get {
                return ResourceManager.GetString("AvoidInvokingEmptyMembersName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid long lines.
        /// </summary>
        internal static string AvoidLongLinesCommonName {
            get {
                return ResourceManager.GetString("AvoidLongLinesCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line lengths should be less than the configured maximum.
        /// </summary>
        internal static string AvoidLongLinesDescription {
            get {
                return ResourceManager.GetString("AvoidLongLinesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line exceeds the configured maximum length of {0} characters.
        /// </summary>
        internal static string AvoidLongLinesError {
            get {
                return ResourceManager.GetString("AvoidLongLinesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidLongLines.
        /// </summary>
        internal static string AvoidLongLinesName {
            get {
                return ResourceManager.GetString("AvoidLongLinesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using null or empty HelpMessage parameter attribute..
        /// </summary>
        internal static string AvoidNullOrEmptyHelpMessageAttributeCommonName {
            get {
                return ResourceManager.GetString("AvoidNullOrEmptyHelpMessageAttributeCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the HelpMessage attribute to an empty string or null value causes PowerShell interpreter to throw an error while executing the corresponding function..
        /// </summary>
        internal static string AvoidNullOrEmptyHelpMessageAttributeDescription {
            get {
                return ResourceManager.GetString("AvoidNullOrEmptyHelpMessageAttributeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HelpMessage parameter attribute should not be null or empty. To fix a violation of this rule, please set its value to a non-empty string..
        /// </summary>
        internal static string AvoidNullOrEmptyHelpMessageAttributeError {
            get {
                return ResourceManager.GetString("AvoidNullOrEmptyHelpMessageAttributeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidNullOrEmptyHelpMessageAttribute.
        /// </summary>
        internal static string AvoidNullOrEmptyHelpMessageAttributeName {
            get {
                return ResourceManager.GetString("AvoidNullOrEmptyHelpMessageAttributeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid overwriting built in cmdlets.
        /// </summary>
        internal static string AvoidOverwritingBuiltInCmdletsCommonName {
            get {
                return ResourceManager.GetString("AvoidOverwritingBuiltInCmdletsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not overwrite the definition of a cmdlet that is included with PowerShell.
        /// </summary>
        internal static string AvoidOverwritingBuiltInCmdletsDescription {
            get {
                return ResourceManager.GetString("AvoidOverwritingBuiltInCmdletsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a cmdlet that is included with PowerShell (version {1}) whose definition should not be overridden.
        /// </summary>
        internal static string AvoidOverwritingBuiltInCmdletsError {
            get {
                return ResourceManager.GetString("AvoidOverwritingBuiltInCmdletsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidOverwritingBuiltInCmdlets.
        /// </summary>
        internal static string AvoidOverwritingBuiltInCmdletsName {
            get {
                return ResourceManager.GetString("AvoidOverwritingBuiltInCmdletsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using ShouldContinue Without Boolean Force Parameter.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceCommonName {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions that use ShouldContinue should have a boolean force parameter to allow user to bypass it..
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceDescription {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function &apos;{0}&apos; in file &apos;{1}&apos; uses ShouldContinue but does not have a boolean force parameter. The force parameter will allow users of the script to bypass ShouldContinue prompt.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceError {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function &apos;{0}&apos; in script definition uses ShouldContinue but does not have a boolean force parameter. The force parameter will allow users of the script to bypass ShouldContinue prompt.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceErrorScriptDefinition {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceErrorScriptDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidShouldContinueWithoutForce.
        /// </summary>
        internal static string AvoidShouldContinueWithoutForceName {
            get {
                return ResourceManager.GetString("AvoidShouldContinueWithoutForceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid trailing whitespace.
        /// </summary>
        internal static string AvoidTrailingWhitespaceCommonName {
            get {
                return ResourceManager.GetString("AvoidTrailingWhitespaceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each line should have no trailing whitespace..
        /// </summary>
        internal static string AvoidTrailingWhitespaceDescription {
            get {
                return ResourceManager.GetString("AvoidTrailingWhitespaceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line has trailing whitespace.
        /// </summary>
        internal static string AvoidTrailingWhitespaceError {
            get {
                return ResourceManager.GetString("AvoidTrailingWhitespaceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidTrailingWhitespace.
        /// </summary>
        internal static string AvoidTrailingWhitespaceName {
            get {
                return ResourceManager.GetString("AvoidTrailingWhitespaceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module Must Be Loadable.
        /// </summary>
        internal static string AvoidUnloadableModuleCommonName {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a script file is in a PowerShell module folder, then that folder must be loadable..
        /// </summary>
        internal static string AvoidUnloadableModuleDescription {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load the module &apos;{0}&apos; that file &apos;{1}&apos; is in..
        /// </summary>
        internal static string AvoidUnloadableModuleError {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUnloadableModule.
        /// </summary>
        internal static string AvoidUnloadableModuleName {
            get {
                return ResourceManager.GetString("AvoidUnloadableModuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Username and Password Parameters.
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsCommonName {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions should take in a Credential parameter of type PSCredential (with a Credential transformation attribute defined after it in PowerShell 4.0 or earlier) or set the Password parameter to type SecureString..
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsDescription {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function &apos;{0}&apos; has both Username and Password parameters. Either set the type of the Password parameter to SecureString or replace the Username and Password parameters with a Credential parameter of type PSCredential. If using a Credential parameter in PowerShell 4.0 or earlier, please define a credential transformation attribute after the PSCredential type attribute..
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsError {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingUsernameAndPasswordParams.
        /// </summary>
        internal static string AvoidUsernameAndPasswordParamsName {
            get {
                return ResourceManager.GetString("AvoidUsernameAndPasswordParamsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Clear-Host.
        /// </summary>
        internal static string AvoidUsingClearHostCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Clear-Host is not recommended because the cmdlet may not work in some hosts or there may even be no hosts at all..
        /// </summary>
        internal static string AvoidUsingClearHostDescription {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses Clear-Host. This is not recommended because it may not work in some hosts or there may even be no hosts at all..
        /// </summary>
        internal static string AvoidUsingClearHostError {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingClearHost.
        /// </summary>
        internal static string AvoidUsingClearHostName {
            get {
                return ResourceManager.GetString("AvoidUsingClearHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Cmdlet Aliases or omitting the &apos;Get-&apos; prefix..
        /// </summary>
        internal static string AvoidUsingCmdletAliasesCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace {0} with {1}.
        /// </summary>
        internal static string AvoidUsingCmdletAliasesCorrectionDescription {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesCorrectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An alias is an alternate name or nickname for a cmdlet or for a command element, such as a function, script, file, or executable file. An implicit alias is also the omission of the &apos;Get-&apos; prefix for commands with this prefix. But when writing scripts that will potentially need to be maintained over time, either by the original author or another Windows PowerShell scripter, please consider using full cmdlet name instead of alias. Aliases can introduce these problems, readability, understandability and availa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AvoidUsingCmdletAliasesDescription {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is an alias of &apos;{1}&apos;. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content..
        /// </summary>
        internal static string AvoidUsingCmdletAliasesError {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is implicitly aliasing &apos;{1}&apos; because it is missing the &apos;Get-&apos; prefix. This can introduce possible problems and make scripts hard to maintain. Please consider changing command to its full name..
        /// </summary>
        internal static string AvoidUsingCmdletAliasesMissingGetPrefixError {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesMissingGetPrefixError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingCmdletAliases.
        /// </summary>
        internal static string AvoidUsingCmdletAliasesName {
            get {
                return ResourceManager.GetString("AvoidUsingCmdletAliasesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses Console.&apos;{1}&apos;. Using Console to write is not recommended because it may not work in all hosts or there may even be no hosts at all. Use Write-Output instead..
        /// </summary>
        internal static string AvoidUsingConsoleWriteError {
            get {
                return ResourceManager.GetString("AvoidUsingConsoleWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using SecureString With Plain Text.
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using ConvertTo-SecureString with plain text will expose secure information..
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextDescription {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses ConvertTo-SecureString with plaintext. This will expose secure information. Encrypted standard strings should be used instead..
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextError {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script definition uses ConvertTo-SecureString with plaintext. This will expose secure information. Encrypted standard strings should be used instead..
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextErrorScriptDefinition {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextErrorScriptDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingConvertToSecureStringWithPlainText.
        /// </summary>
        internal static string AvoidUsingConvertToSecureStringWithPlainTextName {
            get {
                return ResourceManager.GetString("AvoidUsingConvertToSecureStringWithPlainTextName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Deprecated Manifest Fields.
        /// </summary>
        internal static string AvoidUsingDeprecatedManifestFieldsCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingDeprecatedManifestFieldsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;ModuleToProcess&quot; is obsolete in the latest PowerShell version. Please update with the latest field &quot;RootModule&quot; in manifest files to avoid PowerShell version inconsistency..
        /// </summary>
        internal static string AvoidUsingDeprecatedManifestFieldsDescription {
            get {
                return ResourceManager.GetString("AvoidUsingDeprecatedManifestFieldsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingDeprecatedManifestFields.
        /// </summary>
        internal static string AvoidUsingDeprecatedManifestFieldsName {
            get {
                return ResourceManager.GetString("AvoidUsingDeprecatedManifestFieldsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using double quotes if the string is constant..
        /// </summary>
        internal static string AvoidUsingDoubleQuotesForConstantStringCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingDoubleQuotesForConstantStringCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use single quotes if the string is constant..
        /// </summary>
        internal static string AvoidUsingDoubleQuotesForConstantStringDescription {
            get {
                return ResourceManager.GetString("AvoidUsingDoubleQuotesForConstantStringDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use single quotes when a string is constant..
        /// </summary>
        internal static string AvoidUsingDoubleQuotesForConstantStringError {
            get {
                return ResourceManager.GetString("AvoidUsingDoubleQuotesForConstantStringError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingDoubleQuotesForConstantString.
        /// </summary>
        internal static string AvoidUsingDoubleQuotesForConstantStringName {
            get {
                return ResourceManager.GetString("AvoidUsingDoubleQuotesForConstantStringName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Empty Catch Block.
        /// </summary>
        internal static string AvoidUsingEmptyCatchBlockCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingEmptyCatchBlockCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty catch blocks are considered poor design decisions because if an error occurs in the try block, this error is simply swallowed and not acted upon. While this does not inherently lead to bad things. It can and this should be avoided if possible. To fix a violation of this rule, using Write-Error or throw statements in catch blocks..
        /// </summary>
        internal static string AvoidUsingEmptyCatchBlockDescription {
            get {
                return ResourceManager.GetString("AvoidUsingEmptyCatchBlockDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingEmptyCatchBlock.
        /// </summary>
        internal static string AvoidUsingEmptyCatchBlockName {
            get {
                return ResourceManager.GetString("AvoidUsingEmptyCatchBlockName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Internal URLs.
        /// </summary>
        internal static string AvoidUsingInternalURLsCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Internal URLs in the scripts may cause security problems..
        /// </summary>
        internal static string AvoidUsingInternalURLsDescription {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; could be an internal URL. Using internal URL directly in the script may cause potential information disclosure..
        /// </summary>
        internal static string AvoidUsingInternalURLsError {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingInternalURLs.
        /// </summary>
        internal static string AvoidUsingInternalURLsName {
            get {
                return ResourceManager.GetString("AvoidUsingInternalURLsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead..
        /// </summary>
        internal static string AvoidUsingInvokeExpressionError {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Invoke-Expression.
        /// </summary>
        internal static string AvoidUsingInvokeExpressionRuleCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionRuleCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Invoke-Expression cmdlet evaluates or runs a specified string as a command and returns the results of the expression or command. It can be extraordinarily powerful so it is not that you want to never use it but you need to be very careful about using it.  In particular, you are probably on safe ground if the data only comes from the program itself.  If you include any data provided from the user - you need to protect yourself from Code Injection. To fix a violation of this rule, please remove Invoke-Exp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AvoidUsingInvokeExpressionRuleDescription {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionRuleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingInvokeExpression.
        /// </summary>
        internal static string AvoidUsingInvokeExpressionRuleName {
            get {
                return ResourceManager.GetString("AvoidUsingInvokeExpressionRuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Plain Text For Password Parameter.
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set {0} type to SecureString.
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordCorrectionDescription {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordCorrectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password parameters that take in plaintext will expose passwords and compromise the security of your system..
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordDescription {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; should use SecureString, otherwise this will expose sensitive information. See ConvertTo-SecureString for more information..
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordError {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingPlainTextForPassword.
        /// </summary>
        internal static string AvoidUsingPlainTextForPasswordName {
            get {
                return ResourceManager.GetString("AvoidUsingPlainTextForPasswordName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Positional Parameters.
        /// </summary>
        internal static string AvoidUsingPositionalParametersCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Readability and clarity should be the goal of any script we expect to maintain over time. When calling a command that takes parameters, where possible consider using name parameters as opposed to positional parameters. To fix a violation of this rule, please use named parameters instead of positional parameters when calling a command..
        /// </summary>
        internal static string AvoidUsingPositionalParametersDescription {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet &apos;{0}&apos; has positional parameter. Please use named parameters instead of positional parameters when calling a command..
        /// </summary>
        internal static string AvoidUsingPositionalParametersError {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingPositionalParameters.
        /// </summary>
        internal static string AvoidUsingPositionalParametersName {
            get {
                return ResourceManager.GetString("AvoidUsingPositionalParametersName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Get-WMIObject, Remove-WMIObject, Invoke-WmiMethod, Register-WmiEvent, Set-WmiInstance.
        /// </summary>
        internal static string AvoidUsingWMICmdletCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deprecated. Starting in Windows PowerShell 3.0, these cmdlets have been superseded by CIM cmdlets..
        /// </summary>
        internal static string AvoidUsingWMICmdletDescription {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems..
        /// </summary>
        internal static string AvoidUsingWMICmdletError {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script definition uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems..
        /// </summary>
        internal static string AvoidUsingWMICmdletErrorScriptDefinition {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletErrorScriptDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingWMICmdlet.
        /// </summary>
        internal static string AvoidUsingWMICmdletName {
            get {
                return ResourceManager.GetString("AvoidUsingWMICmdletName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Using Write-Host.
        /// </summary>
        internal static string AvoidUsingWriteHostCommonName {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using the Write-Host cmdlet. Instead, use Write-Output, Write-Verbose, or Write-Information. Because Write-Host is host-specific, its implementation might vary unpredictably. Also, prior to PowerShell 5.0, Write-Host did not write to a stream, so users cannot suppress it, capture its value, or redirect it..
        /// </summary>
        internal static string AvoidUsingWriteHostDescription {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &apos;{0}&apos; uses Write-Host. Avoid using Write-Host because it might not work in all hosts, does not work when there is no host, and (prior to PS 5.0) cannot be suppressed, captured, or redirected. Instead, use Write-Output, Write-Verbose, or Write-Information..
        /// </summary>
        internal static string AvoidUsingWriteHostError {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script definition uses Write-Host. Avoid using Write-Host because it might not work in all hosts, does not work when there is no host, and (prior to PS 5.0) cannot be suppressed, captured, or redirected. Instead, use Write-Output, Write-Verbose, or Write-Information..
        /// </summary>
        internal static string AvoidUsingWriteHostErrorScriptDefinition {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostErrorScriptDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AvoidUsingWriteHost.
        /// </summary>
        internal static string AvoidUsingWriteHostName {
            get {
                return ResourceManager.GetString("AvoidUsingWriteHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command Not Found.
        /// </summary>
        internal static string CommandNotFoundCommonName {
            get {
                return ResourceManager.GetString("CommandNotFoundCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands that are undefined or do not exist should not be used..
        /// </summary>
        internal static string CommandNotFoundDescription {
            get {
                return ResourceManager.GetString("CommandNotFoundDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command &apos;{0}&apos; Is Not Found.
        /// </summary>
        internal static string CommandNotFoundError {
            get {
                return ResourceManager.GetString("CommandNotFoundError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CommandNotFound.
        /// </summary>
        internal static string CommandNotFoundName {
            get {
                return ResourceManager.GetString("CommandNotFoundName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DscExamplesPresent.
        /// </summary>
        internal static string DscExamplesPresent {
            get {
                return ResourceManager.GetString("DscExamplesPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSC examples are present.
        /// </summary>
        internal static string DscExamplesPresentCommonName {
            get {
                return ResourceManager.GetString("DscExamplesPresentCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Every DSC resource module should contain folder &quot;Examples&quot; with sample configurations for every resource. Sample configurations should have resource name they are demonstrating in the title..
        /// </summary>
        internal static string DscExamplesPresentDescription {
            get {
                return ResourceManager.GetString("DscExamplesPresentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No examples found for resource &apos;{0}&apos;.
        /// </summary>
        internal static string DscExamplesPresentNoExamplesError {
            get {
                return ResourceManager.GetString("DscExamplesPresentNoExamplesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PSDSC.
        /// </summary>
        internal static string DSCSourceName {
            get {
                return ResourceManager.GetString("DSCSourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DscTestsPresent.
        /// </summary>
        internal static string DscTestsPresent {
            get {
                return ResourceManager.GetString("DscTestsPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dsc tests are present.
        /// </summary>
        internal static string DscTestsPresentCommonName {
            get {
                return ResourceManager.GetString("DscTestsPresentCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Every DSC resource module should contain folder &quot;Tests&quot; with tests for every resource. Test scripts should have resource name they are testing in the file name..
        /// </summary>
        internal static string DscTestsPresentDescription {
            get {
                return ResourceManager.GetString("DscTestsPresentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No tests found for resource &apos;{0}&apos;.
        /// </summary>
        internal static string DscTestsPresentNoTestsError {
            get {
                return ResourceManager.GetString("DscTestsPresentNoTestsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Misleading Backtick.
        /// </summary>
        internal static string MisleadingBacktickCommonName {
            get {
                return ResourceManager.GetString("MisleadingBacktickCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ending a line with an escaped whitepsace character is misleading. A trailing backtick is usually used for line continuation. Users typically don&apos;t intend to end a line with escaped whitespace..
        /// </summary>
        internal static string MisleadingBacktickDescription {
            get {
                return ResourceManager.GetString("MisleadingBacktickDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This line has a backtick at the end trailed by a whitespace character. Did you mean for this to be a line continuation?.
        /// </summary>
        internal static string MisleadingBacktickError {
            get {
                return ResourceManager.GetString("MisleadingBacktickError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MisleadingBacktick.
        /// </summary>
        internal static string MisleadingBacktickName {
            get {
                return ResourceManager.GetString("MisleadingBacktickName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module Manifest Fields.
        /// </summary>
        internal static string MissingModuleManifestFieldCommonName {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add {0} = {1} to the module manifest.
        /// </summary>
        internal static string MissingModuleManifestFieldCorrectionDescription {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldCorrectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some fields of the module manifest (such as ModuleVersion) are required..
        /// </summary>
        internal static string MissingModuleManifestFieldDescription {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MissingModuleManifestField.
        /// </summary>
        internal static string MissingModuleManifestFieldName {
            get {
                return ResourceManager.GetString("MissingModuleManifestFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}.
        /// </summary>
        internal static string NameSpaceFormat {
            get {
                return ResourceManager.GetString("NameSpaceFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all code path in {0} function in DSC Class {1} returns a value.
        /// </summary>
        internal static string NotAllCodePathReturnsDSCFunctionsError {
            get {
                return ResourceManager.GetString("NotAllCodePathReturnsDSCFunctionsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process null Ast.
        /// </summary>
        internal static string NullAstErrorMessage {
            get {
                return ResourceManager.GetString("NullAstErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process null CommandInfo.
        /// </summary>
        internal static string NullCommandInfoError {
            get {
                return ResourceManager.GetString("NullCommandInfoError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Message is Null..
        /// </summary>
        internal static string NullErrorMessage {
            get {
                return ResourceManager.GetString("NullErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One Char.
        /// </summary>
        internal static string OneCharCommonName {
            get {
                return ResourceManager.GetString("OneCharCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that cmdlets and parameters have more than one character..
        /// </summary>
        internal static string OneCharDescription {
            get {
                return ResourceManager.GetString("OneCharDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet name &apos;{0}&apos; only has one character..
        /// </summary>
        internal static string OneCharErrorCmdlet {
            get {
                return ResourceManager.GetString("OneCharErrorCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; has a parameter &apos;{1}&apos; that only has one character..
        /// </summary>
        internal static string OneCharErrorParameter {
            get {
                return ResourceManager.GetString("OneCharErrorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A script block has a parameter &apos;{0}&apos; that only has one character..
        /// </summary>
        internal static string OneCharErrorParameterSB {
            get {
                return ResourceManager.GetString("OneCharErrorParameterSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OneChar.
        /// </summary>
        internal static string OneCharName {
            get {
                return ResourceManager.GetString("OneCharName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place close braces.
        /// </summary>
        internal static string PlaceCloseBraceCommonName {
            get {
                return ResourceManager.GetString("PlaceCloseBraceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close brace should be on a new line by itself..
        /// </summary>
        internal static string PlaceCloseBraceDescription {
            get {
                return ResourceManager.GetString("PlaceCloseBraceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close brace is not on a new line..
        /// </summary>
        internal static string PlaceCloseBraceErrorShouldBeOnNewLine {
            get {
                return ResourceManager.GetString("PlaceCloseBraceErrorShouldBeOnNewLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close brace before a branch statement is followed by a new line..
        /// </summary>
        internal static string PlaceCloseBraceErrorShouldCuddleBranchStatement {
            get {
                return ResourceManager.GetString("PlaceCloseBraceErrorShouldCuddleBranchStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close brace does not follow a new line..
        /// </summary>
        internal static string PlaceCloseBraceErrorShouldFollowNewLine {
            get {
                return ResourceManager.GetString("PlaceCloseBraceErrorShouldFollowNewLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close brace does not follow a non-empty line..
        /// </summary>
        internal static string PlaceCloseBraceErrorShouldNotFollowEmptyLine {
            get {
                return ResourceManager.GetString("PlaceCloseBraceErrorShouldNotFollowEmptyLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlaceCloseBrace.
        /// </summary>
        internal static string PlaceCloseBraceName {
            get {
                return ResourceManager.GetString("PlaceCloseBraceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place open braces consistently.
        /// </summary>
        internal static string PlaceOpenBraceCommonName {
            get {
                return ResourceManager.GetString("PlaceOpenBraceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place open braces either on the same line as the preceding expression or on a new line..
        /// </summary>
        internal static string PlaceOpenBraceDescription {
            get {
                return ResourceManager.GetString("PlaceOpenBraceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no new line after open brace..
        /// </summary>
        internal static string PlaceOpenBraceErrorNoNewLineAfterBrace {
            get {
                return ResourceManager.GetString("PlaceOpenBraceErrorNoNewLineAfterBrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open brace not on same line as preceding keyword. It should be on the same line..
        /// </summary>
        internal static string PlaceOpenBraceErrorShouldBeOnSameLine {
            get {
                return ResourceManager.GetString("PlaceOpenBraceErrorShouldBeOnSameLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open brace is not on a new line..
        /// </summary>
        internal static string PlaceOpenBraceErrorShouldNotBeOnSameLine {
            get {
                return ResourceManager.GetString("PlaceOpenBraceErrorShouldNotBeOnSameLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlaceOpenBrace.
        /// </summary>
        internal static string PlaceOpenBraceName {
            get {
                return ResourceManager.GetString("PlaceOpenBraceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null Comparison.
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullCommonName {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that $null is on the left side of any equaltiy comparisons (eq, ne, ceq, cne, ieq, ine). When there is an array on the left side of a null equality comparison, PowerShell will check for a $null IN the array rather than if the array is null. If the two sides of the comaprision are switched this is fixed. Therefore, $null should always be on the left side of equality comparisons just in case..
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullDescription {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $null should be on the left side of equality comparisons..
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullError {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PossibleIncorrectComparisonWithNull.
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullName {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use $null on the left hand side for safe comparison with $null..
        /// </summary>
        internal static string PossibleIncorrectComparisonWithNullSuggesteCorrectionDescription {
            get {
                return ResourceManager.GetString("PossibleIncorrectComparisonWithNullSuggesteCorrectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;=&apos; is not an assignment operator. Did you mean the equality operator &apos;-eq&apos;?.
        /// </summary>
        internal static string PossibleIncorrectUsageOfAssignmentOperatorCommonName {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfAssignmentOperatorCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;=&apos; or &apos;==&apos; are not comparison operators in the PowerShell language and rarely needed inside conditional statements..
        /// </summary>
        internal static string PossibleIncorrectUsageOfAssignmentOperatorDescription {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfAssignmentOperatorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Did you mean to use the assignment operator &apos;=&apos;? The equality operator in PowerShell is &apos;eq&apos;..
        /// </summary>
        internal static string PossibleIncorrectUsageOfAssignmentOperatorError {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfAssignmentOperatorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PossibleIncorrectUsageOfAssignmentOperator.
        /// </summary>
        internal static string PossibleIncorrectUsageOfAssignmentOperatorName {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfAssignmentOperatorName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;&gt;&apos; is not a comparison operator. Use  &apos;-gt&apos; (greater than) or &apos;-ge&apos; (greater or equal)..
        /// </summary>
        internal static string PossibleIncorrectUsageOfRedirectionOperatorCommonName {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfRedirectionOperatorCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When switching between different languages it is easy to forget that &apos;&gt;&apos; does not mean &apos;great than&apos; in PowerShell..
        /// </summary>
        internal static string PossibleIncorrectUsageOfRedirectionOperatorDescription {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfRedirectionOperatorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Did you mean to use the redirection operator &apos;&gt;&apos;? The comparison operators in PowerShell are &apos;-gt&apos; (greater than) or &apos;-ge&apos; (greater or equal)..
        /// </summary>
        internal static string PossibleIncorrectUsageOfRedirectionOperatorError {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfRedirectionOperatorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PossibleIncorrectUsageOfRedirectionOperator.
        /// </summary>
        internal static string PossibleIncorrectUsageOfRedirectionOperatorName {
            get {
                return ResourceManager.GetString("PossibleIncorrectUsageOfRedirectionOperatorName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Basic Comment Help.
        /// </summary>
        internal static string ProvideCommentHelpCommonName {
            get {
                return ResourceManager.GetString("ProvideCommentHelpCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that all cmdlets have a help comment. This rule only checks existence. It does not check the content of the comment..
        /// </summary>
        internal static string ProvideCommentHelpDescription {
            get {
                return ResourceManager.GetString("ProvideCommentHelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; does not have a help comment..
        /// </summary>
        internal static string ProvideCommentHelpError {
            get {
                return ResourceManager.GetString("ProvideCommentHelpError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ProvideCommentHelp.
        /// </summary>
        internal static string ProvideCommentHelpName {
            get {
                return ResourceManager.GetString("ProvideCommentHelpName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved Cmdlet Chars.
        /// </summary>
        internal static string ReservedCmdletCharCommonName {
            get {
                return ResourceManager.GetString("ReservedCmdletCharCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks for reserved characters in cmdlet names. These characters usually cause a parsing error. Otherwise they will generally cause runtime errors..
        /// </summary>
        internal static string ReservedCmdletCharDescription {
            get {
                return ResourceManager.GetString("ReservedCmdletCharDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; uses a reserved char in its name..
        /// </summary>
        internal static string ReservedCmdletCharError {
            get {
                return ResourceManager.GetString("ReservedCmdletCharError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReservedCmdletChar.
        /// </summary>
        internal static string ReservedCmdletCharName {
            get {
                return ResourceManager.GetString("ReservedCmdletCharName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos;.
        /// </summary>
        internal static string ReservedParamsCmdletPrefix {
            get {
                return ResourceManager.GetString("ReservedParamsCmdletPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved Parameters.
        /// </summary>
        internal static string ReservedParamsCommonName {
            get {
                return ResourceManager.GetString("ReservedParamsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks for reserved parameters in function definitions. If these parameters are defined by the user, an error generally occurs..
        /// </summary>
        internal static string ReservedParamsDescription {
            get {
                return ResourceManager.GetString("ReservedParamsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; defines the reserved common parameter &apos;{1}&apos;..
        /// </summary>
        internal static string ReservedParamsError {
            get {
                return ResourceManager.GetString("ReservedParamsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReservedParams.
        /// </summary>
        internal static string ReservedParamsName {
            get {
                return ResourceManager.GetString("ReservedParamsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script.
        /// </summary>
        internal static string ReservedParamsScriptPrefix {
            get {
                return ResourceManager.GetString("ReservedParamsScriptPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #,(){}[]&amp;/\\$^;:\&quot;&apos;&lt;&gt;|?@`*%+=~.
        /// </summary>
        internal static string ReserverCmdletChars {
            get {
                return ResourceManager.GetString("ReserverCmdletChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReturnCorrectTypesForDSCFunctions.
        /// </summary>
        internal static string ReturnCorrectTypeDSCFunctionsName {
            get {
                return ResourceManager.GetString("ReturnCorrectTypeDSCFunctionsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return Correct Types For DSC Functions.
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsCommonName {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set function in DSC class and Set-TargetResource in DSC resource must not return anything. Get function in DSC class must return an instance of the DSC class and Get-TargetResource function in DSC resource must return a hashtable. Test function in DSC class and Get-TargetResource function in DSC resource must return a boolean..
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsDescription {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} function in DSC Class {1} should return object of type {2}.
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsNoTypeError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsNoTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} function in DSC Class {1} should return object of type {2} instead of type {3}.
        /// </summary>
        internal static string ReturnCorrectTypesForDSCFunctionsWrongTypeError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForDSCFunctionsWrongTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} function in DSC Resource should return object of type {1} instead of {2}.
        /// </summary>
        internal static string ReturnCorrectTypesForGetTestTargetResourceFunctionsDSCResourceError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForGetTestTargetResourceFunctionsDSCResourceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set function in DSC Class {0} should not return anything.
        /// </summary>
        internal static string ReturnCorrectTypesForSetFunctionsDSCError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForSetFunctionsDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-TargetResource function in DSC Resource should not output anything to the pipeline..
        /// </summary>
        internal static string ReturnCorrectTypesForSetTargetResourceFunctionsDSCError {
            get {
                return ResourceManager.GetString("ReturnCorrectTypesForSetTargetResourceFunctionsDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReviewUnusedParameter.
        /// </summary>
        internal static string ReviewUnusedParameterCommonName {
            get {
                return ResourceManager.GetString("ReviewUnusedParameterCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure all parameters are used within the same script, scriptblock, or function where they are declared..
        /// </summary>
        internal static string ReviewUnusedParameterDescription {
            get {
                return ResourceManager.GetString("ReviewUnusedParameterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter &apos;{0}&apos; has been declared but not used. .
        /// </summary>
        internal static string ReviewUnusedParameterError {
            get {
                return ResourceManager.GetString("ReviewUnusedParameterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReviewUnusedParameter.
        /// </summary>
        internal static string ReviewUnusedParameterName {
            get {
                return ResourceManager.GetString("ReviewUnusedParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ScriptDefinition.
        /// </summary>
        internal static string ScriptDefinitionName {
            get {
                return ResourceManager.GetString("ScriptDefinitionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to www.sharepoint.com.
        /// </summary>
        internal static string SharepointURL {
            get {
                return ResourceManager.GetString("SharepointURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Should Process.
        /// </summary>
        internal static string ShouldProcessCommonName {
            get {
                return ResourceManager.GetString("ShouldProcessCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that if the SupportsShouldProcess is present, the function calls ShouldProcess/ShouldContinue and vice versa. Scripts with one or the other but not both will generally run into an error or unexpected behavior..
        /// </summary>
        internal static string ShouldProcessDescription {
            get {
                return ResourceManager.GetString("ShouldProcessDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has the ShouldProcess attribute but does not call ShouldProcess/ShouldContinue..
        /// </summary>
        internal static string ShouldProcessErrorHasAttribute {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A script block has the ShouldProcess attribute but does not call ShouldProcess/ShouldContinue..
        /// </summary>
        internal static string ShouldProcessErrorHasAttributeSB {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasAttributeSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; calls ShouldProcess/ShouldContinue but does not have the ShouldProcess attribute..
        /// </summary>
        internal static string ShouldProcessErrorHasCmdlet {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A script block calls ShouldProcess/ShouldContinue but does not have the ShouldProcess attribute..
        /// </summary>
        internal static string ShouldProcessErrorHasCmdletSB {
            get {
                return ResourceManager.GetString("ShouldProcessErrorHasCmdletSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShouldProcess.
        /// </summary>
        internal static string ShouldProcessName {
            get {
                return ResourceManager.GetString("ShouldProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PS.
        /// </summary>
        internal static string SourceName {
            get {
                return ResourceManager.GetString("SourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type Not Found.
        /// </summary>
        internal static string TypeNotFoundCommonName {
            get {
                return ResourceManager.GetString("TypeNotFoundCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Undefined type should not be used.
        /// </summary>
        internal static string TypeNotFoundDescription {
            get {
                return ResourceManager.GetString("TypeNotFoundDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is not found. Please check that it is defined..
        /// </summary>
        internal static string TypeNotFoundError {
            get {
                return ResourceManager.GetString("TypeNotFoundError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TypeNotFound.
        /// </summary>
        internal static string TypeNotFoundName {
            get {
                return ResourceManager.GetString("TypeNotFoundName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet Verbs.
        /// </summary>
        internal static string UseApprovedVerbsCommonName {
            get {
                return ResourceManager.GetString("UseApprovedVerbsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checks that all defined cmdlets use approved verbs. This is in line with PowerShell&apos;s best practices..
        /// </summary>
        internal static string UseApprovedVerbsDescription {
            get {
                return ResourceManager.GetString("UseApprovedVerbsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; uses an unapproved verb..
        /// </summary>
        internal static string UseApprovedVerbsError {
            get {
                return ResourceManager.GetString("UseApprovedVerbsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseApprovedVerbs.
        /// </summary>
        internal static string UseApprovedVerbsName {
            get {
                return ResourceManager.GetString("UseApprovedVerbsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use BOM encoding for non-ASCII files.
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileCommonName {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For a file encoded with a format other than ASCII, ensure BOM is present to ensure that any application consuming this file can interpret it correctly..
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileDescription {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing BOM encoding for non-ASCII encoded file &apos;{0}&apos;.
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileError {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseBOMForUnicodeEncodedFile.
        /// </summary>
        internal static string UseBOMForUnicodeEncodedFileName {
            get {
                return ResourceManager.GetString("UseBOMForUnicodeEncodedFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Cmdlet Correctly.
        /// </summary>
        internal static string UseCmdletCorrectlyCommonName {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet should be called with the mandatory parameters..
        /// </summary>
        internal static string UseCmdletCorrectlyDescription {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet &apos;{0}&apos; may be used incorrectly. Please check that all mandatory parameters are supplied..
        /// </summary>
        internal static string UseCmdletCorrectlyError {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCmdletCorrectly.
        /// </summary>
        internal static string UseCmdletCorrectlyName {
            get {
                return ResourceManager.GetString("UseCmdletCorrectlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use compatible cmdlets.
        /// </summary>
        internal static string UseCompatibleCmdletsCommonName {
            get {
                return ResourceManager.GetString("UseCompatibleCmdletsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use cmdlets compatible with the given PowerShell version and edition and operating system.
        /// </summary>
        internal static string UseCompatibleCmdletsDescription {
            get {
                return ResourceManager.GetString("UseCompatibleCmdletsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not compatible with PowerShell edition &apos;{1}&apos;, version &apos;{2}&apos; and OS &apos;{3}&apos;.
        /// </summary>
        internal static string UseCompatibleCmdletsError {
            get {
                return ResourceManager.GetString("UseCompatibleCmdletsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCompatibleCmdlets.
        /// </summary>
        internal static string UseCompatibleCmdletsName {
            get {
                return ResourceManager.GetString("UseCompatibleCmdletsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command &apos;{0}&apos; is not available by default in PowerShell version &apos;{1}&apos; on platform &apos;{2}&apos;.
        /// </summary>
        internal static string UseCompatibleCommandsCommandError {
            get {
                return ResourceManager.GetString("UseCompatibleCommandsCommandError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use compatible commands.
        /// </summary>
        internal static string UseCompatibleCommandsCommonName {
            get {
                return ResourceManager.GetString("UseCompatibleCommandsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use commands compatible with the given PowerShell version and operating system.
        /// </summary>
        internal static string UseCompatibleCommandsDescription {
            get {
                return ResourceManager.GetString("UseCompatibleCommandsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCompatibleCommands.
        /// </summary>
        internal static string UseCompatibleCommandsName {
            get {
                return ResourceManager.GetString("UseCompatibleCommandsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter &apos;{0}&apos; is not available for command &apos;{1}&apos; by default in PowerShell version &apos;{2}&apos; on platform &apos;{3}&apos;.
        /// </summary>
        internal static string UseCompatibleCommandsParameterError {
            get {
                return ResourceManager.GetString("UseCompatibleCommandsParameterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use compatible syntax.
        /// </summary>
        internal static string UseCompatibleSyntaxCommonName {
            get {
                return ResourceManager.GetString("UseCompatibleSyntaxCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;{0}&apos; syntax instead for compatibility with PowerShell versions {1}.
        /// </summary>
        internal static string UseCompatibleSyntaxCorrection {
            get {
                return ResourceManager.GetString("UseCompatibleSyntaxCorrection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use script syntax compatible with the given PowerShell versions.
        /// </summary>
        internal static string UseCompatibleSyntaxDescription {
            get {
                return ResourceManager.GetString("UseCompatibleSyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} syntax &apos;{1}&apos; is not available by default in PowerShell versions {2}.
        /// </summary>
        internal static string UseCompatibleSyntaxError {
            get {
                return ResourceManager.GetString("UseCompatibleSyntaxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCompatibleSyntax.
        /// </summary>
        internal static string UseCompatibleSyntaxName {
            get {
                return ResourceManager.GetString("UseCompatibleSyntaxName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use compatible types.
        /// </summary>
        internal static string UseCompatibleTypesCommonName {
            get {
                return ResourceManager.GetString("UseCompatibleTypesCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use types compatible with the given PowerShell version and operating system.
        /// </summary>
        internal static string UseCompatibleTypesDescription {
            get {
                return ResourceManager.GetString("UseCompatibleTypesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The member &apos;{0}&apos; is not available on type &apos;{1}&apos; by default in PowerShell version &apos;{2}&apos; on platform &apos;{3}&apos;.
        /// </summary>
        internal static string UseCompatibleTypesMemberError {
            get {
                return ResourceManager.GetString("UseCompatibleTypesMemberError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{0}&apos; is not available on type &apos;{1}&apos; by default in PowerShell version &apos;{2}&apos; on platform &apos;{3}&apos;.
        /// </summary>
        internal static string UseCompatibleTypesMethodError {
            get {
                return ResourceManager.GetString("UseCompatibleTypesMethodError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCompatibleTypes.
        /// </summary>
        internal static string UseCompatibleTypesName {
            get {
                return ResourceManager.GetString("UseCompatibleTypesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type accelerator &apos;{0}&apos; is not available by default in PowerShell version &apos;{1}&apos; on platform &apos;{2}&apos;.
        /// </summary>
        internal static string UseCompatibleTypesTypeAcceleratorError {
            get {
                return ResourceManager.GetString("UseCompatibleTypesTypeAcceleratorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is not available by default in PowerShell version &apos;{1}&apos; on platform &apos;{2}&apos;.
        /// </summary>
        internal static string UseCompatibleTypesTypeError {
            get {
                return ResourceManager.GetString("UseCompatibleTypesTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use consistent indentation.
        /// </summary>
        internal static string UseConsistentIndentationCommonName {
            get {
                return ResourceManager.GetString("UseConsistentIndentationCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each statement block should have a consistent indenation..
        /// </summary>
        internal static string UseConsistentIndentationDescription {
            get {
                return ResourceManager.GetString("UseConsistentIndentationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indentation not consistent.
        /// </summary>
        internal static string UseConsistentIndentationError {
            get {
                return ResourceManager.GetString("UseConsistentIndentationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseConsistentIndentation.
        /// </summary>
        internal static string UseConsistentIndentationName {
            get {
                return ResourceManager.GetString("UseConsistentIndentationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use whitespaces.
        /// </summary>
        internal static string UseConsistentWhitespaceCommonName {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for whitespace between keyword and open paren/curly, around assigment operator (&apos;=&apos;), around arithmetic operators and after separators (&apos;,&apos; and &apos;;&apos;).
        /// </summary>
        internal static string UseConsistentWhitespaceDescription {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space after open brace..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorAfterOpeningBrace {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorAfterOpeningBrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space before closing brace..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorBeforeClosingInnerBrace {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorBeforeClosingInnerBrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space before open brace..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorBeforeOpeningBrace {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorBeforeOpeningBrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space before open parenthesis..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorBeforeParen {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorBeforeParen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space before and after binary and assignment operators..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorOperator {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space after a comma..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorSeparatorComma {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorSeparatorComma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space after a semicolon..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorSeparatorSemi {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorSeparatorSemi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space after pipe..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorSpaceAfterPipe {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorSpaceAfterPipe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use space before pipe..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorSpaceBeforePipe {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorSpaceBeforePipe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use only 1 whitespace between parameter names or values..
        /// </summary>
        internal static string UseConsistentWhitespaceErrorSpaceBetweenParameter {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceErrorSpaceBetweenParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseConsistentWhitespace.
        /// </summary>
        internal static string UseConsistentWhitespaceName {
            get {
                return ResourceManager.GetString("UseConsistentWhitespaceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use exact casing of cmdlet/function/parameter name..
        /// </summary>
        internal static string UseCorrectCasingCommonName {
            get {
                return ResourceManager.GetString("UseCorrectCasingCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For better readability and consistency, use the exact casing of the cmdlet/function/parameter..
        /// </summary>
        internal static string UseCorrectCasingDescription {
            get {
                return ResourceManager.GetString("UseCorrectCasingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet/Function/Parameter does not match its exact casing &apos;{0}&apos;..
        /// </summary>
        internal static string UseCorrectCasingError {
            get {
                return ResourceManager.GetString("UseCorrectCasingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseCorrectCasing.
        /// </summary>
        internal static string UseCorrectCasingName {
            get {
                return ResourceManager.GetString("UseCorrectCasingName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra Variables.
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsCommonName {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure declared variables are used elsewhere in the script and not just during assignment..
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsDescription {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; is assigned but never used..
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsError {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseDeclaredVarsMoreThanAssignments.
        /// </summary>
        internal static string UseDeclaredVarsMoreThanAssignmentsName {
            get {
                return ResourceManager.GetString("UseDeclaredVarsMoreThanAssignmentsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use identical mandatory parameters for DSC Get/Test/Set TargetResource functions.
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCCommonName {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Get/Test/Set TargetResource functions of DSC resource must have the same mandatory parameters..
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCDescription {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; parameter &apos;{1}&apos; is not present in &apos;{2}&apos; DSC resource function(s)..
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCError {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseIdenticalMandatoryParametersForDSC.
        /// </summary>
        internal static string UseIdenticalMandatoryParametersDSCName {
            get {
                return ResourceManager.GetString("UseIdenticalMandatoryParametersDSCName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Identical Parameters For DSC Test and Set Functions.
        /// </summary>
        internal static string UseIdenticalParametersDSCCommonName {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Test and Set-TargetResource functions of DSC Resource must have the same parameters..
        /// </summary>
        internal static string UseIdenticalParametersDSCDescription {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Test and Set-TargetResource functions of DSC Resource must have the same parameters..
        /// </summary>
        internal static string UseIdenticalParametersDSCError {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseIdenticalParametersForDSC.
        /// </summary>
        internal static string UseIdenticalParametersDSCName {
            get {
                return ResourceManager.GetString("UseIdenticalParametersDSCName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create hashtables with literal initializers.
        /// </summary>
        internal static string UseLiteralInitilializerForHashtableCommonName {
            get {
                return ResourceManager.GetString("UseLiteralInitilializerForHashtableCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use literal initializer, @{{}}, for creating a hashtable as they are case-insensitive by default.
        /// </summary>
        internal static string UseLiteralInitilializerForHashtableDescription {
            get {
                return ResourceManager.GetString("UseLiteralInitilializerForHashtableDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create hashtables with literal initliazers.
        /// </summary>
        internal static string UseLiteralInitilializerForHashtableError {
            get {
                return ResourceManager.GetString("UseLiteralInitilializerForHashtableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseLiteralInitializerForHashtable.
        /// </summary>
        internal static string UseLiteralInitilializerForHashtableName {
            get {
                return ResourceManager.GetString("UseLiteralInitilializerForHashtableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use OutputType Correctly.
        /// </summary>
        internal static string UseOutputTypeCorrectlyCommonName {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return types of a cmdlet should be declared using the OutputType attribute..
        /// </summary>
        internal static string UseOutputTypeCorrectlyDescription {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; returns an object of type &apos;{1}&apos; but this type is not declared in the OutputType attribute..
        /// </summary>
        internal static string UseOutputTypeCorrectlyError {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseOutputTypeCorrectly.
        /// </summary>
        internal static string UseOutputTypeCorrectlyName {
            get {
                return ResourceManager.GetString("UseOutputTypeCorrectlyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use process block for command that accepts input from pipeline..
        /// </summary>
        internal static string UseProcessBlockForPipelineCommandCommonName {
            get {
                return ResourceManager.GetString("UseProcessBlockForPipelineCommandCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a command parameter takes its value from the pipeline, the command must use a process block to bind the input objects from the pipeline to that parameter..
        /// </summary>
        internal static string UseProcessBlockForPipelineCommandDescription {
            get {
                return ResourceManager.GetString("UseProcessBlockForPipelineCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command accepts pipeline input but has not defined a process block..
        /// </summary>
        internal static string UseProcessBlockForPipelineCommandError {
            get {
                return ResourceManager.GetString("UseProcessBlockForPipelineCommandError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseProcessBlockForPipelineCommand.
        /// </summary>
        internal static string UseProcessBlockForPipelineCommandName {
            get {
                return ResourceManager.GetString("UseProcessBlockForPipelineCommandName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use PSCredential type..
        /// </summary>
        internal static string UsePSCredentialTypeCommonName {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For PowerShell 4.0 and earlier, a parameter named Credential with type PSCredential must have a credential transformation attribute defined after the PSCredential type attribute. .
        /// </summary>
        internal static string UsePSCredentialTypeDescription {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Credential parameter in &apos;{0}&apos; must be of type PSCredential. For PowerShell 4.0 and earlier, please define a credential transformation attribute, e.g. [System.Management.Automation.Credential()], after the PSCredential type attribute..
        /// </summary>
        internal static string UsePSCredentialTypeError {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Credential parameter found in the script block must be of type PSCredential. For PowerShell 4.0 and earlier please define a credential transformation attribute, e.g. [System.Management.Automation.Credential()], after the PSCredential type attribute. .
        /// </summary>
        internal static string UsePSCredentialTypeErrorSB {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeErrorSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UsePSCredentialType.
        /// </summary>
        internal static string UsePSCredentialTypeName {
            get {
                return ResourceManager.GetString("UsePSCredentialTypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use ShouldProcess For State Changing Functions.
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsCommonName {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions that have verbs like New, Start, Stop, Set, Reset, Restart that change system state should support &apos;ShouldProcess&apos;..
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsDescrption {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsDescrption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function &apos;{0}&apos; has verb that could change system state. Therefore, the function has to support &apos;ShouldProcess&apos;..
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsError {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseShouldProcessForStateChangingFunctions.
        /// </summary>
        internal static string UseShouldProcessForStateChangingFunctionsName {
            get {
                return ResourceManager.GetString("UseShouldProcessForStateChangingFunctionsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet Singular Noun.
        /// </summary>
        internal static string UseSingularNounsCommonName {
            get {
                return ResourceManager.GetString("UseSingularNounsCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cmdlet should use singular instead of plural nouns..
        /// </summary>
        internal static string UseSingularNounsDescription {
            get {
                return ResourceManager.GetString("UseSingularNounsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet &apos;{0}&apos; uses a plural noun. A singular noun should be used instead..
        /// </summary>
        internal static string UseSingularNounsError {
            get {
                return ResourceManager.GetString("UseSingularNounsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseSingularNouns.
        /// </summary>
        internal static string UseSingularNounsName {
            get {
                return ResourceManager.GetString("UseSingularNounsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;{0}&apos; function. DSC Class must implement Get, Set and Test functions..
        /// </summary>
        internal static string UseStandardDSCFunctionsInClassError {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInClassError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Standard Get/Set/Test TargetResource functions in DSC Resource .
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceCommonName {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSC Resource must implement Get, Set and Test-TargetResource functions. DSC Class must implement Get, Set and Test functions..
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceDescription {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;{0}&apos; function. DSC Resource must implement Get, Set and Test-TargetResource functions..
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceError {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StandardDSCFunctionsInResource.
        /// </summary>
        internal static string UseStandardDSCFunctionsInResourceName {
            get {
                return ResourceManager.GetString("UseStandardDSCFunctionsInResourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use SupportsShouldProcess.
        /// </summary>
        internal static string UseSupportsShouldProcessCommonName {
            get {
                return ResourceManager.GetString("UseSupportsShouldProcessCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands typically provide Confirm and Whatif parameters to give more control on its execution in an interactive environment. In PowerShell, a command can use a SupportsShouldProcess attribute to provide this capability. Hence, manual addition of these parameters to a command is discouraged. If a commands need Confirm and Whatif parameters, then it should support ShouldProcess..
        /// </summary>
        internal static string UseSupportsShouldProcessDescription {
            get {
                return ResourceManager.GetString("UseSupportsShouldProcessDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whatif and/or Confirm manually defined in function {0}. Instead, please use SupportsShouldProcess attribute..
        /// </summary>
        internal static string UseSupportsShouldProcessError {
            get {
                return ResourceManager.GetString("UseSupportsShouldProcessError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseSupportsShouldProcess.
        /// </summary>
        internal static string UseSupportsShouldProcessName {
            get {
                return ResourceManager.GetString("UseSupportsShouldProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the *ToExport module manifest fields..
        /// </summary>
        internal static string UseToExportFieldsInManifestCommonName {
            get {
                return ResourceManager.GetString("UseToExportFieldsInManifestCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace {0} with {1}.
        /// </summary>
        internal static string UseToExportFieldsInManifestCorrectionDescription {
            get {
                return ResourceManager.GetString("UseToExportFieldsInManifestCorrectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In a module manifest, AliasesToExport, CmdletsToExport, FunctionsToExport and VariablesToExport fields should not use wildcards or $null in their entries. During module auto-discovery, if any of these entries are missing or $null or wildcard, PowerShell does some potentially expensive work to analyze the rest of the module..
        /// </summary>
        internal static string UseToExportFieldsInManifestDescription {
            get {
                return ResourceManager.GetString("UseToExportFieldsInManifestDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use wildcard or $null in this field. Explicitly specify a list for {0}.  .
        /// </summary>
        internal static string UseToExportFieldsInManifestError {
            get {
                return ResourceManager.GetString("UseToExportFieldsInManifestError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseToExportFieldsInManifest.
        /// </summary>
        internal static string UseToExportFieldsInManifestName {
            get {
                return ResourceManager.GetString("UseToExportFieldsInManifestName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Type At Variable Assignment.
        /// </summary>
        internal static string UseTypeAtVariableAssignmentCommonName {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should be specified at variable assignments to maintain readability and maintainability of script..
        /// </summary>
        internal static string UseTypeAtVariableAssignmentDescription {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify type at the assignment of variable &apos;{0}&apos;.
        /// </summary>
        internal static string UseTypeAtVariableAssignmentError {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseTypeAtVariableAssignment.
        /// </summary>
        internal static string UseTypeAtVariableAssignmentName {
            get {
                return ResourceManager.GetString("UseTypeAtVariableAssignmentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Using:&apos; scope modifier in RunSpace ScriptBlocks.
        /// </summary>
        internal static string UseUsingScopeModifierInNewRunspacesCommonName {
            get {
                return ResourceManager.GetString("UseUsingScopeModifierInNewRunspacesCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace {0} with {1}.
        /// </summary>
        internal static string UseUsingScopeModifierInNewRunspacesCorrectionDescription {
            get {
                return ResourceManager.GetString("UseUsingScopeModifierInNewRunspacesCorrectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a ScriptBlock is intended to be run as a new RunSpace, variables inside it should use &apos;Using:&apos; scope modifier, or be initialized within the ScriptBlock..
        /// </summary>
        internal static string UseUsingScopeModifierInNewRunspacesDescription {
            get {
                return ResourceManager.GetString("UseUsingScopeModifierInNewRunspacesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; is not declared within this ScriptBlock, and is missing the &apos;Using:&apos; scope modifier..
        /// </summary>
        internal static string UseUsingScopeModifierInNewRunspacesError {
            get {
                return ResourceManager.GetString("UseUsingScopeModifierInNewRunspacesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseUsingScopeModifierInNewRunspaces.
        /// </summary>
        internal static string UseUsingScopeModifierInNewRunspacesName {
            get {
                return ResourceManager.GetString("UseUsingScopeModifierInNewRunspacesName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use UTF8 Encoding For Help File.
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileCommonName {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PowerShell help file needs to use UTF8 Encoding..
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileDescription {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File {0} has to use UTF8 instead of {1} encoding because it is a powershell help file..
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileError {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseUTF8EncodingForHelpFile.
        /// </summary>
        internal static string UseUTF8EncodingForHelpFileName {
            get {
                return ResourceManager.GetString("UseUTF8EncodingForHelpFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use verbose message in DSC resource.
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceCommonName {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceCommonName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is a best practice to emit informative, verbose messages in DSC resource functions. This helps in debugging issues when a DSC configuration is executed..
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceDescription {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no call to Write-Verbose in DSC function &apos;{0}&apos;. If you are using Write-Verbose in a helper function, suppress this rule application..
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceErrorFunction {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceErrorFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseVerboseMessageInDSCResource.
        /// </summary>
        internal static string UseVerboseMessageInDSCResourceName {
            get {
                return ResourceManager.GetString("UseVerboseMessageInDSCResourceName", resourceCulture);
            }
        }
    }
}
