# PowerShell Core Community Call - March 15, 2018

## Agenda

* `pwsh --help`
* 6.0.2 and 6.1.0-preview releases
* Breaking changes philosophy
* reminder on PRs/issues
* Script Analyzer
* Release branch in PowerShell-Docs
* Committee calls
* Changes to PowerShell Committee
* Experimental feature flags RFC
* MSI installation RFC
* SSH (time permitting)

## Notes

* `pwsh --help`
  * Bigger issue: should we adopt the `--` convention for long arguments and `-` for single char arguments?
  * Some conversation and pushback within the team about going "all in" on `--` with `pwsh` arguments
  * If we support combination of single char arguments with `-`, we may break with some `-`
* Breaking changes
  * Goal is to continue supporting "universal scripts" between Windows PowerShell and PowerShell Core
  * May leverage experimental feature flags to give users toggles on new features without breaking their existing code paths
* Releases
  * hoping to get 6.0.2 release out today
  * only change is a new release of .NET Core with a security fix
  * Had been hoping to get 6.1.0-preview out sooner than we have, will likely be coming out next week
  * Ran into some tooling/compliance issues, and then gated on the 6.0.2 release
  * After the 6.0.2 release, we should be on a three week cadence for 6.1.0-preview releases
  * People are free to pick up nightly builds of 6.1.0-preview or build it yourself
  * Everything in 6.0.2 should be in 6.1.0-preview
* Why "beta" vs. "preview"?
  * Prior to 6.0 GA, we still had a lot of missing test coverage, so we wanted to send a strong signal that we weren't production ready
  * Test coverage is now higher, so we're not of a "questionable" quality barring new features, so it should be of a higher quality than our previous betas
* Version comparison of versions with strings?
  * `$PSVersionTable.PSVersion` is of type `System.Management.Automation.SemanticVersion` and has been extended to add a `BuildLabel`, a `PreReleaseLabel`, and some comparison operators for dealing with them
  * Useful within PowerShell, but there may be some scenarios outside PowerShell
  * Part of the pain is just discovering about the new type capability
  * Also, `SemanticVersion` isn't available in Windows PowerShell, so that can cause some difficulties in Chocolatey
  * If we exclusively use `-preview`, it may be easy to workaround in the long-run
  * Darwin: "at the very least, make sure that they're alphabetical to make comparisons easier"
* Script Analyzer
  * Seems like folks galvanized by the new committment to working on Script Analyzer
* Release branch in PowerShell-Docs
  * There's now a release branch in PowerShell-Docs
  * You should use this when you're adding docs for features that have been added into the preview branch of PowerShell
  * Mark: "let's require 'this parameter was added in PowerShell Core 6.4' type language for new docs"
* Committee calls
  * Very often you only get to see a one-liner after 20 or 30 minutes of our discussion
  * Is there interest in opening up Committee calls to the outside?
  * Resounding answer is "yes", but redactions may take time
  * Closed door meetings are still important, but we should publish as many recordings or even open up meetings to the public where we can
* Changes to the PowerShell Committee
  * Previously, Project Leads had combined veto power: when one voted, the other voted
  * Kenneth Hansen and Angel Calvo have left Microsoft
  * We voted yesterday to remove the Project Leads role and add Kenneth Hansen as a Committee member
* RFC
  * Experimental feature flags: https://github.com/PowerShell/PowerShell-RFC/pull/114
  * Still will require lightweight RFCs, but the goal is to make the process quicker and address more RFCs
  * MSI Installation path RFC: https://github.com/PowerShell/PowerShell-RFC/pull/115
* SSH
  * ssh.exe has been moved to `system32\OpenSSH` which is appended to the PATH so as not to break existing SSH clients
* curl vs. curl.exe
  * Unlikely to remove `curl` aliases in Windows PowerShell because of backwards compatibility
* Editor Services
  * PSReadline support in Editor Services should be coming in soon
* PSReadline 2.0 will add support for screen readers, and will likely be added to both Windows PowerShell and PowerShell Core
* "Can we use | on the next line as a continuation character"
  * Discussion of https://github.com/PowerShell/PowerShell/issues/3020
  * See the recording for the discussion, it moved quickly :)
