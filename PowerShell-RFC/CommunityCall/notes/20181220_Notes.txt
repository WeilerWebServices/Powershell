# PowerShell Core

## Agenda

* documentation repo move
* doc-a-thon #2
* PowerShell 6.2 release
* support lifecycle
* Functions
* VS Code extension release

## Notes

* documentation repo move from PowerShell GitHub org to MicrosoftDocs org
    * Jan 16th at 5p PST
    * will enable better tooling, publishing, CI, etc.
* doc-a-thon #2
    * engineering team spending a day on contributing to documentation
    * 9 PRs: `powershell.config.json`, migrating modules from Windows PS to Core
    * a few high-priority issues remaining
* PS 6.2 release
    * last preview in Jan, RC in Feb, GA in March
    * no major feature improvements
    * built on top of .NET Core 2.1 (which is an LTS release)
* support lifecycle
    * investigating an option to make an active vs. LTS branch
        * is an LTS needed?
    * likely going to tie ourselves more closely to the .NET support lifecycles
        * they have an LTS for 2.1 that lasts for three years
* "will PS Core version updates be shipped in Windows Update?"
    * Today, we will only ship *critical* security updates via Microsoft Update
        * this hasn't happened yet
    * Possible move to MSIX
        * doesn't work on downlevel Windows versions (pre-1809)
    * Interactive update on-start is hard to implement
* VS Code ISE parity
    * [label on GitHub for issues](https://github.com/powershell/vscode-powershell/issues?q=is%3Aopen+is%3Aissue+label%3AISE-Compatibility)
    * https://github.com/PowerShell/vscode-powershell/blob/master/docs/ise_compatibility.md
* Out-GridView
    * existing implementation can be used in Windows with .NET Core 3.0 / Windows
        * won't help non-Windows
    * we've experimented with a possible web implementation using WebSockets, but it's non-trivial
    * macOS-compatible Out-GridView on the PowerShell Community Slack
    * Select-Interactive work by jaykul: https://t.co/dlhBkKfP1N
* PowerShell in Azure Functions
    * serverless PaaS service in Azure
    * akin to AWS Lambda
    * Ping Joey if you want to be part of a preview of this
    * "Do you support `$returns`?
        * Not sure about our implementation yet
            * Everything in the pipeline
            * Just put the last item in the pipeline
            * Some mechanism for putting stuff into `$returns`
        * Durable Functions depends on `$returns`, so eventually yes
* VS Code extension release this morning
    * fixed bugs in the folding, crashes introduced by new reference following
* text editor for console sessions on Windows
* `set -e` question (see transcript)
    * https://github.com/PowerShell/PowerShell-RFC/pull/88
    * psexec and robocopy use non-zero exit codes for non-error cases
* "does COM work in PowerShell Core?"
    * as long as you're not trying to implement a COM server, yes
    * all COM consumption/usage should work the same as in Windows PowerShell
* MTA vs. STA (multi-thread vs. single-threaded apartment)
    * Windows PowerShell is STA by default (configurable)
    * PS Core is MTA only today
    * will have a greater impact when WinForms support comes back
    * we should doc the significance at some point
    * https://github.com/PowerShell/PowerShell/issues/6908