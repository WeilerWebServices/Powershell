# PowerShell Core Community Call - November 16, 2017

## Agenda

* RC/GA tentative dates
* Buckets of investment for 6.1 timeframe
* Support lifecycle (unless people say I already talked about it last time)
* Release automation
* New Committee members (I remembered!)
* Community questions
  * VS Code polish (seems to hang a lot?)
  * David Wilson leaving
  * PS Standard 5.1 timeline
  * Module manifest improvements for x-plat in 6.1

## Notes

* RC *may* possibly land tomorrow (Fri, Nov 17), but don't be surprised if it slips to Monday (Nov 20)
* Outstanding PRs not marked for 6.0 will be included as part of 6.1
* 6.1 beta likely won't start until February
* 6.0 GA is targetting January 10, 2018
  * of course, we can slip, but we'll do our best not to :)

* Engineering systems and automation are a top priority for the 6.1 timeframe
  * Signing is purely manual today
  * At least 2 months of dev time in 2018 on engineering efficiency
  * Still taking PRs, but feature development will diminish in that timeframe
  * Some of this is internal in Azure as well

* Most of the open-source tooling for PowerShell are now underneath Steve
  * This includes VS Code, Editor Services, Script Analyzer, Phosphor, platyPS, Plaster, Polaris, etc.
  * We want to drive consistency between our repos, so expect some shuffling of labels/process (with your input!)

* PowerShell 6.1 feature priorities
  * Security parity with Windows PowerShell 5.1
  * Improvements to OpenSSH-based PowerShell remoting (PSRP)
    * Performance, ease to configure, etc.
  * Concurrency/parallelism
    * RFC published by Bruce: TODO
    * Going to revisit this to make sure that it's still the right thing to do
    * Might just bless/endorse an existing community solution here
  * Help system improvements
    * Better rendering of the help (syntax highlighting, hyperlinks?)
    * Native Markdown support (no more MAML!)
  * Curses-*like* console UI
    * e.g. Out-GridView in your terminal
  * Experimental feature flags
    * Allows us to check-in unstable code that can be turned off
  * `-ComputerName` like parameter or attribute that can be easily added to cmdlets
  * `sudo Foo-Command` support from within a PowerShell runspace
  * IoT/ARM64 support for sensor manipulation
    * No ARM32 support in .NET Core today
  * Suggestion from Keith Hill: improved module manifest support for cross-platform
    * E.g. `ExportedFunctionsOnWindows`
    * Challenge here is always downlevel: any keys we add won't work on older versions

* David Wilson has moved on from Microsoft
  * Tyler Leonhardt is joining Steve's team to work on tooling
    * Pushing out a patched VS Code release (hopefully this week?)
  * Another senior engineer will be ramped up on tooling post-RC
  * Props to Keith Hill for crushing it as a maintainer in the tooling space!
  * Plans are still in flux for priorities within tooling, but we'll have updates solution

* PowerShell Standard 5.1
  * Jim Truher is producing a PowerShellStandard.Library 5.1
    * Hopefully we'll put something out by GA timeframe (even if it's not necessarily GA itself)
  * Again these are for building universal modules" that run across Windows PowerShell and PowerShell Core
  * PS Standard 3.0 was a *hugely* manual effort, so 5.1 is a bit more difficult than you'd expect
    * Have to review explicitly and manual

* Documentation refresh for 6.0 GA
  * `Documentation-Needed` and `Breaking-Change` labels still need to be documented in PowerShell-Docs

* New PowerShell Committee members
  * Dongbo Wang and Jim Truher have joined the Committee
    * Jim Truher was one of the original PMs on PowerShell, offers a ton of experience there
    * Dongbo Wang is an experienced developer and PowerShell Core and will also have a ton of insight to offer into the Committee
  * Hopefully this means we can move more quickly than before
    * We'd like to chew through some of our RFC backlog as well (and generally be more responsive there)
  * Jason Shirk (lzybkr) has left the Committee due to job committments, but will still be around in the community to contribute where he can

* Release cadence and support lifecycle
  * Plan is to have a minor version release of PowerShell Core 6.x every 6 months
    * e.g. 6.1, 6.2, 6.3, etc.
  * Will still try to keep a 3-week release cadence of betas as well
  * We'll be adopting a modern support lifecycle for .0, possibly 6.1 or 6.2 as well
    * At some point in the future, we'll adopt a fixed lifecycle on a specific minor branch of 6.x (e.g. 6.1 or 6.2)

* DSC Core
  * https://blogs.msdn.microsoft.com/powershell/2017/09/12/dsc-future-direction-update/
  * DSC Resource Kit Community Call as well: https://github.com/PowerShell/DscResources/tree/master/CommunityCalls

* How to think about divergence of features based on cross-platform support
  * e.g. Should we support something on Linux where it's not supported on macOS?
  * Let's take it case-by-case, generally we should only think of the split between Windows and non-Windows
    * But if functionality is needed enough and macOS is limited, we could make exceptions there.