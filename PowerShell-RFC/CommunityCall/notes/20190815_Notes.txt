# PowerShell Community Call - August 15, 2019

## Agenda

* RFCs
    * Process overall
        * Blog to come
    * Make sure to check out
        * Foreach-Object -Parallel
        * Ternary
        * Secrets management
        * PowerShellGet 3.0
    * Point to Jason
* Preview 3 release
* Out-GridView
* Stance on Windows
* ISE
* Remainder of questions

## Notes

* RFCs
    * Keep eyes peeled for blog on RFC process
    * Check out [7.0-Consider](https://github.com/PowerShell/PowerShell-RFC/pulls?q=is%3Aopen+is%3Apr+milestone%3A7.0-Consider) milestone on PowerShell-RFC repo to give opinion on RFCs
    PS Team would like for 7.0
        * Also looking at community RFCs
    * Jason is putting together a YouTube video on RFC process and ErrorView in particular
    * Current ErrorView tends to obscure a lot of the important aspects of the error message with verbosity,
      and we're looking to simplify it significantly.
* PowerShell 7 releases
    * 7.0-Preview.3 is releasing next week
    * There will be a preview.4
    * We would like to ship at the end of this calendar year to align (roughly) with .NET Core 3.1 GA
    * Desire to have a release candidate (RC) in November
        * Only critical bug fixes assuming that there are no major problems with this release
        * If something is experimental in RC, it will stay experimental in GA
* Out-GridView working fully cross-platform with `-PassThru` support
    * Also has a "Show Code" button that saves your column filters as `Where-Object` filters
    * Con: ships at 280 MBs due to native GUI code for each OS
        * Looking for opportunities to reduce this in the future
        * One hacky proposal: delete the other native dependencies at install time
    * Check out the repo at https://github.com/powershell/GraphicalTools
    * Long-term, we have a desire to support RIDs at install-time in the Gallery, no ETA there
* Update on putting SQL module on GitHub?
    * Nothing to share right now
* Guest management cmdlets on macOS/Linux
    * The WindowsCompatibility module works through Windows PowerShell / .NET
      in order to run those Windows PS cmdlets.
      We may invest in native binary wrappers for macOS/Linux in the future,
      but nothing we're committing to now.
* Code/test coverage
    * Jim looking to tools like Coverlet for cross-platform code coverage
    * Jim will create an issue in the PowerShell issue for anyone looking to help out there
* Backlog of community PRs
    * Team is focused on some feature work, and will pivot back to more PR reviews soon