diff --git a/src/Microsoft.PowerShell.ConsoleHost/host/msh/Telemetry.cs b/src/Microsoft.PowerShell.ConsoleHost/host/msh/Telemetry.cs
index 58987b32..9b6bbbfb 100644
--- a/src/Microsoft.PowerShell.ConsoleHost/host/msh/Telemetry.cs
+++ b/src/Microsoft.PowerShell.ConsoleHost/host/msh/Telemetry.cs
@@ -21,6 +21,7 @@ namespace Microsoft.PowerShell
         // The name of the file by when present in $PSHOME will enable telemetry.
         // If this file is not present, no telemetry will be sent.
         private const string TelemetrySemaphoreFilename = "DELETE_ME_TO_DISABLE_CONSOLEHOST_TELEMETRY";
+        private const string TelemetryOptout = "POWERSHELL_TELEMETRY_OPTOUT";
 
         // The path to the semaphore file which enables telemetry
         private static string TelemetrySemaphoreFilePath = Path.Combine(
@@ -42,6 +43,28 @@ namespace Microsoft.PowerShell
             TelemetryConfiguration.Active.TelemetryChannel.DeveloperMode = _developerMode;
         }
 
+        internal static bool GetEnvironmentVariableAsBool(string name, bool defaultValue) {
+            var str = Environment.GetEnvironmentVariable(name);
+            if (string.IsNullOrEmpty(str))
+            {
+                return defaultValue;
+            }
+
+            switch (str.ToLowerInvariant())
+            {
+                case "true":
+                case "1":
+                case "yes":
+                    return true;
+                case "false":
+                case "0":
+                case "no":
+                    return false;
+                default:
+                    return defaultValue;
+            }
+        }
+
         /// <summary>
         /// Send the telemetry
         /// </summary>
@@ -50,14 +73,18 @@ namespace Microsoft.PowerShell
             try
             {
                 // if the semaphore file exists, try to send telemetry
-                if (Utils.NativeFileExists(TelemetrySemaphoreFilePath))
+                var Enabled = Utils.NativeFileExists(TelemetrySemaphoreFilePath) && !GetEnvironmentVariableAsBool(TelemetryOptout, false);
+
+                if ( ! Enabled )
+                {
+                    return;
+                }
+
+                if ( _telemetryClient == null )
                 {
-                    if ( _telemetryClient == null )
-                    {
-                        _telemetryClient = new TelemetryClient();
-                    }
-                    _telemetryClient.TrackEvent(eventName, payload, null);
+                    _telemetryClient = new TelemetryClient();
                 }
+                _telemetryClient.TrackEvent(eventName, payload, null);
             }
             catch (Exception)
             {
