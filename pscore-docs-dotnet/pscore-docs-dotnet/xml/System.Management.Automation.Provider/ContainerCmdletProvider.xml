<Type Name="ContainerCmdletProvider" FullName="System.Management.Automation.Provider.ContainerCmdletProvider">
  <TypeSignature Language="C#" Value="public abstract class ContainerCmdletProvider : System.Management.Automation.Provider.ItemCmdletProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ContainerCmdletProvider extends System.Management.Automation.Provider.ItemCmdletProvider" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Provider.ContainerCmdletProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ContainerCmdletProvider&#xA;Inherits ItemCmdletProvider" />
  <TypeSignature Language="F#" Value="type ContainerCmdletProvider = class&#xA;    inherit ItemCmdletProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Provider.ItemCmdletProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The base class for Cmdlet providers that expose a single level of items.
             </summary>
    <remarks>
             The ContainerCmdletProvider class is base class that a provider derives from
             to implement methods that allow
             the use of a set of core commands against the objects that the provider
             gives access to. By deriving from this class users can take advantage of
             all the features of the <see cref="T:System.Management.Automation.Provider.ItemCmdletProvider" /> as well as
             globbing and the following commands when targeting this provider:
                 get-childitem
                 rename-item
                 new-item
                 remove-item
                 set-location
                 push-location
                 pop-location
                 get-location -stack
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContainerCmdletProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPath">
      <MemberSignature Language="C#" Value="protected virtual bool ConvertPath (string path, string filter, ref string updatedPath, ref string updatedFilter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ConvertPath(string path, string filter, string&amp; updatedPath, string&amp; updatedFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.ConvertPath(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ConvertPath (path As String, filter As String, ByRef updatedPath As String, ByRef updatedFilter As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ConvertPath : string * string *  *  -&gt; bool&#xA;override this.ConvertPath : string * string *  *  -&gt; bool" Usage="containerCmdletProvider.ConvertPath (path, filter, updatedPath, updatedFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="updatedPath" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="updatedFilter" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item. Unlike most other provider APIs, this path is likely to
             contain PowerShell wildcards.
             </param>
        <param name="filter">
             The provider-specific filter currently applied.
             </param>
        <param name="updatedPath">
             The new path to the item.
             </param>
        <param name="updatedFilter">
             The new filter.
             </param>
        <summary>
             Gets a new provider-specific path and filter (if any) that corresponds to the given
             path.
             </summary>
        <returns>
             True if the path or filter were altered. False otherwise.
             </returns>
        <remarks>
             Providers override this method if they support a native filtering syntax that
             can offer performance improvements over wildcard matching done by the PowerShell
             engine.
             If the provider can handle a portion (or all) of the PowerShell wildcard with
             semantics equivalent to the PowerShell wildcard, it may adjust the path to exclude
             the PowerShell wildcard.
             If the provider can augment the PowerShell wildcard with an approximate filter (but
             not replace it entirely,) it may simply return a filter without modifying the path.
             In this situation, PowerShell's wildcarding will still be applied to a smaller result
             set, resulting in improved performance.
            
             The default implementation of this method leaves both Path and Filter unmodified.
            
             PowerShell wildcarding semantics are handled by the System.Management.Automation.Wildcardpattern
             class.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyItem">
      <MemberSignature Language="C#" Value="protected virtual void CopyItem (string path, string copyPath, bool recurse);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CopyItem(string path, string copyPath, bool recurse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.CopyItem(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CopyItem (path As String, copyPath As String, recurse As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CopyItem : string * string * bool -&gt; unit&#xA;override this.CopyItem : string * string * bool -&gt; unit" Usage="containerCmdletProvider.CopyItem (path, copyPath, recurse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="copyPath" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
             The path of the item to copy.
             </param>
        <param name="copyPath">
             The path of the item to copy to.
             </param>
        <param name="recurse">
             Tells the provider to recurse sub-containers when copying.
             </param>
        <summary>
             Copies an item at the specified path to an item at the <paramref name="copyPath" />.
             </summary>
        <returns>
             Nothing is returned, but all the objects that were copied should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to copy provider objects using
             the copy-item cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path and items being copied
             meets those requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not copy objects over existing items unless the Force
             property is set to true. For instance, the FileSystem provider should not copy c:\temp\foo.txt over
             c:\bar.txt if c:\bar.txt already exists unless the Force parameter is true.
            
             If <paramref name="copyPath" /> exists and is a container then Force isn't required and <paramref name="path" />
             should be copied into the <paramref name="copyPath" /> container as a child.
            
             If <paramref name="recurse" /> is true, the provider implementation is responsible for
             preventing infinite recursion when there are circular links and the like. An appropriate
             terminating exception should be thrown if this situation occurs.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyItemDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object CopyItemDynamicParameters (string path, string destination, bool recurse);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CopyItemDynamicParameters(string path, string destination, bool recurse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.CopyItemDynamicParameters(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CopyItemDynamicParameters (path As String, destination As String, recurse As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member CopyItemDynamicParameters : string * string * bool -&gt; obj&#xA;override this.CopyItemDynamicParameters : string * string * bool -&gt; obj" Usage="containerCmdletProvider.CopyItemDynamicParameters (path, destination, recurse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="destination" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="destination">
             The path of the item to copy to.
             </param>
        <param name="recurse">
             Tells the provider to recurse sub-containers when copying.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the copy-item cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildItems">
      <MemberSignature Language="C#" Value="protected virtual void GetChildItems (string path, bool recurse);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetChildItems(string path, bool recurse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.GetChildItems(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetChildItems (path As String, recurse As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetChildItems : string * bool -&gt; unit&#xA;override this.GetChildItems : string * bool -&gt; unit" Usage="containerCmdletProvider.GetChildItems (path, recurse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
             The path (or name in a flat namespace) to the item from which to retrieve the children.
             </param>
        <param name="recurse">
             True if all children in a subtree should be retrieved, false if only a single
             level of children should be retrieved. This parameter should only be true for
             the NavigationCmdletProvider derived class.
             </param>
        <summary>
             Gets the children of the item at the specified path.
             </summary>
        <returns>
             Nothing is returned, but all objects should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user access to the provider objects using
             the get-childitem cmdlets.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not write objects that are generally hidden from
             the user unless the Force property is set to true. For instance, the FileSystem provider should
             not call WriteItemObject for hidden or system files unless the Force property is set to true.
            
             The provider implementation is responsible for preventing infinite recursion when there are
             circular links and the like. An appropriate terminating exception should be thrown if this
             situation occurs.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildItems">
      <MemberSignature Language="C#" Value="protected virtual void GetChildItems (string path, bool recurse, uint depth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetChildItems(string path, bool recurse, unsigned int32 depth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.GetChildItems(System.String,System.Boolean,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetChildItems (path As String, recurse As Boolean, depth As UInteger)" />
      <MemberSignature Language="F#" Value="abstract member GetChildItems : string * bool * uint32 -&gt; unit&#xA;override this.GetChildItems : string * bool * uint32 -&gt; unit" Usage="containerCmdletProvider.GetChildItems (path, recurse, depth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
        <Parameter Name="depth" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="path">
             The path (or name in a flat namespace) to the item from which to retrieve the children.
             </param>
        <param name="recurse">
             True if all children in a subtree should be retrieved, false if only a single
             level of children should be retrieved. This parameter should only be true for
             the NavigationCmdletProvider derived class.
             </param>
        <param name="depth">
             Limits the depth of recursion; uint.MaxValue performs full recursion.
             </param>
        <summary>
             Gets the children of the item at the specified path.
             </summary>
        <returns>
             Nothing is returned, but all objects should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user access to the provider objects using
             the get-childitem cmdlets.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not write objects that are generally hidden from
             the user unless the Force property is set to true. For instance, the FileSystem provider should
             not call WriteItemObject for hidden or system files unless the Force property is set to true.
            
             The provider implementation is responsible for preventing infinite recursion when there are
             circular links and the like. An appropriate terminating exception should be thrown if this
             situation occurs.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildItemsDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object GetChildItemsDynamicParameters (string path, bool recurse);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetChildItemsDynamicParameters(string path, bool recurse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.GetChildItemsDynamicParameters(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetChildItemsDynamicParameters (path As String, recurse As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetChildItemsDynamicParameters : string * bool -&gt; obj&#xA;override this.GetChildItemsDynamicParameters : string * bool -&gt; obj" Usage="containerCmdletProvider.GetChildItemsDynamicParameters (path, recurse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="recurse">
             True if all children in a subtree should be retrieved, false if only a single
             level of children should be retrieved. This parameter should only be true for
             the NavigationCmdletProvider derived class.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the get-childitem cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildNames">
      <MemberSignature Language="C#" Value="protected virtual void GetChildNames (string path, System.Management.Automation.ReturnContainers returnContainers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetChildNames(string path, valuetype System.Management.Automation.ReturnContainers returnContainers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.GetChildNames(System.String,System.Management.Automation.ReturnContainers)" />
      <MemberSignature Language="F#" Value="abstract member GetChildNames : string * System.Management.Automation.ReturnContainers -&gt; unit&#xA;override this.GetChildNames : string * System.Management.Automation.ReturnContainers -&gt; unit" Usage="containerCmdletProvider.GetChildNames (path, returnContainers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="returnContainers" Type="System.Management.Automation.ReturnContainers" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item from which to retrieve the child names.
             </param>
        <param name="returnContainers">
             Determines if all containers should be returned or only those containers that match the
             filter(s).
             </param>
        <summary>
             Gets names of the children of the specified path.
             </summary>
        <returns>
             Nothing is returned, but all objects should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user access to the provider objects using
             the get-childitem  -name cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class. The exception to this
             is if <paramref name="returnAllContainers" /> is true, then any child name for a container should
             be returned even if it doesn't match the Filter, Include, or Exclude.
            
             By default overrides of this method should not write the names of objects that are generally hidden from
             the user unless the Force property is set to true. For instance, the FileSystem provider should
             not call WriteItemObject for hidden or system files unless the Force property is set to true.
            
             The provider implementation is responsible for preventing infinite recursion when there are
             circular links and the like. An appropriate terminating exception should be thrown if this
             situation occurs.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildNamesDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object GetChildNamesDynamicParameters (string path);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetChildNamesDynamicParameters(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.GetChildNamesDynamicParameters(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetChildNamesDynamicParameters (path As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetChildNamesDynamicParameters : string -&gt; obj&#xA;override this.GetChildNamesDynamicParameters : string -&gt; obj" Usage="containerCmdletProvider.GetChildNamesDynamicParameters path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the get-childitem -name cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChildItems">
      <MemberSignature Language="C#" Value="protected virtual bool HasChildItems (string path);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasChildItems(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.HasChildItems(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HasChildItems (path As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasChildItems : string -&gt; bool&#xA;override this.HasChildItems : string -&gt; bool" Usage="containerCmdletProvider.HasChildItems path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item to see if it has children.
             </param>
        <summary>
             Determines if the item at the specified path has children.
             </summary>
        <returns>
             True if the item has children, false otherwise.
             </returns>
        <remarks>
             Providers override this method to give the provider infrastructure the ability to determine
             if a particular provider object has children without having to retrieve all the child items.
            
             For implementers of <see cref="T:System.Management.Automation.Provider.ContainerCmdletProvider" /> classes and those derived from it,
             if a null or empty path is passed,
             the provider should consider any items in the data store to be children
             and return true.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewItem">
      <MemberSignature Language="C#" Value="protected virtual void NewItem (string path, string itemTypeName, object newItemValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NewItem(string path, string itemTypeName, object newItemValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.NewItem(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub NewItem (path As String, itemTypeName As String, newItemValue As Object)" />
      <MemberSignature Language="F#" Value="abstract member NewItem : string * string * obj -&gt; unit&#xA;override this.NewItem : string * string * obj -&gt; unit" Usage="containerCmdletProvider.NewItem (path, itemTypeName, newItemValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="itemTypeName" Type="System.String" />
        <Parameter Name="newItemValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item to create.
             </param>
        <param name="itemTypeName">
             The provider defined type for the object to create.
             </param>
        <param name="newItemValue">
             This is a provider specific type that the provider can use to create a new
             instance of an item at the specified path.
             </param>
        <summary>
             Creates a new item at the specified path.
             </summary>
        <returns>
             Nothing is returned, but the renamed items should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to create new provider objects using
             the new-item cmdlet.
            
             The <paramref name="itemTypeName" /> parameter is a provider specific string that the user specifies to tell
             the provider what type of object to create.  For instance, in the FileSystem provider the <paramref name="type" />
             parameter can take a value of "file" or "directory". The comparison of this string should be
             case-insensitive and you should also allow for least ambiguous matches. So if the provider allows
             for the types "file" and "directory", only the first letter is required to disambiguate.
             If <paramref name="itemTypeName" /> refers to a type the provider cannot create, the provider should produce
             an <see cref="T:System.ArgumentException" /> with a message indicating the types the provider can create.
            
             The <paramref name="newItemValue" /> parameter can be any type of object that the provider can use
             to create the item. It is recommended that the provider accept at a minimum strings, and an instance
             of the type of object that would be returned from GetItem() for this path. <see cref="M:System.Management.Automation.LanguagePrimitives.ConvertTo(System.Object,System.Type)" />
             can be used to convert some types to the desired type.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewItemDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object NewItemDynamicParameters (string path, string itemTypeName, object newItemValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object NewItemDynamicParameters(string path, string itemTypeName, object newItemValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.NewItemDynamicParameters(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewItemDynamicParameters (path As String, itemTypeName As String, newItemValue As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member NewItemDynamicParameters : string * string * obj -&gt; obj&#xA;override this.NewItemDynamicParameters : string * string * obj -&gt; obj" Usage="containerCmdletProvider.NewItemDynamicParameters (path, itemTypeName, newItemValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="itemTypeName" Type="System.String" />
        <Parameter Name="newItemValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="itemTypeName">
             The provider defined type of the item to create.
             </param>
        <param name="newItemValue">
             This is a provider specific type that the provider can use to create a new
             instance of an item at the specified path.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the new-item cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected virtual void RemoveItem (string path, bool recurse);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveItem(string path, bool recurse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.RemoveItem(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RemoveItem (path As String, recurse As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RemoveItem : string * bool -&gt; unit&#xA;override this.RemoveItem : string * bool -&gt; unit" Usage="containerCmdletProvider.RemoveItem (path, recurse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item to remove.
             </param>
        <param name="recurse">
             True if all children in a subtree should be removed, false if only a single
             level of children should be removed. This parameter should only be true for
             NavigationCmdletProvider and its derived classes.
             </param>
        <summary>
             Removes (deletes) the item at the specified path
             </summary>
        <returns>
             Nothing should be returned or written from this method.
             </returns>
        <remarks>
             Providers override this method to allow the user the ability to remove provider objects using
             the remove-item cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not remove objects that are generally hidden from
             the user unless the Force property is set to true. For instance, the FileSystem provider should
             not remove a hidden or system file unless the Force property is set to true.
            
             The provider implementation is responsible for preventing infinite recursion when there are
             circular links and the like. An appropriate terminating exception should be thrown if this
             situation occurs.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItemDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object RemoveItemDynamicParameters (string path, bool recurse);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object RemoveItemDynamicParameters(string path, bool recurse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.RemoveItemDynamicParameters(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveItemDynamicParameters (path As String, recurse As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member RemoveItemDynamicParameters : string * bool -&gt; obj&#xA;override this.RemoveItemDynamicParameters : string * bool -&gt; obj" Usage="containerCmdletProvider.RemoveItemDynamicParameters (path, recurse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="recurse">
             True if all children in a subtree should be removed, false if only a single
             level of children should be removed. This parameter should only be true for
             NavigationCmdletProvider and its derived classes.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the remove-item cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameItem">
      <MemberSignature Language="C#" Value="protected virtual void RenameItem (string path, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenameItem(string path, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.RenameItem(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RenameItem (path As String, newName As String)" />
      <MemberSignature Language="F#" Value="abstract member RenameItem : string * string -&gt; unit&#xA;override this.RenameItem : string * string -&gt; unit" Usage="containerCmdletProvider.RenameItem (path, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item to rename.
             </param>
        <param name="newName">
             The name to which the item should be renamed. This name should always be
             relative to the parent container.
             </param>
        <summary>
             Renames the item at the specified path to the new name provided.
             </summary>
        <returns>
             Nothing is returned, but the renamed items should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to rename provider objects using
             the rename-item cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not allow renaming objects that are generally hidden from
             the user unless the Force property is set to true. For instance, the FileSystem provider should
             not allow renaming of a hidden or system file unless the Force property is set to true.
            
             This method is intended for the modification of the item's name only and not for Move operations.
             An error should be written to <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)" /> if the <paramref name="newName" />
             parameter contains path separators or would cause the item to change its parent location.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameItemDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object RenameItemDynamicParameters (string path, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object RenameItemDynamicParameters(string path, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.ContainerCmdletProvider.RenameItemDynamicParameters(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenameItemDynamicParameters (path As String, newName As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member RenameItemDynamicParameters : string * string -&gt; obj&#xA;override this.RenameItemDynamicParameters : string * string -&gt; obj" Usage="containerCmdletProvider.RenameItemDynamicParameters (path, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="newName">
             The name to which the item should be renamed. This name should always be
             relative to the parent container.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the rename-item cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>