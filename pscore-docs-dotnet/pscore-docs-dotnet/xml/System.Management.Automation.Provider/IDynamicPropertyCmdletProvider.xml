<Type Name="IDynamicPropertyCmdletProvider" FullName="System.Management.Automation.Provider.IDynamicPropertyCmdletProvider">
  <TypeSignature Language="C#" Value="public interface IDynamicPropertyCmdletProvider : System.Management.Automation.Provider.IPropertyCmdletProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicPropertyCmdletProvider implements class System.Management.Automation.Provider.IPropertyCmdletProvider" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicPropertyCmdletProvider&#xA;Implements IPropertyCmdletProvider" />
  <TypeSignature Language="F#" Value="type IDynamicPropertyCmdletProvider = interface&#xA;    interface IPropertyCmdletProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Management.Automation.Provider.IPropertyCmdletProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             An interface that can be implemented on a Cmdlet provider to expose the dynamic
             manipulation of properties.
             </summary>
    <remarks>
             An IDynamicPropertyCmdletProvider provider implements a set of methods that allows
             the use of a set of core commands against the data store that the provider
             gives access to. By implementing this interface users can take advantage
             the commands that expose the creation and deletion of properties on an item.
                 rename-itemproperty
                 remove-itemproperty
                 new-itemproperty
                 etc.
             This interface should only be implemented on derived classes of
             <see cref="T:System.Management.Automation.Provider.CmdletProvider" />, <see cref="T:System.Management.Automation.Provider.ItemCmdletProvider" />,
             <see cref="T:System.Management.Automation.Provider.ContainerCmdletProvider" />, or <see cref="T:System.Management.Automation.Provider.NavigationCmdletProvider" />.
            
             A Cmdlet provider should implemented this interface if items in the
             namespace have dynamic properties the provide wishes to expose.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyProperty">
      <MemberSignature Language="C#" Value="public void CopyProperty (string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyProperty(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.CopyProperty(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyProperty (sourcePath As String, sourceProperty As String, destinationPath As String, destinationProperty As String)" />
      <MemberSignature Language="F#" Value="abstract member CopyProperty : string * string * string * string -&gt; unit" Usage="iDynamicPropertyCmdletProvider.CopyProperty (sourcePath, sourceProperty, destinationPath, destinationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourcePath" Type="System.String" />
        <Parameter Name="sourceProperty" Type="System.String" />
        <Parameter Name="destinationPath" Type="System.String" />
        <Parameter Name="destinationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourcePath">
             The path to the item on which to copy the property.
             </param>
        <param name="sourceProperty">
             The name of the property to copy.
             </param>
        <param name="destinationPath">
             The path to the item on which to copy the property to.
             </param>
        <param name="destinationProperty">
             The destination property to copy to.
             </param>
        <summary>
             Copies a property of the item at the specified path to a new property on the
             destination item.
             </summary>
        <returns>
             Nothing.  The new property that was copied to should be passed to the WritePropertyObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to copy properties of provider objects
             using the copy-itemproperty cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not copy properties from or to objects that are generally hidden from
             the user unless the Force property is set to true. An error should be sent to the WriteError method if
             the path represents an item that is hidden from the user and Force is set to false.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPropertyDynamicParameters">
      <MemberSignature Language="C#" Value="public object CopyPropertyDynamicParameters (string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CopyPropertyDynamicParameters(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.CopyPropertyDynamicParameters(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyPropertyDynamicParameters (sourcePath As String, sourceProperty As String, destinationPath As String, destinationProperty As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member CopyPropertyDynamicParameters : string * string * string * string -&gt; obj" Usage="iDynamicPropertyCmdletProvider.CopyPropertyDynamicParameters (sourcePath, sourceProperty, destinationPath, destinationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourcePath" Type="System.String" />
        <Parameter Name="sourceProperty" Type="System.String" />
        <Parameter Name="destinationPath" Type="System.String" />
        <Parameter Name="destinationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourcePath">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="sourceProperty">
             The name of the property to copy.
             </param>
        <param name="destinationPath">
             The path to the item on which to copy the property to.
             </param>
        <param name="destinationProperty">
             The destination property to copy to.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to the
             copy-itemproperty cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveProperty">
      <MemberSignature Language="C#" Value="public void MoveProperty (string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveProperty(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.MoveProperty(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveProperty (sourcePath As String, sourceProperty As String, destinationPath As String, destinationProperty As String)" />
      <MemberSignature Language="F#" Value="abstract member MoveProperty : string * string * string * string -&gt; unit" Usage="iDynamicPropertyCmdletProvider.MoveProperty (sourcePath, sourceProperty, destinationPath, destinationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourcePath" Type="System.String" />
        <Parameter Name="sourceProperty" Type="System.String" />
        <Parameter Name="destinationPath" Type="System.String" />
        <Parameter Name="destinationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourcePath">
             The path to the item on which to move the property.
             </param>
        <param name="sourceProperty">
             The name of the property to move.
             </param>
        <param name="destinationPath">
             The path to the item on which to move the property to.
             </param>
        <param name="destinationProperty">
             The destination property to move to.
             </param>
        <summary>
             Moves a property on an item specified by the path.
             </summary>
        <returns>
             Nothing.  The new property that was created should be passed to the WritePropertyObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to move properties from one provider object
             to another using the move-itemproperty cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not move properties on or to objects that are generally hidden from
             the user unless the Force property is set to true. An error should be sent to the WriteError method if
             the path represents an item that is hidden from the user and Force is set to false.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePropertyDynamicParameters">
      <MemberSignature Language="C#" Value="public object MovePropertyDynamicParameters (string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MovePropertyDynamicParameters(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.MovePropertyDynamicParameters(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MovePropertyDynamicParameters (sourcePath As String, sourceProperty As String, destinationPath As String, destinationProperty As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member MovePropertyDynamicParameters : string * string * string * string -&gt; obj" Usage="iDynamicPropertyCmdletProvider.MovePropertyDynamicParameters (sourcePath, sourceProperty, destinationPath, destinationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourcePath" Type="System.String" />
        <Parameter Name="sourceProperty" Type="System.String" />
        <Parameter Name="destinationPath" Type="System.String" />
        <Parameter Name="destinationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourcePath">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="sourceProperty">
             The name of the property to copy.
             </param>
        <param name="destinationPath">
             The path to the item on which to copy the property to.
             </param>
        <param name="destinationProperty">
             The destination property to copy to.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to the
             move-itemproperty cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewProperty">
      <MemberSignature Language="C#" Value="public void NewProperty (string path, string propertyName, string propertyTypeName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NewProperty(string path, string propertyName, string propertyTypeName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.NewProperty(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NewProperty (path As String, propertyName As String, propertyTypeName As String, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member NewProperty : string * string * string * obj -&gt; unit" Usage="iDynamicPropertyCmdletProvider.NewProperty (path, propertyName, propertyTypeName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyTypeName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item on which the new property should be created.
             </param>
        <param name="propertyName">
             The name of the property that should be created.
             </param>
        <param name="propertyTypeName">
             The type of the property that should be created.
             </param>
        <param name="value">
             The new value of the property that should be created.
             </param>
        <summary>
             Creates a new property on the specified item.
             </summary>
        <returns>
             Nothing.  The new property that was created should be passed to the WritePropertyObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to add properties to provider objects
             using the new-itemproperty cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not create new properties on objects that are generally hidden from
             the user unless the Force property is set to true. An error should be sent to the WriteError method if
             the path represents an item that is hidden from the user and Force is set to false.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewPropertyDynamicParameters">
      <MemberSignature Language="C#" Value="public object NewPropertyDynamicParameters (string path, string propertyName, string propertyTypeName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object NewPropertyDynamicParameters(string path, string propertyName, string propertyTypeName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.NewPropertyDynamicParameters(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NewPropertyDynamicParameters (path As String, propertyName As String, propertyTypeName As String, value As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member NewPropertyDynamicParameters : string * string * string * obj -&gt; obj" Usage="iDynamicPropertyCmdletProvider.NewPropertyDynamicParameters (path, propertyName, propertyTypeName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyTypeName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="propertyName">
             The name of the property that should be created.
             </param>
        <param name="propertyTypeName">
             The type of the property that should be created.
             </param>
        <param name="value">
             The new value of the property that should be created.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to the
             new-itemproperty cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public void RemoveProperty (string path, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveProperty(string path, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.RemoveProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveProperty (path As String, propertyName As String)" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : string * string -&gt; unit" Usage="iDynamicPropertyCmdletProvider.RemoveProperty (path, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item on which the property should be removed.
             </param>
        <param name="propertyName">
             The name of the property to be removed.
             </param>
        <summary>
             Removes a property on the item specified by the path.
             </summary>
        <returns>
             Nothing.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to remove properties from provider objects
             using the remove-itemproperty cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not remove properties on objects that are generally hidden from
             the user unless the Force property is set to true. An error should be sent to the WriteError method if
             the path represents an item that is hidden from the user and Force is set to false.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyDynamicParameters">
      <MemberSignature Language="C#" Value="public object RemovePropertyDynamicParameters (string path, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemovePropertyDynamicParameters(string path, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.RemovePropertyDynamicParameters(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemovePropertyDynamicParameters (path As String, propertyName As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member RemovePropertyDynamicParameters : string * string -&gt; obj" Usage="iDynamicPropertyCmdletProvider.RemovePropertyDynamicParameters (path, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="propertyName">
             The name of the property that should be removed.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to the
             remove-itemproperty cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameProperty">
      <MemberSignature Language="C#" Value="public void RenameProperty (string path, string sourceProperty, string destinationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenameProperty(string path, string sourceProperty, string destinationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.RenameProperty(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameProperty (path As String, sourceProperty As String, destinationProperty As String)" />
      <MemberSignature Language="F#" Value="abstract member RenameProperty : string * string * string -&gt; unit" Usage="iDynamicPropertyCmdletProvider.RenameProperty (path, sourceProperty, destinationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="sourceProperty" Type="System.String" />
        <Parameter Name="destinationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item on which to rename the property.
             </param>
        <param name="sourceProperty">
             The property to rename.
             </param>
        <param name="destinationProperty">
             The new name of the property.
             </param>
        <summary>
             Renames a property of the item at the specified path
             </summary>
        <returns>
             Nothing.  The new property that was renamed should be passed to the WritePropertyObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to rename properties of provider objects
             using the rename-itemproperty cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not rename properties on objects that are generally hidden from
             the user unless the Force property is set to true. An error should be sent to the WriteError method if
             the path represents an item that is hidden from the user and Force is set to false.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenamePropertyDynamicParameters">
      <MemberSignature Language="C#" Value="public object RenamePropertyDynamicParameters (string path, string sourceProperty, string destinationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RenamePropertyDynamicParameters(string path, string sourceProperty, string destinationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IDynamicPropertyCmdletProvider.RenamePropertyDynamicParameters(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RenamePropertyDynamicParameters (path As String, sourceProperty As String, destinationProperty As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member RenamePropertyDynamicParameters : string * string * string -&gt; obj" Usage="iDynamicPropertyCmdletProvider.RenamePropertyDynamicParameters (path, sourceProperty, destinationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="sourceProperty" Type="System.String" />
        <Parameter Name="destinationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="sourceProperty">
             The property to rename.
             </param>
        <param name="destinationProperty">
             The new name of the property.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to the
             rename-itemproperty cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>