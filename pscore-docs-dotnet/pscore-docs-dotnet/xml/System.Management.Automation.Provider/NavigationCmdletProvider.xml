<Type Name="NavigationCmdletProvider" FullName="System.Management.Automation.Provider.NavigationCmdletProvider">
  <TypeSignature Language="C#" Value="public abstract class NavigationCmdletProvider : System.Management.Automation.Provider.ContainerCmdletProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit NavigationCmdletProvider extends System.Management.Automation.Provider.ContainerCmdletProvider" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Provider.NavigationCmdletProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class NavigationCmdletProvider&#xA;Inherits ContainerCmdletProvider" />
  <TypeSignature Language="F#" Value="type NavigationCmdletProvider = class&#xA;    inherit ContainerCmdletProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Provider.ContainerCmdletProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The base class for a Cmdlet provider that expose a hierarchy of items and containers.
             </summary>
    <remarks>
             The NavigationCmdletProvider class is a base class that provider can derive from
             to implement a set of methods that allow
             the use of a set of core commands against the data store that the provider
             gives access to. By implementing this interface users can take advantage
             the recursive commands, nested containers, and relative paths.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NavigationCmdletProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildName">
      <MemberSignature Language="C#" Value="protected virtual string GetChildName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetChildName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.GetChildName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetChildName (path As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GetChildName : string -&gt; string&#xA;override this.GetChildName : string -&gt; string" Usage="navigationCmdletProvider.GetChildName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The fully qualified path to the item
             </param>
        <summary>
             Gets the name of the leaf element in the specified path.
             </summary>
        <returns>
             The leaf element in the path.
             </returns>
        <remarks>
             This should be implemented as a split on the path separator. The characters
             in the fullPath may not be legal characters in the namespace but may be
             used in globing or regular expression matching. The provider should not error
             unless there are no path separators in the fully qualified path.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="protected virtual string GetParentPath (string path, string root);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetParentPath(string path, string root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.GetParentPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetParentPath (path As String, root As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GetParentPath : string * string -&gt; string&#xA;override this.GetParentPath : string * string -&gt; string" Usage="navigationCmdletProvider.GetParentPath (path, root)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="root" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             A fully qualified provider specific path to an item. The item may or
             may not exist.
             </param>
        <param name="root">
             The fully qualified path to the root of a drive. This parameter may be null
             or empty if a mounted drive is not in use for this operation. If this parameter
             is not null or empty the result of the method should not be a path to a container
             that is a parent or in a different tree than the root.
             </param>
        <summary>
             Removes the child segment of a path and returns the remaining parent
             portion.
             </summary>
        <returns>
             The path of the parent of the path parameter.
             </returns>
        <remarks>
             This should be a lexical splitting of the path on the path separator character
             for the provider namespace. For example, the file system provider should look
             for the last "\" and return everything to the left of the "\".
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemContainer">
      <MemberSignature Language="C#" Value="protected virtual bool IsItemContainer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsItemContainer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.IsItemContainer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsItemContainer (path As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsItemContainer : string -&gt; bool&#xA;override this.IsItemContainer : string -&gt; bool" Usage="navigationCmdletProvider.IsItemContainer path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item to determine if it is a container.
             </param>
        <summary>
             Determines if the item specified by the path is a container.
             </summary>
        <returns>
             true if the item specified by path is a container, false otherwise.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to check
             to see if a provider object is a container using the test-path -container cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path passed meets those
             requirements by accessing the appropriate property from the base class.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakePath">
      <MemberSignature Language="C#" Value="protected virtual string MakePath (string parent, string child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string MakePath(string parent, string child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.MakePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MakePath (parent As String, child As String) As String" />
      <MemberSignature Language="F#" Value="abstract member MakePath : string * string -&gt; string&#xA;override this.MakePath : string * string -&gt; string" Usage="navigationCmdletProvider.MakePath (parent, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.String" />
        <Parameter Name="child" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent">
             The parent segment of a path to be joined with the child.
             </param>
        <param name="child">
             The child segment of a path to be joined with the parent.
             </param>
        <summary>
             Joins two strings with a path a provider specific path separator.
             </summary>
        <returns>
             A string that represents the parent and child segments of the path
             joined by a path separator.
             </returns>
        <remarks>
             This method should use lexical joining of two path segments with a path
             separator character. It should not validate the path as a legal fully
             qualified path in the provider namespace as each parameter could be only
             partial segments of a path and joined they may not generate a fully
             qualified path.
             Example: the file system provider may get "windows\system32" as the parent
             parameter and "foo.dll" as the child parameter. The method should join these
             with the "\" separator and return "windows\system32\foo.dll". Note that
             the returned path is not a fully qualified file system path.
            
             Also beware that the path segments may contain characters that are illegal
             in the provider namespace. These characters are most likely being used
             for globbing and should not be removed by the implementation of this method.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakePath">
      <MemberSignature Language="C#" Value="protected string MakePath (string parent, string child, bool childIsLeaf);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string MakePath(string parent, string child, bool childIsLeaf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.MakePath(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function MakePath (parent As String, child As String, childIsLeaf As Boolean) As String" />
      <MemberSignature Language="F#" Value="member this.MakePath : string * string * bool -&gt; string" Usage="navigationCmdletProvider.MakePath (parent, child, childIsLeaf)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.String" />
        <Parameter Name="child" Type="System.String" />
        <Parameter Name="childIsLeaf" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parent">
             The parent segment of a path to be joined with the child.
             </param>
        <param name="child">
             The child segment of a path to be joined with the parent.
             </param>
        <param name="childIsLeaf">
             Indicate that the <paramref name="child" /> is the name of a child item that's guaranteed to exist
             </param>
        <summary>
             Joins two strings with a path a provider specific path separator.
             </summary>
        <returns />
        <remarks>
             If the <paramref name="childIsLeaf" /> is True, then we don't normalize the child path, and would do
             some checks to decide whether to normalize the parent path.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItem">
      <MemberSignature Language="C#" Value="protected virtual void MoveItem (string path, string destination);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MoveItem(string path, string destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.MoveItem(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub MoveItem (path As String, destination As String)" />
      <MemberSignature Language="F#" Value="abstract member MoveItem : string * string -&gt; unit&#xA;override this.MoveItem : string * string -&gt; unit" Usage="navigationCmdletProvider.MoveItem (path, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the item to be moved.
             </param>
        <param name="destination">
             The path of the destination container.
             </param>
        <summary>
             Moves the item specified by path to the specified destination.
             </summary>
        <returns>
             Nothing is returned, but all the objects that were moved should be written to the WriteItemObject method.
             </returns>
        <remarks>
             Providers override this method to give the user the ability to move provider objects using
             the move-item cmdlet.
            
             Providers that declare <see cref="T:System.Management.Automation.Provider.ProviderCapabilities" />
             of ExpandWildcards, Filter, Include, or Exclude should ensure that the path and items being moved
             meets those requirements by accessing the appropriate property from the base class.
            
             By default overrides of this method should not move objects over existing items unless the Force
             property is set to true. For instance, the FileSystem provider should not move c:\temp\foo.txt over
             c:\bar.txt if c:\bar.txt already exists unless the Force parameter is true.
            
             If <paramref name="destination" /> exists and is a container then Force isn't required and <paramref name="path" />
             should be moved into the <paramref name="destination" /> container as a child.
            
             The default implementation of this method throws an <see cref="T:System.Management.Automation.PSNotSupportedException" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItemDynamicParameters">
      <MemberSignature Language="C#" Value="protected virtual object MoveItemDynamicParameters (string path, string destination);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object MoveItemDynamicParameters(string path, string destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.MoveItemDynamicParameters(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MoveItemDynamicParameters (path As String, destination As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member MoveItemDynamicParameters : string * string -&gt; obj&#xA;override this.MoveItemDynamicParameters : string * string -&gt; obj" Usage="navigationCmdletProvider.MoveItemDynamicParameters (path, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             If the path was specified on the command line, this is the path
             to the item to get the dynamic parameters for.
             </param>
        <param name="destination">
             The path of the destination container.
             </param>
        <summary>
             Gives the provider an opportunity to attach additional parameters to
             the move-item cmdlet.
             </summary>
        <returns>
             Overrides of this method should return an object that has properties and fields decorated with
             parsing attributes similar to a cmdlet class or a
             <see cref="T:System.Management.Automation.RuntimeDefinedParameterDictionary" />.
            
             The default implementation returns null. (no additional parameters)
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeRelativePath">
      <MemberSignature Language="C#" Value="protected virtual string NormalizeRelativePath (string path, string basePath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string NormalizeRelativePath(string path, string basePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.NavigationCmdletProvider.NormalizeRelativePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NormalizeRelativePath (path As String, basePath As String) As String" />
      <MemberSignature Language="F#" Value="abstract member NormalizeRelativePath : string * string -&gt; string&#xA;override this.NormalizeRelativePath : string * string -&gt; string" Usage="navigationCmdletProvider.NormalizeRelativePath (path, basePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="basePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
             A fully qualified provider specific path to an item. The item should exist
             or the provider should write out an error.
             </param>
        <param name="basePath">
             The path that the return value should be relative to.
             </param>
        <summary>
             Normalizes the path that was passed in and returns the normalized path
             as a relative path to the basePath that was passed.
             </summary>
        <returns>
             A normalized path that is relative to the basePath that was passed. The
             provider should parse the path parameter, normalize the path, and then
             return the normalized path relative to the basePath.
             </returns>
        <remarks>
             This method does not have to be purely syntactical parsing of the path. It
             is encouraged that the provider actually use the path to lookup in its store
             and create a relative path that matches the casing, and standardized path syntax.
            
             Note, the base class implementation uses GetParentPath, GetChildName, and MakePath
             to normalize the path and then make it relative to basePath. All string comparisons
             are done using StringComparison.InvariantCultureIgnoreCase.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>