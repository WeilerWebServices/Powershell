<Type Name="IContentReader" FullName="System.Management.Automation.Provider.IContentReader">
  <TypeSignature Language="C#" Value="public interface IContentReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContentReader implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Provider.IContentReader" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContentReader&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type IContentReader = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             A Cmdlet provider that implements the IContentCmdletProvider interface must provide an
             object that implements this interface when GetContentReader() is called.
            
             The interface allows for reading content from an item.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IContentReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="iContentReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Closes the reader. Further reads should fail if the reader
             has been closed.
             </summary>
        <remarks>
             The implementation of this method should close any resources held open by the
             reader.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public System.Collections.IList Read (long readCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList Read(int64 readCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IContentReader.Read(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (readCount As Long) As IList" />
      <MemberSignature Language="F#" Value="abstract member Read : int64 -&gt; System.Collections.IList" Usage="iContentReader.Read readCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readCount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="readCount">
             The number of "blocks" of data to be read from the item.
             </param>
        <summary>
             Reads the content from the item.
             </summary>
        <returns>
             An array of the blocks of data read from the item.
             </returns>
        <remarks>
             A "block" of content is provider specific.  For the file system
             a "block" may be considered a line of text, a byte, a character, or delimited string.
            
             The implementation of this method should break the content down into meaningful blocks
             that the user may want to manipulate individually. The number of blocks to return is
             indicated by the <paramref name="readCount" /> parameter.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Provider.IContentReader.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As Long, origin As SeekOrigin)" />
      <MemberSignature Language="F#" Value="abstract member Seek : int64 * System.IO.SeekOrigin -&gt; unit" Usage="iContentReader.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">
             An offset of the number of blocks to seek from the origin.
             </param>
        <param name="origin">
             The place in the stream to start the seek from.
             </param>
        <summary>
             Moves the current "block" to be read to a position relative to a place
             in the reader.
             </summary>
        <remarks>
             The implementation of this method moves the content reader <paramref name="offset" />
             number of blocks from the specified <paramref name="origin" />. See <see cref="M:System.Management.Automation.Provider.IContentReader.Read(System.Int64)" />
             for a description of what a block is.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>