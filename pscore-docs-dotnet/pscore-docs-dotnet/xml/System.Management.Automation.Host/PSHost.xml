<Type Name="PSHost" FullName="System.Management.Automation.Host.PSHost">
  <TypeSignature Language="C#" Value="public abstract class PSHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PSHost extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Host.PSHost" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PSHost" />
  <TypeSignature Language="F#" Value="type PSHost = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            
             Defines the properties and facilities providing by an application hosting an MSH <see cref="T:System.Management.Automation.Runspaces.Runspace" />.
            
             </summary>
    <remarks>
            
             A hosting application derives from this class and
             overrides the abstract methods and properties.  The hosting application creates an instance of its derived class and
             passes it to the <see cref="T:System.Management.Automation.Runspaces.RunspaceFactory" /> CreateRunspace method.
            
             From the moment that the instance of the derived class (the "host class") is passed to CreateRunspace, the MSH runtime
             can call any of the methods of that class.  The instance must not be destroyed until after the Runspace is closed.
            
             There is a 1:1 relationship between the instance of the host class and the Runspace instance to which it is passed.  In
             other words, it is not legal to pass the same instance of the host class to more than one call to CreateRunspace.  (It
             is perfectly legal to call CreateRunspace more than once, as long as each call is supplied a unique instance of the host
             class.)
            
             Methods of the host class can be called by the Runspace or any cmdlet or script executed in that Runspace in any order
             and from any thread.  It is the responsibility of the hosting application to define the host class methods in a
             threadsafe fashion.  An implementation of the host class should not depend on method execution order.
            
             The instance of the host class that is passed to a Runspace is exposed by the Runspace to the cmdlets, scripts, and
             providers that are executed in that Runspace.  Scripts access the host class via the $Host built-in variable.  Cmdlets
             access the host via the Host property of the Cmdlet base class.
            
             </remarks>
    <altmember cref="T:System.Management.Automation.Runspaces.Runspace" />
    <altmember cref="T:System.Management.Automation.Host.PSHostUserInterface" />
    <altmember cref="T:System.Management.Automation.Host.PSHostRawUserInterface" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PSHost ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Host.PSHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            
             Protected constructor which does nothing.  Provided per .Net design guidelines section 4.3.1
            
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.CultureInfo CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo" Usage="System.Management.Automation.Host.PSHost.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Gets the host's culture: the culture that the runspace should use to set the CurrentCulture on new threads
            
             </summary>
        <value>
            
             A CultureInfo object representing the host's current culture.  Returning null is not allowed.
            
             </value>
        <remarks>
            
             The runspace will set the thread current culture to this value each time it starts a pipeline. Thus, cmdlets are
             encouraged to use Thread.CurrentThread.CurrentCulture.
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.CultureInfo CurrentUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo" Usage="System.Management.Automation.Host.PSHost.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Gets the host's UI culture: the culture that the runspace and cmdlets should use to do resource loading.
            
             The runspace will set the thread current ui culture to this value each time it starts a pipeline.
            
             </summary>
        <value>
            
             A CultureInfo object representing the host's current UI culture.  Returning null is not allowed.
            
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebuggerEnabled">
      <MemberSignature Language="C#" Value="public virtual bool DebuggerEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DebuggerEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.DebuggerEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DebuggerEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.DebuggerEnabled : bool with get, set" Usage="System.Management.Automation.Host.PSHost.DebuggerEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This property enables and disables the host debugger if debugging is supported.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterNestedPrompt">
      <MemberSignature Language="C#" Value="public abstract void EnterNestedPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterNestedPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Host.PSHost.EnterNestedPrompt" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub EnterNestedPrompt ()" />
      <MemberSignature Language="F#" Value="abstract member EnterNestedPrompt : unit -&gt; unit" Usage="pSHost.EnterNestedPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            
             Instructs the host to interrupt the currently running pipeline and start a new, "nested" input loop, where an input
             loop is the cycle of prompt, input, execute.
            
             </summary>
        <remarks>
            
             Typically called by the engine in response to some user action that suspends the currently executing pipeline, such
             as choosing the "suspend" option of a ConfirmProcessing call. Before calling this method, the engine should set
             various shell variables to the express the state of the interrupted input loop (current pipeline, current object in
             pipeline, depth of nested input loops, etc.)
            
             A non-interactive host may throw a "not implemented" exception here.
            
             If the UI property returns null, the engine should not call this method.
            
            
             <!--Was: ExecuteSubShell.  "subshell" implies a new child engine, which is not the case here.  This is called during the
             interruption of a pipeline to allow nested pipeline(s) to be run as a way to the user to suspend execution while he
             evaluates other commands.  It does not create a truly new engine instance with new session state.--></remarks>
        <altmember cref="M:System.Management.Automation.Host.PSHost.ExitNestedPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ExitNestedPrompt">
      <MemberSignature Language="C#" Value="public abstract void ExitNestedPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitNestedPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Host.PSHost.ExitNestedPrompt" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ExitNestedPrompt ()" />
      <MemberSignature Language="F#" Value="abstract member ExitNestedPrompt : unit -&gt; unit" Usage="pSHost.ExitNestedPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            
             Causes the host to end the currently running input loop.  If the input loop was created by a prior call to
             EnterNestedPrompt, the enclosing pipeline will be resumed.  If the current input loop is the top-most loop, then the
             host will act as though SetShouldExit was called.
            
             </summary>
        <remarks>
            
             Typically called by the engine in response to some user action that resumes a suspended pipeline, such as with the
             'continue-command' intrinsic cmdlet. Before calling this method, the engine should clear out the loop-specific
             variables that were set when the loop was created.
            
             If the UI Property returns a null, the engine should not call this method.
            
             </remarks>
        <altmember cref="M:System.Management.Automation.Host.PSHost.EnterNestedPrompt" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public abstract Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="F#" Value="member this.InstanceId : Guid" Usage="System.Management.Automation.Host.PSHost.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Gets a GUID that uniquely identifies this instance of the host.  The value should remain invariant for the lifetime of
             this instance.
            
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Management.Automation.Host.PSHost.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Gets the hosting application's identification in some user-friendly fashion. This name can be referenced by scripts and cmdlets
             to identify the host that is executing them.  The format of the value is not defined, but a short, simple string is
             recommended.
            
             </summary>
        <value>
            
             The name identifier of the hosting application.
            
             </value>
        <remarks>
             In implementing this member, you should return some sort of informative string describing the nature
             your hosting application. For the default console host shipped by Microsoft this is ConsoleHost.
             </remarks>
        <example>
          <MSH>
                     if ($Host.Name -ieq "ConsoleHost") { write-host "I'm running in the Console Host" }
                 </MSH>
        </example>
      </Docs>
    </Member>
    <Member MemberName="NotifyBeginApplication">
      <MemberSignature Language="C#" Value="public abstract void NotifyBeginApplication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyBeginApplication() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Host.PSHost.NotifyBeginApplication" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub NotifyBeginApplication ()" />
      <MemberSignature Language="F#" Value="abstract member NotifyBeginApplication : unit -&gt; unit" Usage="pSHost.NotifyBeginApplication " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            
             Called by the engine to notify the host that it is about to execute a "legacy" command line application.  A legacy
             application is defined as a console-mode executable that may do one or more of the following:
             . reads from stdin
             . writes to stdout
             . writes to stderr
             . uses any of the win32 console APIs
            
             </summary>
        <remarks>
            
             Notifying the host allows the host to do such things as save off any state that might need to be restored when the
             legacy application terminates, set or remove break handler hooks, redirect stream handles, and so forth.
            
             The engine will always call this method and the NotifyEndApplication method in matching pairs.
            
             The engine may call this method several times in the course of a single pipeline.  For instance, the pipeline:
            
             foo.exe | bar-cmdlet | baz.exe
            
             Will result in a sequence of calls similar to the following:
             NotifyBeginApplication - called once when foo.exe is started
             NotifyBeginApplication - called once when baz.exe is started
             NotifyEndApplication - called once when baz.exe terminates
             NotifyEndApplication - called once when foo.exe terminates
            
             Note that the order in which the NotifyEndApplication call follows the corresponding call to NotifyBeginApplication
             with respect to any other call to NotifyBeginApplication is not defined, and should not be depended upon.  In other
             words, NotifyBeginApplication may be called several times before NotifyEndApplication is called.  The only thing
             that is guaranteed is that there will be an equal number of calls to NotifyEndApplication as to
             NotifyBeginApplication.
            
             </remarks>
        <altmember cref="M:System.Management.Automation.Host.PSHost.NotifyEndApplication" />
      </Docs>
    </Member>
    <Member MemberName="NotifyEndApplication">
      <MemberSignature Language="C#" Value="public abstract void NotifyEndApplication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyEndApplication() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Host.PSHost.NotifyEndApplication" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub NotifyEndApplication ()" />
      <MemberSignature Language="F#" Value="abstract member NotifyEndApplication : unit -&gt; unit" Usage="pSHost.NotifyEndApplication " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            
             Called by the engine to notify the host that the execution of a legacy command has completed.
            
             </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Management.Automation.Host.PSHost.NotifyBeginApplication" />
      </Docs>
    </Member>
    <Member MemberName="PrivateData">
      <MemberSignature Language="C#" Value="public virtual System.Management.Automation.PSObject PrivateData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.PSObject PrivateData" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.PrivateData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PrivateData As PSObject" />
      <MemberSignature Language="F#" Value="member this.PrivateData : System.Management.Automation.PSObject" Usage="System.Management.Automation.Host.PSHost.PrivateData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Used to allow the host to pass private data through a Runspace to cmdlets running inside that Runspace's
             runspace.  The type and nature of that data is entirely defined by the host, but there are some caveats:
            
            
             </summary>
        <value>
            
             The default implementation returns null.
            
             </value>
        <remarks>
            
             If the host is using an out-of-process Runspace, then the value of this property is serialized when crossing
             that process boundary in the same fashion as any object in a pipeline is serialized when crossing process boundaries.
             In this case, the BaseObject property of the value will be null.
            
             If the host is using an in-process Runspace, then the BaseObject property can be a non-null value a live object.
             No guarantees are made as to the app domain or thread that the BaseObject is accessed if it is accessed in the
             runspace. No guarantees of threadsafety or reentrancy are made.  The object set in the BaseObject property of
             the value returned by this method is responsible for ensuring its own threadsafety and re-entrance safety.
             Note that thread(s) accessing that object may not necessarily be the same from one access to the next.
            
             The return value should have value-semantics: that is, changes to the state of the instance returned are not
             reflected across processes.  Ex: if a cmdlet reads this property, then changes the state of the result, that
             change will not be visible to the host if the host is in another process.  Therefore, the implementation of
             get for this property should always return a unique instance.
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShouldExit">
      <MemberSignature Language="C#" Value="public abstract void SetShouldExit (int exitCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShouldExit(int32 exitCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Host.PSHost.SetShouldExit(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetShouldExit (exitCode As Integer)" />
      <MemberSignature Language="F#" Value="abstract member SetShouldExit : int -&gt; unit" Usage="pSHost.SetShouldExit exitCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exitCode">
            
             The exit code accompanying the exit keyword. Typically, after exiting a runspace, a host will also terminate. The
             exitCode parameter can be used to set the host's process exit code.
            
             </param>
        <summary>
            
             Request by the engine to end the current engine runspace (to shut down and terminate the host's root runspace).
            
             </summary>
        <remarks>
            
             This method is called by the engine to request the host shutdown the engine.  This is invoked by the exit keyword
             or by any other facility by which a runspace instance wishes to be shut down.
            
             To honor this request, the host should stop accepting and submitting commands to the engine and close the runspace.
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UI">
      <MemberSignature Language="C#" Value="public abstract System.Management.Automation.Host.PSHostUserInterface UI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Host.PSHostUserInterface UI" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.UI" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UI As PSHostUserInterface" />
      <MemberSignature Language="F#" Value="member this.UI : System.Management.Automation.Host.PSHostUserInterface" Usage="System.Management.Automation.Host.PSHost.UI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Host.PSHostUserInterface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Gets the hosting application's implementation of the
             <see cref="T:System.Management.Automation.Host.PSHostUserInterface" /> abstract base class. A host
             that does not want to support user interaction should return null.
            
             </summary>
        <value>
            
             A reference to an instance of the hosting application's implementation of a class derived from
             <see cref="T:System.Management.Automation.Host.PSHostUserInterface" />, or null to indicate that user
             interaction is not supported.
            
             </value>
        <remarks>
             The implementation of this routine should return an instance of the appropriate
             implementation of PSHostUserInterface for this application. As an alternative,
             for simple scenarios, just returning null is sufficient.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public abstract Version Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version Version" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Host.PSHost.Version" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Version As Version" />
      <MemberSignature Language="F#" Value="member this.Version : Version" Usage="System.Management.Automation.Host.PSHost.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            
             Gets the version of the hosting application.  This value should remain invariant for a particular build of the
             host.  This value may be referenced by scripts and cmdlets.
            
             </summary>
        <value>
            
             The version number of the hosting application.
            
             </value>
        <remarks>
             When implementing this member, it should return the product version number for the product
             that is hosting the Monad engine.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>