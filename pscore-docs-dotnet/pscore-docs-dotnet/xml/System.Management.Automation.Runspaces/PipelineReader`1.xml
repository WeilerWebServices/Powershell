<Type Name="PipelineReader&lt;T&gt;" FullName="System.Management.Automation.Runspaces.PipelineReader&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class PipelineReader&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PipelineReader`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Runspaces.PipelineReader`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PipelineReader(Of T)" />
  <TypeSignature Language="F#" Value="type PipelineReader&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            PipelineReader provides asynchronous access to the stream of objects emitted by
            a <see cref="T:System.Management.Automation.Runspaces.Pipeline" />.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="P:System.Management.Automation.Runspaces.Pipeline.Output" />
    <altmember cref="P:System.Management.Automation.Runspaces.Pipeline.Error" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PipelineReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.Close" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="pipelineReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Close the stream
            </summary>
        <remarks>
            Causes subsequent calls to IsOpen to return false and calls to
            a write operation to throw an PipelineClosedException.
            All calls to Close() after the first call are silently ignored.
            </remarks>
        <exception cref="T:System.Management.Automation.PipelineClosedException">
            The stream is already disposed
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public abstract int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineReader`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Management.Automation.Runspaces.PipelineReader&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the number of objects currently available in the underlying stream
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReady">
      <MemberSignature Language="C#" Value="public abstract event EventHandler DataReady;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataReady" />
      <MemberSignature Language="DocId" Value="E:System.Management.Automation.Runspaces.PipelineReader`1.DataReady" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Event DataReady As EventHandler " />
      <MemberSignature Language="F#" Value="member this.DataReady : EventHandler " Usage="member this.DataReady : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Event fired when data is added to the buffer
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfPipeline">
      <MemberSignature Language="C#" Value="public abstract bool EndOfPipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfPipeline" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineReader`1.EndOfPipeline" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EndOfPipeline As Boolean" />
      <MemberSignature Language="F#" Value="member this.EndOfPipeline : bool" Usage="System.Management.Automation.Runspaces.PipelineReader&lt;'T&gt;.EndOfPipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Check if the stream is closed and contains no data.
            </summary>
        <value>True if the stream is closed and contains no data, otherwise false</value>
        <remarks>
            Attempting to read from the underlying stream if EndOfPipeline is true returns
            zero objects.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public abstract bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineReader`1.IsOpen" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsOpen As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsOpen : bool" Usage="System.Management.Automation.Runspaces.PipelineReader&lt;'T&gt;.IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Check if the stream is open for further writes.
            </summary>
        <value>true if the underlying stream is open, otherwise false</value>
        <remarks>
            The underlying stream may be readable after it is closed if data remains in the
            internal buffer. Check <see cref="P:System.Management.Automation.Runspaces.PipelineReader`1.EndOfPipeline" /> to determine if
            the underlying stream is closed and contains no data.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCapacity">
      <MemberSignature Language="C#" Value="public abstract int MaxCapacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxCapacity" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineReader`1.MaxCapacity" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MaxCapacity As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxCapacity : int" Usage="System.Management.Automation.Runspaces.PipelineReader&lt;'T&gt;.MaxCapacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the capacity of the stream
            </summary>
        <value>
            The capacity of the stream.
            </value>
        <remarks>
            The capacity is the number of objects that stream may contain at one time.  Once this
            limit is reached, attempts to write into the stream block until buffer space
            becomes available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonBlockingRead">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.Collection&lt;T&gt; NonBlockingRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;!T&gt; NonBlockingRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.NonBlockingRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NonBlockingRead () As Collection(Of T)" />
      <MemberSignature Language="F#" Value="abstract member NonBlockingRead : unit -&gt; System.Collections.ObjectModel.Collection&lt;'T&gt;" Usage="pipelineReader.NonBlockingRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reads all objects currently in the stream, but does not block.
            </summary>
        <returns>A collection of zero or more objects.</returns>
        <remarks>
            This method performs a read of all objects currently in the
            stream.  If there are no objects in the stream,
            an empty collection is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonBlockingRead">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.Collection&lt;T&gt; NonBlockingRead (int maxRequested);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;!T&gt; NonBlockingRead(int32 maxRequested) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.NonBlockingRead(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NonBlockingRead (maxRequested As Integer) As Collection(Of T)" />
      <MemberSignature Language="F#" Value="abstract member NonBlockingRead : int -&gt; System.Collections.ObjectModel.Collection&lt;'T&gt;" Usage="pipelineReader.NonBlockingRead maxRequested" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxRequested" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxRequested">
            Return no more than maxRequested objects.
            </param>
        <summary>
            Reads objects currently in the stream, but does not block.
            </summary>
        <returns>A collection of zero or more objects.</returns>
        <remarks>
            This method performs a read of objects currently in the
            stream.  If there are no objects in the stream,
            an empty collection is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public abstract T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Peek () As T" />
      <MemberSignature Language="F#" Value="abstract member Peek : unit -&gt; 'T" Usage="pipelineReader.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Peek the next object, but do not remove it from the stream.  Non-blocking.
            </summary>
        <returns>
            The next object in the stream or AutomationNull.Value if the stream is empty
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PipelineClosedException">The stream is closed</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract T Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As T" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; 'T" Usage="pipelineReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Read a single object from the stream
            </summary>
        <returns>the next object in the stream</returns>
        <remarks>This method blocks if the stream is empty</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.Collection&lt;T&gt; Read (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;!T&gt; Read(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.Read(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (count As Integer) As Collection(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Read : int -&gt; System.Collections.ObjectModel.Collection&lt;'T&gt;" Usage="pipelineReader.Read count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The maximum number of objects to read</param>
        <summary>
            Read at most <paramref name="count" /> objects
            </summary>
        <returns>The objects read</returns>
        <remarks>
            This method blocks if the number of objects in the stream is less than <paramref name="count" />
            and the stream is not closed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.Collection&lt;T&gt; ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;!T&gt; ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineReader`1.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadToEnd () As Collection(Of T)" />
      <MemberSignature Language="F#" Value="abstract member ReadToEnd : unit -&gt; System.Collections.ObjectModel.Collection&lt;'T&gt;" Usage="pipelineReader.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Blocks until the pipeline closes and reads all objects.
            </summary>
        <returns>A collection of zero or more objects.</returns>
        <remarks>
            If the stream is empty, an empty collection is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public abstract System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineReader`1.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Management.Automation.Runspaces.PipelineReader&lt;'T&gt;.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Signaled when data is available
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>