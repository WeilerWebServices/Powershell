<Type Name="InitialSessionStateEntryCollection&lt;T&gt;" FullName="System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class InitialSessionStateEntryCollection&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt; where T : InitialSessionStateEntry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InitialSessionStateEntryCollection`1&lt;(class System.Management.Automation.Runspaces.InitialSessionStateEntry) T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InitialSessionStateEntryCollection(Of T)&#xA;Implements IEnumerable(Of T)" />
  <TypeSignature Language="F#" Value="type InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; InitialSessionStateEntry)&gt; = class&#xA;    interface seq&lt;'T (requires 'T :&gt; InitialSessionStateEntry)&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <BaseTypeName>System.Management.Automation.Runspaces.InitialSessionStateEntry</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"></typeparam>
    <summary />
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InitialSessionStateEntryCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Create an empty collection...
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InitialSessionStateEntryCollection (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As IEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt; : seq&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt; -&gt; System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt;" Usage="new System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt; items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"></param>
        <summary>
            Create an new collection, copying in the passed items...
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Add(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (items As IEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="member this.Add : seq&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt; -&gt; unit" Usage="initialSessionStateEntryCollection.Add items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"></param>
        <summary>
            Add items to this collection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; unit" Usage="initialSessionStateEntryCollection.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">The item to add...</param>
        <summary>
            Add an item to this collection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="initialSessionStateEntryCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the collection...
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;T&gt; Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1&lt;!T&gt; Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As InitialSessionStateEntryCollection(Of T)" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt;" Usage="initialSessionStateEntryCollection.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clone this collection
            </summary>
        <returns>The cloned object</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a count of the number of items in the collection...
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"></param>
        <summary />
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;T&gt; this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;!T&gt; Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(name As String) As Collection(Of T)" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Collections.ObjectModel.Collection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt;" Usage="System.Management.Automation.Runspaces.InitialSessionStateEntryCollection&lt;'T (requires 'T :&gt; System.Management.Automation.Runspaces.InitialSessionStateEntry)&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"></param>
        <summary>
            To find the entries based on name.
            Why collection - Different SnapIn/modules and same entity names.
            If used on command collection entry, then for the same name, one can have multiple output
            </summary>
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name, object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name, object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Remove(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String, type As Object)" />
      <MemberSignature Language="F#" Value="member this.Remove : string * obj -&gt; unit" Usage="initialSessionStateEntryCollection.Remove (name, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the element to remove</param>
        <param name="type">The type of object to remove, can be null to remove any type.</param>
        <summary>
            This overload exists so that we can remove items based on the item name, rather than
            its position in the collection. The type argument can be null but we'll throw an error if
            we can't distinguish between multiple entries of the same name but different types
            and the type hasn't been specified.
            BUGBUG - brucepay - the throw thing is not implemented yet...
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="public void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="F#" Value="member this.RemoveItem : int -&gt; unit" Usage="initialSessionStateEntryCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"></param>
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="public void RemoveItem (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveItem(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.RemoveItem(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveItem (index As Integer, count As Integer)" />
      <MemberSignature Language="F#" Value="member this.RemoveItem : int * int -&gt; unit" Usage="initialSessionStateEntryCollection.RemoveItem (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"></param>
        <param name="count"></param>
        <summary>
            Remove a number of items starting at the specified index.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="initialSessionStateEntryCollection.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reset the collection
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Get enumerator for this collection.
             </summary>
        <returns />
        <remarks>To be added.</remarks>
        <!--
             Enumerator work is not thread safe by default. Any code trying
             to do enumeration on this collection should lock it first.
            
             Need to document this.
             -->
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Get enumerator for this collection.
             </summary>
        <returns />
        <remarks>To be added.</remarks>
        <!--
             Enumerator work is not thread safe by default. Any code trying
             to do enumeration on this collection should lock it first.
            
             Need to document this.
             -->
      </Docs>
    </Member>
  </Members>
</Type>