<Type Name="PipelineWriter" FullName="System.Management.Automation.Runspaces.PipelineWriter">
  <TypeSignature Language="C#" Value="public abstract class PipelineWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PipelineWriter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Runspaces.PipelineWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PipelineWriter" />
  <TypeSignature Language="F#" Value="type PipelineWriter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            PipelineWriter allows the caller to provide an asynchronous stream of objects
            as input to a <see cref="T:System.Management.Automation.Runspaces.Pipeline" />.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="P:System.Management.Automation.Runspaces.Pipeline.Input" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PipelineWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="pipelineWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Close the stream
            </summary>
        <remarks>
            Causes subsequent calls to IsOpen to return false and calls to
            a write operation to throw an ObjectDisposedException.
            All calls to Close() after the first call are silently ignored.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream is already disposed
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public abstract int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineWriter.Count" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Management.Automation.Runspaces.PipelineWriter.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the number of objects currently in the underlying stream
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit" Usage="pipelineWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Flush the buffered data from the stream.  Closed streams may be flushed,
            but disposed streams may not.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream is already disposed
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public abstract bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineWriter.IsOpen" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsOpen As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsOpen : bool" Usage="System.Management.Automation.Runspaces.PipelineWriter.IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Check if the stream is open for further writes.
            </summary>
        <value>true if the underlying stream is open, otherwise false</value>
        <remarks>
            Attempting to write to the underlying stream if IsOpen is false throws
            a <see cref="T:System.Management.Automation.PipelineClosedException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCapacity">
      <MemberSignature Language="C#" Value="public abstract int MaxCapacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxCapacity" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineWriter.MaxCapacity" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MaxCapacity As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxCapacity : int" Usage="System.Management.Automation.Runspaces.PipelineWriter.MaxCapacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the capacity of the stream
            </summary>
        <value>
            The capacity of the stream.
            </value>
        <remarks>
            The capacity is the number of objects that stream may contain at one time.  Once this
            limit is reached, attempts to write into the stream block until buffer space
            becomes available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public abstract System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Runspaces.PipelineWriter.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Management.Automation.Runspaces.PipelineWriter.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Signaled when buffer space is available in the underlying stream.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Write (obj As Object) As Integer" />
      <MemberSignature Language="F#" Value="abstract member Write : obj -&gt; int" Usage="pipelineWriter.Write obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to add to the stream</param>
        <summary>
            Write a single object into the underlying stream
            </summary>
        <returns>
            One, if the write was successful, otherwise;
            zero if the stream was closed before the object could be written,
            or if the object was AutomationNull.Value.
            </returns>
        <remarks>
            AutomationNull.Value is ignored
            </remarks>
        <exception cref="T:System.Management.Automation.PipelineClosedException">
            The underlying stream is already closed
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (object obj, bool enumerateCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(object obj, bool enumerateCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Runspaces.PipelineWriter.Write(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Write (obj As Object, enumerateCollection As Boolean) As Integer" />
      <MemberSignature Language="F#" Value="abstract member Write : obj * bool -&gt; int" Usage="pipelineWriter.Write (obj, enumerateCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="enumerateCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">object or enumeration to read from</param>
        <param name="enumerateCollection">
            If enumerateCollection is true, and <paramref name="obj" />
            is an enumeration according to LanguagePrimitives.GetEnumerable,
            the objects in the enumeration will be unrolled and
            written separately.  Otherwise, <paramref name="obj" />
            will be written as a single object.
            </param>
        <summary>
            Write multiple objects to the underlying stream
            </summary>
        <returns>The number of objects written</returns>
        <remarks>
            If the enumeration contains elements equal to
            AutomationNull.Value, they are are ignored.
            This can cause the return value to be less than the size of
            the collection.
            </remarks>
        <exception cref="T:System.Management.Automation.PipelineClosedException">
            The underlying stream is already closed
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>