<Type Name="ReadOnlyPSMemberInfoCollection&lt;T&gt;" FullName="System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ReadOnlyPSMemberInfoCollection&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt; where T : PSMemberInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReadOnlyPSMemberInfoCollection`1&lt;(class System.Management.Automation.PSMemberInfo) T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ReadOnlyPSMemberInfoCollection(Of T)&#xA;Implements IEnumerable(Of T)" />
  <TypeSignature Language="F#" Value="type ReadOnlyPSMemberInfoCollection&lt;'T (requires 'T :&gt; PSMemberInfo)&gt; = class&#xA;    interface seq&lt;'T (requires 'T :&gt; PSMemberInfo)&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <BaseTypeName>System.Management.Automation.PSMemberInfo</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            Serves as a read only collection of members
            </summary>
    <remarks>
            It is permitted to subclass <see cref="T:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1" />
            but there is no established scenario for doing this, nor has it been tested.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of elements in this collection
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;" Usage="readOnlyPSMemberInfoCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the specific enumerator for this collection.
            </summary>
        <returns>the enumerator for this collection</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">index of the member to retrieve</param>
        <summary>
            Returns the 0 based member identified by index
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">for invalid arguments</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(name As String) As T" />
      <MemberSignature Language="F#" Value="member this.Item(string) : 'T" Usage="System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">name of the member to look for</param>
        <summary>
            Return the member in this collection matching name. If the member does not exist, null is returned.
            </summary>
        <value>the member matching name</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">for invalid arguments</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;T&gt; Match (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.Automation.ReadOnlyPSMemberInfoCollection`1&lt;!T&gt; Match(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.Match(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (name As String) As ReadOnlyPSMemberInfoCollection(Of T)" />
      <MemberSignature Language="F#" Value="member this.Match : string -&gt; System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;" Usage="readOnlyPSMemberInfoCollection.Match name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">name of the members to be return. May contain wildcard characters.</param>
        <summary>
            Returns all members in the collection matching name
            </summary>
        <returns>all members in the collection matching name</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">for invalid arguments</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;T&gt; Match (string name, System.Management.Automation.PSMemberTypes memberTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.Automation.ReadOnlyPSMemberInfoCollection`1&lt;!T&gt; Match(string name, valuetype System.Management.Automation.PSMemberTypes memberTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.Match(System.String,System.Management.Automation.PSMemberTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (name As String, memberTypes As PSMemberTypes) As ReadOnlyPSMemberInfoCollection(Of T)" />
      <MemberSignature Language="F#" Value="member this.Match : string * System.Management.Automation.PSMemberTypes -&gt; System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;'T (requires 'T :&gt; System.Management.Automation.PSMemberInfo)&gt;" Usage="readOnlyPSMemberInfoCollection.Match (name, memberTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.ReadOnlyPSMemberInfoCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="memberTypes" Type="System.Management.Automation.PSMemberTypes" />
      </Parameters>
      <Docs>
        <param name="name">name of the members to be return. May contain wildcard characters.</param>
        <param name="memberTypes">type of the members to be searched.</param>
        <summary>
            Returns all members in the collection matching name and types
            </summary>
        <returns>all members in the collection matching name and types</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">for invalid arguments</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.ReadOnlyPSMemberInfoCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the general enumerator for this collection
            </summary>
        <returns>the enumerator for this collection</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>