<Type Name="PSTokenType" FullName="System.Management.Automation.PSTokenType">
  <TypeSignature Language="C#" Value="public enum PSTokenType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PSTokenType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.PSTokenType" />
  <TypeSignature Language="VB.NET" Value="Public Enum PSTokenType" />
  <TypeSignature Language="F#" Value="type PSTokenType = " />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            PowerShell token types.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="Attribute" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Attribute = int32(9)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Attribute" />
      <MemberSignature Language="VB.NET" Value="Attribute" />
      <MemberSignature Language="F#" Value="Attribute = 9" Usage="System.Management.Automation.PSTokenType.Attribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>9</MemberValue>
      <Docs>
        <summary>
             Attributes
             </summary>
        <remarks>
             For example, Mandatory in
            
                 param([Mandatory] $a)
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="Command" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Command = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Command" />
      <MemberSignature Language="VB.NET" Value="Command" />
      <MemberSignature Language="F#" Value="Command = 1" Usage="System.Management.Automation.PSTokenType.Command" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
             Command
             </summary>
        <remarks>
             For example, 'get-process' in
            
                 get-process -name foo
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="CommandArgument" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType CommandArgument = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.CommandArgument" />
      <MemberSignature Language="VB.NET" Value="CommandArgument" />
      <MemberSignature Language="F#" Value="CommandArgument = 3" Usage="System.Management.Automation.PSTokenType.CommandArgument" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
             Command Argument
             </summary>
        <remarks>
             For example, 'foo' in
            
                 get-process -name foo
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="CommandParameter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType CommandParameter = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="CommandParameter" />
      <MemberSignature Language="F#" Value="CommandParameter = 2" Usage="System.Management.Automation.PSTokenType.CommandParameter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
             Command Parameter
             </summary>
        <remarks>
             For example, '-name' in
            
                 get-process -name foo
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="Comment" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Comment = int32(15)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Comment" />
      <MemberSignature Language="VB.NET" Value="Comment" />
      <MemberSignature Language="F#" Value="Comment = 15" Usage="System.Management.Automation.PSTokenType.Comment" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>15</MemberValue>
      <Docs>
        <summary>
             Comment
             </summary>
        <remarks>
             For example, #here in
            
                 #here
                 if ($a -gt 4)
                 {
                     $a++;
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupEnd">
      <MemberSignature Language="C#" Value="GroupEnd" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType GroupEnd = int32(13)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.GroupEnd" />
      <MemberSignature Language="VB.NET" Value="GroupEnd" />
      <MemberSignature Language="F#" Value="GroupEnd = 13" Usage="System.Management.Automation.PSTokenType.GroupEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>
             Group Ender
             </summary>
        <remarks>
             For example, } in
            
                 if ($a -gt 4)
                 {
                     $a++;
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupStart">
      <MemberSignature Language="C#" Value="GroupStart" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType GroupStart = int32(12)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.GroupStart" />
      <MemberSignature Language="VB.NET" Value="GroupStart" />
      <MemberSignature Language="F#" Value="GroupStart = 12" Usage="System.Management.Automation.PSTokenType.GroupStart" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>12</MemberValue>
      <Docs>
        <summary>
             Group Starter
             </summary>
        <remarks>
             For example, { in
            
                 if ($a -gt 4)
                 {
                     $a++;
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Keyword">
      <MemberSignature Language="C#" Value="Keyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Keyword = int32(14)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Keyword" />
      <MemberSignature Language="VB.NET" Value="Keyword" />
      <MemberSignature Language="F#" Value="Keyword = 14" Usage="System.Management.Automation.PSTokenType.Keyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>14</MemberValue>
      <Docs>
        <summary>
             Keyword
             </summary>
        <remarks>
             For example, if in
            
                 if ($a -gt 4)
                 {
                     $a++;
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineContinuation">
      <MemberSignature Language="C#" Value="LineContinuation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType LineContinuation = int32(18)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.LineContinuation" />
      <MemberSignature Language="VB.NET" Value="LineContinuation" />
      <MemberSignature Language="F#" Value="LineContinuation = 18" Usage="System.Management.Automation.PSTokenType.LineContinuation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>18</MemberValue>
      <Docs>
        <summary>
             Line continuation
             </summary>
        <remarks>
             For example, ` in
            
                 get-command -name `
                 foo
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopLabel">
      <MemberSignature Language="C#" Value="LoopLabel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType LoopLabel = int32(8)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.LoopLabel" />
      <MemberSignature Language="VB.NET" Value="LoopLabel" />
      <MemberSignature Language="F#" Value="LoopLabel = 8" Usage="System.Management.Automation.PSTokenType.LoopLabel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>
             Loop label
             </summary>
        <remarks>
             For example, :loop in
            
                 :loop
                 foreach($a in $b)
                 {
                     $a
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="Member" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Member = int32(7)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Member" />
      <MemberSignature Language="VB.NET" Value="Member" />
      <MemberSignature Language="F#" Value="Member = 7" Usage="System.Management.Automation.PSTokenType.Member" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>
             Property name or method name
             </summary>
        <remarks>
             For example, Name in
            
                 $a.Name
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="NewLine" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType NewLine = int32(17)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.NewLine" />
      <MemberSignature Language="VB.NET" Value="NewLine" />
      <MemberSignature Language="F#" Value="NewLine = 17" Usage="System.Management.Automation.PSTokenType.NewLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>17</MemberValue>
      <Docs>
        <summary>
             New line. This is '\n'
             </summary>
        <remarks>
             For example, \n in
            
                 #here
                 if ($a -gt 4)
                 {
                     $a++;
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="Number" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Number = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Number" />
      <MemberSignature Language="VB.NET" Value="Number" />
      <MemberSignature Language="F#" Value="Number = 4" Usage="System.Management.Automation.PSTokenType.Number" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
             Number
             </summary>
        <remarks>
             For example, 12 in
            
                 $a=12
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="Operator" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Operator = int32(11)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Operator" />
      <MemberSignature Language="VB.NET" Value="Operator" />
      <MemberSignature Language="F#" Value="Operator = 11" Usage="System.Management.Automation.PSTokenType.Operator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>11</MemberValue>
      <Docs>
        <summary>
             Operators
             </summary>
        <remarks>
             For example, + in
            
                 $a = 1 + 2
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="Position" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Position = int32(19)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Position" />
      <MemberSignature Language="VB.NET" Value="Position" />
      <MemberSignature Language="F#" Value="Position = 19" Usage="System.Management.Automation.PSTokenType.Position" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>19</MemberValue>
      <Docs>
        <summary>
            Position token
            </summary>
        <remarks>
            Position token are bogus tokens generated for identifying a location
            in the script.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatementSeparator">
      <MemberSignature Language="C#" Value="StatementSeparator" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType StatementSeparator = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.StatementSeparator" />
      <MemberSignature Language="VB.NET" Value="StatementSeparator" />
      <MemberSignature Language="F#" Value="StatementSeparator = 16" Usage="System.Management.Automation.PSTokenType.StatementSeparator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
             Statement separator. This is ';'
             </summary>
        <remarks>
             For example, ; in
            
                 #here
                 if ($a -gt 4)
                 {
                     $a++;
                 }
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="String" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType String = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.String" />
      <MemberSignature Language="VB.NET" Value="String" />
      <MemberSignature Language="F#" Value="String = 5" Usage="System.Management.Automation.PSTokenType.String" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
             String
             </summary>
        <remarks>
             For example, "12" in
            
                 $a="12"
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="Type" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Type = int32(10)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Type" />
      <MemberSignature Language="VB.NET" Value="Type" />
      <MemberSignature Language="F#" Value="Type = 10" Usage="System.Management.Automation.PSTokenType.Type" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary>
             Types
             </summary>
        <remarks>
             For example, [string] in
            
                 $a = [string] 12
            
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Unknown = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Unknown" />
      <MemberSignature Language="VB.NET" Value="Unknown" />
      <MemberSignature Language="F#" Value="Unknown = 0" Usage="System.Management.Automation.PSTokenType.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
            Unknown token
            </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="Variable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Management.Automation.PSTokenType Variable = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Management.Automation.PSTokenType.Variable" />
      <MemberSignature Language="VB.NET" Value="Variable" />
      <MemberSignature Language="F#" Value="Variable = 6" Usage="System.Management.Automation.PSTokenType.Variable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSTokenType</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
             Variable
             </summary>
        <remarks>
             For example, $a in
            
                 $a="12"
            
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>