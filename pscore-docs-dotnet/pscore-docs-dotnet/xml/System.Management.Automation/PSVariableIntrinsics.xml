<Type Name="PSVariableIntrinsics" FullName="System.Management.Automation.PSVariableIntrinsics">
  <TypeSignature Language="C#" Value="public sealed class PSVariableIntrinsics" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PSVariableIntrinsics extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.PSVariableIntrinsics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PSVariableIntrinsics" />
  <TypeSignature Language="F#" Value="type PSVariableIntrinsics = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Exposes the APIs to manipulate variables in the Runspace.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public System.Management.Automation.PSVariable Get (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.Automation.PSVariable Get(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (name As String) As PSVariable" />
      <MemberSignature Language="F#" Value="member this.Get : string -&gt; System.Management.Automation.PSVariable" Usage="pSVariableIntrinsics.Get name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSVariable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
             The name of the variable to get. The name can contain drive and/or
             scope specifiers like "ENV:path" or "global:myvar".
             </param>
        <summary>
             Gets the specified variable from session state.
             </summary>
        <returns>
             The specified variable.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="name" /> is null.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.GetValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (name As String) As Object" />
      <MemberSignature Language="F#" Value="member this.GetValue : string -&gt; obj" Usage="pSVariableIntrinsics.GetValue name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
             The name of the variable to get. The name can contain drive and/or
             scope specifiers like "ENV:path" or "global:myvar".
             </param>
        <summary>
             Gets the specified variable value from session state.
             </summary>
        <returns>
             The value of the specified variable.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="name" /> is null.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderNotFoundException">
             If the <paramref name="name" /> refers to a provider that could not be found.
             </exception>
        <exception cref="T:System.Management.Automation.DriveNotFoundException">
             If the <paramref name="name" /> refers to a drive that could not be found.
             </exception>
        <exception cref="T:System.NotSupportedException">
             If the provider that the <paramref name="name" /> refers to does
             not support this operation.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderInvocationException">
             If the provider threw an exception.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (string name, object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(string name, object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.GetValue(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (name As String, defaultValue As Object) As Object" />
      <MemberSignature Language="F#" Value="member this.GetValue : string * obj -&gt; obj" Usage="pSVariableIntrinsics.GetValue (name, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
             The name of the variable to get. The name can contain drive and/or
             scope specifiers like "ENV:path" or "global:myvar".
             </param>
        <param name="defaultValue">
             The default value returned if the variable could not be found.
             </param>
        <summary>
             Gets the specified variable from session state. If the variable
             is not found the default value is returned.
             </summary>
        <returns>
             The value of the specified variable or the default value if the variable
             is not found.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="name" /> is null.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderNotFoundException">
             If the <paramref name="name" /> refers to a provider that could not be found.
             </exception>
        <exception cref="T:System.Management.Automation.DriveNotFoundException">
             If the <paramref name="name" /> refers to a drive that could not be found.
             </exception>
        <exception cref="T:System.NotSupportedException">
             If the provider that the <paramref name="name" /> refers to does
             not support this operation.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderInvocationException">
             If the provider threw an exception.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Management.Automation.PSVariable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Management.Automation.PSVariable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.Remove(System.Management.Automation.PSVariable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (variable As PSVariable)" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Management.Automation.PSVariable -&gt; unit" Usage="pSVariableIntrinsics.Remove variable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Management.Automation.PSVariable" />
      </Parameters>
      <Docs>
        <param name="variable">
             The variable to be removed. It is removed based on the name of the variable.
             </param>
        <summary>
             Removes the specified variable from session state.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="variable" /> is null.
             </exception>
        <exception cref="T:System.Management.Automation.SessionStateUnauthorizedAccessException">
             if the variable is constant.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="pSVariableIntrinsics.Remove name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
             The name of the variable to be removed. The name can contain drive and/or
             scope specifiers like "ENV:path" or "global:myvar".
             </param>
        <summary>
             Removes the specified variable from session state.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="name" /> is null.
             </exception>
        <exception cref="T:System.Management.Automation.SessionStateUnauthorizedAccessException">
             if the variable is constant.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderNotFoundException">
             If the <paramref name="name" /> refers to a provider that could not be found.
             </exception>
        <exception cref="T:System.Management.Automation.DriveNotFoundException">
             If the <paramref name="name" /> refers to a drive that could not be found.
             </exception>
        <exception cref="T:System.NotSupportedException">
             If the provider that the <paramref name="name" /> refers to does
             not support this operation.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderInvocationException">
             If the provider threw an exception.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (System.Management.Automation.PSVariable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(class System.Management.Automation.PSVariable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.Set(System.Management.Automation.PSVariable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (variable As PSVariable)" />
      <MemberSignature Language="F#" Value="member this.Set : System.Management.Automation.PSVariable -&gt; unit" Usage="pSVariableIntrinsics.Set variable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Management.Automation.PSVariable" />
      </Parameters>
      <Docs>
        <param name="variable">
            
             The variable to set
             </param>
        <summary>
             Sets the variable.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="variable" /> is null.
             </exception>
        <exception cref="T:System.Management.Automation.SessionStateUnauthorizedAccessException">
             If the variable is read-only or constant.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.PSVariableIntrinsics.Set(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (name As String, value As Object)" />
      <MemberSignature Language="F#" Value="member this.Set : string * obj -&gt; unit" Usage="pSVariableIntrinsics.Set (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
             The name of the variable to be set. The name can contain drive and/or
             scope specifiers like "ENV:path" or "global:myvar".
             </param>
        <param name="value">
             The value to set the variable to.
             </param>
        <summary>
             Sets the variable to the specified value.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="name" /> is null.
             </exception>
        <exception cref="T:System.Management.Automation.SessionStateUnauthorizedAccessException">
             If the variable is read-only or constant.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderNotFoundException">
             If the <paramref name="name" /> refers to a provider that could not be found.
             </exception>
        <exception cref="T:System.Management.Automation.DriveNotFoundException">
             If the <paramref name="name" /> refers to a drive that could not be found.
             </exception>
        <exception cref="T:System.NotSupportedException">
             If the provider that the <paramref name="name" /> refers to does
             not support this operation.
             </exception>
        <exception cref="T:System.Management.Automation.ProviderInvocationException">
             If the provider threw an exception.
             </exception>
      </Docs>
    </Member>
  </Members>
</Type>