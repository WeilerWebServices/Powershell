<Type Name="ValidatePatternAttribute" FullName="System.Management.Automation.ValidatePatternAttribute">
  <TypeSignature Language="C#" Value="public sealed class ValidatePatternAttribute : System.Management.Automation.ValidateEnumeratedArgumentsAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValidatePatternAttribute extends System.Management.Automation.ValidateEnumeratedArgumentsAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.ValidatePatternAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValidatePatternAttribute&#xA;Inherits ValidateEnumeratedArgumentsAttribute" />
  <TypeSignature Language="F#" Value="type ValidatePatternAttribute = class&#xA;    inherit ValidateEnumeratedArgumentsAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.ValidateEnumeratedArgumentsAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Validates that each parameter argument matches the RegexPattern
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidatePatternAttribute (string regexPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string regexPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.ValidatePatternAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (regexPattern As String)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.ValidatePatternAttribute : string -&gt; System.Management.Automation.ValidatePatternAttribute" Usage="new System.Management.Automation.ValidatePatternAttribute regexPattern" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="regexPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regexPattern">Pattern string to match</param>
        <summary>
            Initializes a new instance of the ValidatePatternAttribute class
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">for invalid arguments</exception>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.ValidatePatternAttribute.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="F#" Value="member this.ErrorMessage : string with get, set" Usage="System.Management.Automation.ValidatePatternAttribute.ErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the custom error message pattern that is displayed to the user.
            
             The text representation of the object being validated and the validating regex is passed as
             the first and second formatting parameters to the ErrorMessage formatting pattern.
             <example>
             [ValidatePattern("\s+", ErrorMessage="The text '{0}' did not pass validation of regex '{1}'")]
             </example></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.ValidatePatternAttribute.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Management.Automation.ValidatePatternAttribute.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Regex options to be used in the validation
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegexPattern">
      <MemberSignature Language="C#" Value="public string RegexPattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegexPattern" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.ValidatePatternAttribute.RegexPattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegexPattern As String" />
      <MemberSignature Language="F#" Value="member this.RegexPattern : string" Usage="System.Management.Automation.ValidatePatternAttribute.RegexPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Regex pattern to be used in the validation
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="protected override void ValidateElement (object element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateElement(object element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.ValidatePatternAttribute.ValidateElement(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateElement (element As Object)" />
      <MemberSignature Language="F#" Value="override this.ValidateElement : obj -&gt; unit" Usage="validatePatternAttribute.ValidateElement element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="element">object to validate</param>
        <summary>
            Validates that each parameter argument matches the RegexPattern
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.ValidationMetadataException">if <paramref name="element" /> is not a string
             that matches the pattern
             and for invalid arguments</exception>
      </Docs>
    </Member>
  </Members>
</Type>