<Type Name="SemanticVersion" FullName="System.Management.Automation.SemanticVersion">
  <TypeSignature Language="C#" Value="public sealed class SemanticVersion : IComparable, IComparable&lt;System.Management.Automation.SemanticVersion&gt;, IEquatable&lt;System.Management.Automation.SemanticVersion&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemanticVersion extends System.Object implements class System.IComparable, class System.IComparable`1&lt;class System.Management.Automation.SemanticVersion&gt;, class System.IEquatable`1&lt;class System.Management.Automation.SemanticVersion&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.SemanticVersion" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemanticVersion&#xA;Implements IComparable, IComparable(Of SemanticVersion), IEquatable(Of SemanticVersion)" />
  <TypeSignature Language="F#" Value="type SemanticVersion = class&#xA;    interface IComparable&#xA;    interface IComparable&lt;SemanticVersion&gt;&#xA;    interface IEquatable&lt;SemanticVersion&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Management.Automation.SemanticVersion&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Management.Automation.SemanticVersion&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             An implementation of semantic versioning (http://semver.org)
             that can be converted to/from <see cref="T:System.Version" />.
            
             When converting to <see cref="T:System.Version" />, a PSNoteProperty is
             added to the instance to store the semantic version label so
             that it can be recovered when creating a new SemanticVersion.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticVersion (int major);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (major As Integer)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.SemanticVersion : int -&gt; System.Management.Automation.SemanticVersion" Usage="new System.Management.Automation.SemanticVersion major" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="major">The major version</param>
        <summary>
            Construct a SemanticVersion.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="major" /> is less than 0.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticVersion (string version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (version As String)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.SemanticVersion : string -&gt; System.Management.Automation.SemanticVersion" Usage="new System.Management.Automation.SemanticVersion version" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="version">The version to parse</param>
        <summary>
            Construct a SemanticVersion from a string.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException" />
        <exception cref="T:System.Management.Automation.ValidationMetadataException" />
        <exception cref="T:System.FormatException" />
        <exception cref="T:System.OverflowException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticVersion (Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.#ctor(System.Version)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.SemanticVersion : Version -&gt; System.Management.Automation.SemanticVersion" Usage="new System.Management.Automation.SemanticVersion version" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="version">The version.</param>
        <summary>
            Construct a <see cref="T:System.Management.Automation.SemanticVersion" /> from a <see cref="T:System.Version" />,
            copying the NoteProperty storing the label if the expected property exists.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticVersion (int major, int minor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major, int32 minor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (major As Integer, minor As Integer)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.SemanticVersion : int * int -&gt; System.Management.Automation.SemanticVersion" Usage="new System.Management.Automation.SemanticVersion (major, minor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="major">The major version</param>
        <param name="minor">The minor version</param>
        <summary>
            Construct a SemanticVersion.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="major" /> or <paramref name="minor" /> is less than 0.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticVersion (int major, int minor, int patch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major, int32 minor, int32 patch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (major As Integer, minor As Integer, patch As Integer)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.SemanticVersion : int * int * int -&gt; System.Management.Automation.SemanticVersion" Usage="new System.Management.Automation.SemanticVersion (major, minor, patch)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
        <Parameter Name="patch" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="major">The major version</param>
        <param name="minor">The minor version</param>
        <param name="patch">The minor version</param>
        <summary>
            Construct a SemanticVersion.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="major" />, <paramref name="minor" />, or <paramref name="patch" /> is less than 0.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticVersion (int major, int minor, int patch, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major, int32 minor, int32 patch, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (major As Integer, minor As Integer, patch As Integer, label As String)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.SemanticVersion : int * int * int * string -&gt; System.Management.Automation.SemanticVersion" Usage="new System.Management.Automation.SemanticVersion (major, minor, patch, label)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
        <Parameter Name="patch" Type="System.Int32" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="major">The major version</param>
        <param name="minor">The minor version</param>
        <param name="patch">The minor version</param>
        <param name="label">The label for the version</param>
        <summary>
            Construct a SemanticVersion.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="major" />, <paramref name="minor" />, or <paramref name="patch" /> is less than 0.
            </exception>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="label" /> is null or an empty string.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Management.Automation.SemanticVersion value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class System.Management.Automation.SemanticVersion value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.CompareTo(System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As SemanticVersion) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Management.Automation.SemanticVersion -&gt; int&#xA;override this.CompareTo : System.Management.Automation.SemanticVersion -&gt; int" Usage="semanticVersion.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Implement <see cref="M:System.IComparable`1.CompareTo(`0)" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (version As Object) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="semanticVersion.CompareTo version" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="version">To be added.</param>
        <summary>
            Implement <see cref="M:System.IComparable.CompareTo(System.Object)" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Management.Automation.SemanticVersion other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Management.Automation.SemanticVersion other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.Equals(System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Management.Automation.SemanticVersion -&gt; bool" Usage="semanticVersion.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
            Implement <see cref="M:System.IEquatable`1.Equals(`0)" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="semanticVersion.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>
            Override <see cref="M:System.Object.Equals(System.Object)" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="semanticVersion.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Override <see cref="M:System.Object.GetHashCode" /></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.SemanticVersion.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As String" />
      <MemberSignature Language="F#" Value="member this.Label : string" Usage="System.Management.Automation.SemanticVersion.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The last component in a SemanticVersion - may be null if not specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Major">
      <MemberSignature Language="C#" Value="public int Major { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Major" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.SemanticVersion.Major" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Major As Integer" />
      <MemberSignature Language="F#" Value="member this.Major : int" Usage="System.Management.Automation.SemanticVersion.Major" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The major version number, never negative.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minor">
      <MemberSignature Language="C#" Value="public int Minor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minor" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.SemanticVersion.Minor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minor As Integer" />
      <MemberSignature Language="F#" Value="member this.Minor : int" Usage="System.Management.Automation.SemanticVersion.Minor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The minor version number, never negative.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Management.Automation.SemanticVersion v1, System.Management.Automation.SemanticVersion v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Management.Automation.SemanticVersion v1, class System.Management.Automation.SemanticVersion v2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_Equality(System.Management.Automation.SemanticVersion,System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (v1 As SemanticVersion, v2 As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Management.Automation.SemanticVersion * System.Management.Automation.SemanticVersion -&gt; bool" Usage="v1 = v2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Management.Automation.SemanticVersion" />
        <Parameter Name="v2" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="v1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Overloaded == operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Management.Automation.SemanticVersion v1, System.Management.Automation.SemanticVersion v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(class System.Management.Automation.SemanticVersion v1, class System.Management.Automation.SemanticVersion v2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_GreaterThan(System.Management.Automation.SemanticVersion,System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (v1 As SemanticVersion, v2 As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Management.Automation.SemanticVersion * System.Management.Automation.SemanticVersion -&gt; bool" Usage="v1 &gt; v2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Management.Automation.SemanticVersion" />
        <Parameter Name="v2" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="v1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Overloaded &gt; operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Management.Automation.SemanticVersion v1, System.Management.Automation.SemanticVersion v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(class System.Management.Automation.SemanticVersion v1, class System.Management.Automation.SemanticVersion v2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_GreaterThanOrEqual(System.Management.Automation.SemanticVersion,System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (v1 As SemanticVersion, v2 As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Management.Automation.SemanticVersion * System.Management.Automation.SemanticVersion -&gt; bool" Usage="v1 &gt;= v2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Management.Automation.SemanticVersion" />
        <Parameter Name="v2" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="v1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Overloaded &gt;= operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Version (System.Management.Automation.SemanticVersion semver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Version op_Implicit(class System.Management.Automation.SemanticVersion semver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_Implicit(System.Management.Automation.SemanticVersion)~System.Version" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semver As SemanticVersion) As Version" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Management.Automation.SemanticVersion -&gt; Version" Usage="System.Management.Automation.SemanticVersion.op_Implicit semver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semver" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="semver"></param>
        <summary>
            Convert a <see cref="T:System.Management.Automation.SemanticVersion" /> to a <see cref="T:System.Version" />.
            If there is a <see cref="P:System.Management.Automation.SemanticVersion.Label" />, it is added as a NoteProperty to the
            result so that you can round trip back to a <see cref="T:System.Management.Automation.SemanticVersion" />
            without losing the label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Management.Automation.SemanticVersion v1, System.Management.Automation.SemanticVersion v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Management.Automation.SemanticVersion v1, class System.Management.Automation.SemanticVersion v2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_Inequality(System.Management.Automation.SemanticVersion,System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (v1 As SemanticVersion, v2 As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Management.Automation.SemanticVersion * System.Management.Automation.SemanticVersion -&gt; bool" Usage="System.Management.Automation.SemanticVersion.op_Inequality (v1, v2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Management.Automation.SemanticVersion" />
        <Parameter Name="v2" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="v1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Overloaded != operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Management.Automation.SemanticVersion v1, System.Management.Automation.SemanticVersion v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(class System.Management.Automation.SemanticVersion v1, class System.Management.Automation.SemanticVersion v2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_LessThan(System.Management.Automation.SemanticVersion,System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (v1 As SemanticVersion, v2 As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Management.Automation.SemanticVersion * System.Management.Automation.SemanticVersion -&gt; bool" Usage="v1 &lt; v2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Management.Automation.SemanticVersion" />
        <Parameter Name="v2" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="v1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Overloaded &lt; operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Management.Automation.SemanticVersion v1, System.Management.Automation.SemanticVersion v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(class System.Management.Automation.SemanticVersion v1, class System.Management.Automation.SemanticVersion v2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.op_LessThanOrEqual(System.Management.Automation.SemanticVersion,System.Management.Automation.SemanticVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (v1 As SemanticVersion, v2 As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Management.Automation.SemanticVersion * System.Management.Automation.SemanticVersion -&gt; bool" Usage="v1 &lt;= v2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Management.Automation.SemanticVersion" />
        <Parameter Name="v2" Type="System.Management.Automation.SemanticVersion" />
      </Parameters>
      <Docs>
        <param name="v1">To be added.</param>
        <param name="v2">To be added.</param>
        <summary>
            Overloaded &lt;= operator
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Management.Automation.SemanticVersion Parse (string version);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Management.Automation.SemanticVersion Parse(string version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (version As String) As SemanticVersion" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Management.Automation.SemanticVersion" Usage="System.Management.Automation.SemanticVersion.Parse version" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SemanticVersion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="version">The string to parse</param>
        <summary>
            Parse <paramref name="version" /> and return the result if it is a valid <see cref="T:System.Management.Automation.SemanticVersion" />, otherwise throws an exception.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException" />
        <exception cref="T:System.Management.Automation.ValidationMetadataException" />
        <exception cref="T:System.FormatException" />
        <exception cref="T:System.OverflowException" />
      </Docs>
    </Member>
    <Member MemberName="Patch">
      <MemberSignature Language="C#" Value="public int Patch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Patch" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.SemanticVersion.Patch" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Patch As Integer" />
      <MemberSignature Language="F#" Value="member this.Patch : int" Usage="System.Management.Automation.SemanticVersion.Patch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The patch version, -1 if not specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="semanticVersion.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            ToString
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string version, out System.Management.Automation.SemanticVersion result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string version, [out] class System.Management.Automation.SemanticVersion&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.SemanticVersion.TryParse(System.String,System.Management.Automation.SemanticVersion@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (version As String, ByRef result As SemanticVersion) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.Management.Automation.SemanticVersion.TryParse (version, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="result" Type="System.Management.Automation.SemanticVersion&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="version">The string to parse</param>
        <param name="result">The return value when the string is a valid <see cref="T:System.Management.Automation.SemanticVersion" /></param>
        <summary>
            Parse <paramref name="version" /> and return true if it is a valid <see cref="T:System.Management.Automation.SemanticVersion" />, otherwise return false.
            No exceptions are raised.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>