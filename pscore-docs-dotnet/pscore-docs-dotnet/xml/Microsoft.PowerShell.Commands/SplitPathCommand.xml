<Type Name="SplitPathCommand" FullName="Microsoft.PowerShell.Commands.SplitPathCommand">
  <TypeSignature Language="C#" Value="public class SplitPathCommand : Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SplitPathCommand extends Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.PowerShell.Commands.SplitPathCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class SplitPathCommand&#xA;Inherits CoreCommandWithCredentialsBase" />
  <TypeSignature Language="F#" Value="type SplitPathCommand = class&#xA;    inherit CoreCommandWithCredentialsBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Management.Automation.Cmdlet("Split", "Path", DefaultParameterSetName="ParentSet", HelpUri="https://go.microsoft.com/fwlink/?LinkID=113404", SupportsTransactions=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Management.Automation.OutputType(typeof(System.String), ParameterSetName=Mono.Cecil.CustomAttributeArgument[])</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Management.Automation.OutputType(typeof(System.Boolean), ParameterSetName=Mono.Cecil.CustomAttributeArgument[])</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            A command to resolve MSH paths containing glob characters to
            MSH paths that match the glob strings.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SplitPathCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.SplitPathCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Extension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Extension : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.Extension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=false, ParameterSetName="ExtensionSet", ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Determines if the extension should be returned
             </summary>
        <value>
             If true the extension of the path will be returned.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbsolute">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter IsAbsolute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter IsAbsolute" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.IsAbsolute" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAbsolute As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.IsAbsolute : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.IsAbsolute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(ParameterSetName="IsAbsoluteSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Determines if the path is an absolute path.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Leaf">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Leaf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Leaf" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.Leaf" />
      <MemberSignature Language="VB.NET" Value="Public Property Leaf As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Leaf : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.Leaf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=false, ParameterSetName="LeafSet", ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Determines if the leaf name should be returned
             </summary>
        <value>
             If true the leaf name of the path will be returned.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeafBase">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter LeafBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter LeafBase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.LeafBase" />
      <MemberSignature Language="VB.NET" Value="Public Property LeafBase As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.LeafBase : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.LeafBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=false, ParameterSetName="LeafBaseSet", ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Determines if the leaf base name (name without extension) should be returned
             </summary>
        <value>
             If true the leaf base name of the path will be returned.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiteralPath">
      <MemberSignature Language="C#" Value="public string[] LiteralPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] LiteralPath" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.LiteralPath" />
      <MemberSignature Language="VB.NET" Value="Public Property LiteralPath As String()" />
      <MemberSignature Language="F#" Value="member this.LiteralPath : string[] with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.LiteralPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="LiteralPathSet", ValueFromPipeline=false, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the literal path parameter to the command
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NoQualifier">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter NoQualifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter NoQualifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.NoQualifier" />
      <MemberSignature Language="VB.NET" Value="Public Property NoQualifier As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.NoQualifier : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.NoQualifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=false, ParameterSetName="NoQualifierSet", ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Determines if the qualifier should be returned
             </summary>
        <value>
             If true the qualifier of the path will be returned.
             The qualifier is the drive or provider that is qualifying
             the MSH path.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=false, ParameterSetName="ParentSet", ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Determines if the parent path should be returned
             </summary>
        <value>
             If true the parent of the path will be returned.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string[] Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Path" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String()" />
      <MemberSignature Language="F#" Value="member this.Path : string[] with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="ParentSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="LeafSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="LeafBaseSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="ExtensionSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="QualifierSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="NoQualifierSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="IsAbsoluteSet", Position=0, ValueFromPipeline=true, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the path parameter to the command
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRecord">
      <MemberSignature Language="C#" Value="protected override void ProcessRecord ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ProcessRecord() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.SplitPathCommand.ProcessRecord" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ProcessRecord ()" />
      <MemberSignature Language="F#" Value="override this.ProcessRecord : unit -&gt; unit" Usage="splitPathCommand.ProcessRecord " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Parses the specified path and returns the portion determined by the
            boolean parameters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Qualifier">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Qualifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Qualifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.Qualifier" />
      <MemberSignature Language="VB.NET" Value="Public Property Qualifier As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Qualifier : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.Qualifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=false, ParameterSetName="QualifierSet", Position=1, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Determines if the qualifier should be returned
             </summary>
        <value>
             If true the qualifier of the path will be returned.
             The qualifier is the drive or provider that is qualifying
             the MSH path.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Resolve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Resolve" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.SplitPathCommand.Resolve" />
      <MemberSignature Language="VB.NET" Value="Public Property Resolve As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Resolve : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.SplitPathCommand.Resolve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Determines if the path should be resolved before being parsed.
            </summary>
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>