<Type Name="ExportPSSessionCommand" FullName="Microsoft.PowerShell.Commands.ExportPSSessionCommand">
  <TypeSignature Language="C#" Value="public sealed class ExportPSSessionCommand : Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExportPSSessionCommand extends Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.PowerShell.Commands.ExportPSSessionCommand" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExportPSSessionCommand&#xA;Inherits ImplicitRemotingCommandBase" />
  <TypeSignature Language="F#" Value="type ExportPSSessionCommand = class&#xA;    inherit ImplicitRemotingCommandBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Management.Automation.Cmdlet("Export", "PSSession", HelpUri="https://go.microsoft.com/fwlink/?LinkID=135213")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Management.Automation.OutputType(typeof(System.IO.FileInfo))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This class implements Export-PSSession cmdlet.
            Spec: TBD
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportPSSessionCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.ExportPSSessionCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessing">
      <MemberSignature Language="C#" Value="protected override void BeginProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void BeginProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.ExportPSSessionCommand.BeginProcessing" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub BeginProcessing ()" />
      <MemberSignature Language="F#" Value="override this.BeginProcessing : unit -&gt; unit" Usage="exportPSSessionCommand.BeginProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Performs initialization of cmdlet execution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.PowerShell.Commands.ExportPSSessionCommand.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.ArgumentCompletions(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ArgumentToEncodingTransformation</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Encoding optional flag
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Force">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Force { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Force" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.Force" />
      <MemberSignature Language="VB.NET" Value="Public Property Force As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Force : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.ExportPSSessionCommand.Force" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Property that sets force parameter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputModule">
      <MemberSignature Language="C#" Value="public string OutputModule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputModule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.OutputModule" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputModule As String" />
      <MemberSignature Language="F#" Value="member this.OutputModule : string with get, set" Usage="Microsoft.PowerShell.Commands.ExportPSSessionCommand.OutputModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, Position=1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Mandatory file name to write to
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VersionOfScriptGenerator">
      <MemberSignature Language="C#" Value="public static Version VersionOfScriptGenerator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Version VersionOfScriptGenerator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ExportPSSessionCommand.VersionOfScriptGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property VersionOfScriptGenerator As Version" />
      <MemberSignature Language="F#" Value="member this.VersionOfScriptGenerator : Version" Usage="Microsoft.PowerShell.Commands.ExportPSSessionCommand.VersionOfScriptGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Version of the script generator used (by this Export-PSSession cmdlet) to generate psm1 and psd1 files.
            Generated script checks this version to see if it needs to be regenerated.  There are 2 situations where this is needed
            1. the script needs to be regenerated because a bug fix made previous versions incompatible with the rest of the system (i.e. with ObjectModelWrapper)
            2. ths script needs to be regenerated because a security vulnerability was found inside generated code (there is no way to service generated code, but we can service the dll that reports the version that the generated script checks against)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>