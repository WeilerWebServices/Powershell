<Type Name="VariableCommandBase" FullName="Microsoft.PowerShell.Commands.VariableCommandBase">
  <TypeSignature Language="C#" Value="public abstract class VariableCommandBase : System.Management.Automation.PSCmdlet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VariableCommandBase extends System.Management.Automation.PSCmdlet" />
  <TypeSignature Language="DocId" Value="T:Microsoft.PowerShell.Commands.VariableCommandBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VariableCommandBase&#xA;Inherits PSCmdlet" />
  <TypeSignature Language="F#" Value="type VariableCommandBase = class&#xA;    inherit PSCmdlet" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.PSCmdlet</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Base class for all variable commands.
            
             Because -Scope is defined in VariableCommandBase, all derived commands
             must implement -Scope.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VariableCommandBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.VariableCommandBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeFilters">
      <MemberSignature Language="C#" Value="protected string[] ExcludeFilters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ExcludeFilters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.VariableCommandBase.ExcludeFilters" />
      <MemberSignature Language="VB.NET" Value="Protected Property ExcludeFilters As String()" />
      <MemberSignature Language="F#" Value="member this.ExcludeFilters : string[] with get, set" Usage="Microsoft.PowerShell.Commands.VariableCommandBase.ExcludeFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             The Exclude parameter for all the variable commands
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeFilters">
      <MemberSignature Language="C#" Value="protected string[] IncludeFilters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] IncludeFilters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.VariableCommandBase.IncludeFilters" />
      <MemberSignature Language="VB.NET" Value="Protected Property IncludeFilters As String()" />
      <MemberSignature Language="F#" Value="member this.IncludeFilters : string[] with get, set" Usage="Microsoft.PowerShell.Commands.VariableCommandBase.IncludeFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             The Include parameter for all the variable commands
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scope">
      <MemberSignature Language="C#" Value="public string Scope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scope" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.VariableCommandBase.Scope" />
      <MemberSignature Language="VB.NET" Value="Public Property Scope As String" />
      <MemberSignature Language="F#" Value="member this.Scope : string with get, set" Usage="Microsoft.PowerShell.Commands.VariableCommandBase.Scope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Selects active scope to work with; used for all variable commands.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>