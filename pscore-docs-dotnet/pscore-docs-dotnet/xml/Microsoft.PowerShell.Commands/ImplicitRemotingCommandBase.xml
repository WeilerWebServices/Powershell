<Type Name="ImplicitRemotingCommandBase" FullName="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase">
  <TypeSignature Language="C#" Value="public class ImplicitRemotingCommandBase : System.Management.Automation.PSCmdlet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImplicitRemotingCommandBase extends System.Management.Automation.PSCmdlet" />
  <TypeSignature Language="DocId" Value="T:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ImplicitRemotingCommandBase&#xA;Inherits PSCmdlet" />
  <TypeSignature Language="F#" Value="type ImplicitRemotingCommandBase = class&#xA;    inherit PSCmdlet" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.PSCmdlet</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Base class for implicit remoting cmdlets
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowClobber">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter AllowClobber { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter AllowClobber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.AllowClobber" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowClobber As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.AllowClobber : System.Management.Automation.SwitchParameter with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.AllowClobber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Allows shadowing and/or overwriting of existing local/client commands
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public object[] ArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] ArgumentList" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.ArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Property ArgumentList As Object()" />
      <MemberSignature Language="F#" Value="member this.ArgumentList : obj[] with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.ArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.AllowEmptyCollection</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.AllowNull</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The parameter that all additional arguments get bound to. These arguments are used
            when retrieving dynamic parameters from cmdlets that support them.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Certificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Certificate" />
      <MemberSignature Language="VB.NET" Value="Public Property Certificate As X509Certificate2" />
      <MemberSignature Language="F#" Value="member this.Certificate : System.Security.Cryptography.X509Certificates.X509Certificate2 with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Certificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the certificate with which to sign the format file and psm1 file.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string[] CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommandName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.CommandName" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandName As String()" />
      <MemberSignature Language="F#" Value="member this.CommandName : string[] with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Position=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the path(s) or name(s) of the commands to retrieve
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public System.Management.Automation.CommandTypes CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.CommandTypes CommandType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.CommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandType As CommandTypes" />
      <MemberSignature Language="F#" Value="member this.CommandType : System.Management.Automation.CommandTypes with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.CommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.CommandTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the type of the command to get
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatTypeName">
      <MemberSignature Language="C#" Value="public string[] FormatTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FormatTypeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.FormatTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatTypeName As String()" />
      <MemberSignature Language="F#" Value="member this.FormatTypeName : string[] with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.FormatTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Position=3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the types for which we should get formatting and output data
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullyQualifiedModule">
      <MemberSignature Language="C#" Value="public Microsoft.PowerShell.Commands.ModuleSpecification[] FullyQualifiedModule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.PowerShell.Commands.ModuleSpecification[] FullyQualifiedModule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.FullyQualifiedModule" />
      <MemberSignature Language="VB.NET" Value="Public Property FullyQualifiedModule As ModuleSpecification()" />
      <MemberSignature Language="F#" Value="member this.FullyQualifiedModule : Microsoft.PowerShell.Commands.ModuleSpecification[] with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.FullyQualifiedModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNull</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.PowerShell.Commands.ModuleSpecification[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the FullyQualifiedModule parameter to the cmdlet
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public string[] Module { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Module" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Module" />
      <MemberSignature Language="VB.NET" Value="Public Property Module As String()" />
      <MemberSignature Language="F#" Value="member this.Module : string[] with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNull</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the PSSnapin parameter to the cmdlet
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Runspaces.PSSession Session { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Runspaces.PSSession Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Session" />
      <MemberSignature Language="VB.NET" Value="Public Property Session As PSSession" />
      <MemberSignature Language="F#" Value="member this.Session : System.Management.Automation.Runspaces.PSSession with get, set" Usage="Microsoft.PowerShell.Commands.ImplicitRemotingCommandBase.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Utility</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, Position=0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNull</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Runspaces.PSSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The PSSession object describing the remote runspace
            using which the specified cmdlet operation will be performed
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>