<Type Name="GetPSDriveCommand" FullName="Microsoft.PowerShell.Commands.GetPSDriveCommand">
  <TypeSignature Language="C#" Value="public class GetPSDriveCommand : Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GetPSDriveCommand extends Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.PowerShell.Commands.GetPSDriveCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class GetPSDriveCommand&#xA;Inherits DriveMatchingCoreCommandBase" />
  <TypeSignature Language="F#" Value="type GetPSDriveCommand = class&#xA;    inherit DriveMatchingCoreCommandBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Management.Automation.Cmdlet("Get", "PSDrive", DefaultParameterSetName="Name", HelpUri="https://go.microsoft.com/fwlink/?LinkID=113327", SupportsTransactions=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Management.Automation.OutputType(typeof(System.Management.Automation.PSDriveInfo))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Gets a specified or listing of drives that are mounted in the Monad
            namespace.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GetPSDriveCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.GetPSDriveCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessing">
      <MemberSignature Language="C#" Value="protected override void BeginProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void BeginProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.GetPSDriveCommand.BeginProcessing" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub BeginProcessing ()" />
      <MemberSignature Language="F#" Value="override this.BeginProcessing : unit -&gt; unit" Usage="getPSDriveCommand.BeginProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Prepare the session for the Get-PSDrive command.
            Currently, auto-loads the core modules that define drives. Ideally,
            we could discover fake PSDriveInfo objects here based on drives exported
            from modules.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiteralName">
      <MemberSignature Language="C#" Value="public string[] LiteralName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] LiteralName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.LiteralName" />
      <MemberSignature Language="VB.NET" Value="Public Property LiteralName As String()" />
      <MemberSignature Language="F#" Value="member this.LiteralName : string[] with get, set" Usage="Microsoft.PowerShell.Commands.GetPSDriveCommand.LiteralName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(Mandatory=true, ParameterSetName="LiteralName", Position=0, ValueFromPipeline=false, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the literal name parameter to the command
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string[] Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String()" />
      <MemberSignature Language="F#" Value="member this.Name : string[] with get, set" Usage="Microsoft.PowerShell.Commands.GetPSDriveCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(ParameterSetName="Name", Position=0, ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the drive name the user is looking for.
             </summary>
        <value>To be added.</value>
        <remarks>
             If the drive name is left empty, all drives will be
             returned. A globing or regular expression can also be
             supplied and any drive names that match the expression
             will be returned.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRecord">
      <MemberSignature Language="C#" Value="protected override void ProcessRecord ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ProcessRecord() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.PowerShell.Commands.GetPSDriveCommand.ProcessRecord" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ProcessRecord ()" />
      <MemberSignature Language="F#" Value="override this.ProcessRecord : unit -&gt; unit" Usage="getPSDriveCommand.ProcessRecord " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Retrieves the drives specified by the parameters. If the name is empty, all drives
            will be retrieved. If the provider is specified, only drives for that provider
            will be retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PSProvider">
      <MemberSignature Language="C#" Value="public string[] PSProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] PSProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.PSProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property PSProvider As String()" />
      <MemberSignature Language="F#" Value="member this.PSProvider : string[] with get, set" Usage="Microsoft.PowerShell.Commands.GetPSDriveCommand.PSProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the provider name for the
             drives that should be retrieved.
             </summary>
        <value>To be added.</value>
        <remarks>
             If the provider is left empty, all drives will be
             returned. A globing or regular expression can also be
             supplied and any drive with providers that match the expression
             will be returned.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scope">
      <MemberSignature Language="C#" Value="public string Scope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scope" />
      <MemberSignature Language="DocId" Value="P:Microsoft.PowerShell.Commands.GetPSDriveCommand.Scope" />
      <MemberSignature Language="VB.NET" Value="Public Property Scope As String" />
      <MemberSignature Language="F#" Value="member this.Scope : string with get, set" Usage="Microsoft.PowerShell.Commands.GetPSDriveCommand.Scope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.PowerShell.Commands.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the scope parameter to the command.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>