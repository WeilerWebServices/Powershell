<Type Name="CatchClauseAst" FullName="System.Management.Automation.Language.CatchClauseAst">
  <TypeSignature Language="C#" Value="public class CatchClauseAst : System.Management.Automation.Language.Ast" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatchClauseAst extends System.Management.Automation.Language.Ast" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.CatchClauseAst" />
  <TypeSignature Language="VB.NET" Value="Public Class CatchClauseAst&#xA;Inherits Ast" />
  <TypeSignature Language="F#" Value="type CatchClauseAst = class&#xA;    inherit Ast" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.Ast</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents a single catch as part of a try statement.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatchClauseAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.TypeConstraintAst&gt; catchTypes, System.Management.Automation.Language.StatementBlockAst body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.TypeConstraintAst&gt; catchTypes, class System.Management.Automation.Language.StatementBlockAst body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.CatchClauseAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.TypeConstraintAst},System.Management.Automation.Language.StatementBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, catchTypes As IEnumerable(Of TypeConstraintAst), body As StatementBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.CatchClauseAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.TypeConstraintAst&gt; * System.Management.Automation.Language.StatementBlockAst -&gt; System.Management.Automation.Language.CatchClauseAst" Usage="new System.Management.Automation.Language.CatchClauseAst (extent, catchTypes, body)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="catchTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.TypeConstraintAst&gt;" />
        <Parameter Name="body" Type="System.Management.Automation.Language.StatementBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the catch, from the catch keyword to the closing curly brace.</param>
        <param name="catchTypes">The collection of types caught by this catch clause, may be null if all types are caught.</param>
        <param name="body">The body of the catch clause.</param>
        <summary>
            Construct a catch clause.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="body" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StatementBlockAst Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StatementBlockAst Body" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.CatchClauseAst.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As StatementBlockAst" />
      <MemberSignature Language="F#" Value="member this.Body : System.Management.Automation.Language.StatementBlockAst" Usage="System.Management.Automation.Language.CatchClauseAst.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StatementBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The body of the catch block.  This property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.TypeConstraintAst&gt; CatchTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Management.Automation.Language.TypeConstraintAst&gt; CatchTypes" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.CatchClauseAst.CatchTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CatchTypes As ReadOnlyCollection(Of TypeConstraintAst)" />
      <MemberSignature Language="F#" Value="member this.CatchTypes : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.TypeConstraintAst&gt;" Usage="System.Management.Automation.Language.CatchClauseAst.CatchTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.TypeConstraintAst&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A possibly empty collection of types caught by this catch block.  If the collection is empty, the catch handler
            catches all exceptions.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.CatchClauseAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="catchClauseAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the CatchClauseAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCatchAll">
      <MemberSignature Language="C#" Value="public bool IsCatchAll { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCatchAll" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.CatchClauseAst.IsCatchAll" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCatchAll As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsCatchAll : bool" Usage="System.Management.Automation.Language.CatchClauseAst.IsCatchAll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if this handler handles any kind of exception.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>