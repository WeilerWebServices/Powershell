<Type Name="SwitchStatementAst" FullName="System.Management.Automation.Language.SwitchStatementAst">
  <TypeSignature Language="C#" Value="public class SwitchStatementAst : System.Management.Automation.Language.LabeledStatementAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SwitchStatementAst extends System.Management.Automation.Language.LabeledStatementAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.SwitchStatementAst" />
  <TypeSignature Language="VB.NET" Value="Public Class SwitchStatementAst&#xA;Inherits LabeledStatementAst" />
  <TypeSignature Language="F#" Value="type SwitchStatementAst = class&#xA;    inherit LabeledStatementAst" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.LabeledStatementAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents a switch statement.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SwitchStatementAst (System.Management.Automation.Language.IScriptExtent extent, string label, System.Management.Automation.Language.PipelineBaseAst condition, System.Management.Automation.Language.SwitchFlags flags, System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt; clauses, System.Management.Automation.Language.StatementBlockAst default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, string label, class System.Management.Automation.Language.PipelineBaseAst condition, valuetype System.Management.Automation.Language.SwitchFlags flags, class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.Management.Automation.Language.ExpressionAst, class System.Management.Automation.Language.StatementBlockAst&gt;&gt; clauses, class System.Management.Automation.Language.StatementBlockAst default) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.SwitchStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.String,System.Management.Automation.Language.PipelineBaseAst,System.Management.Automation.Language.SwitchFlags,System.Collections.Generic.IEnumerable{System.Tuple{System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.StatementBlockAst}},System.Management.Automation.Language.StatementBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, label As String, condition As PipelineBaseAst, flags As SwitchFlags, clauses As IEnumerable(Of Tuple(Of ExpressionAst, StatementBlockAst)), default As StatementBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.SwitchStatementAst : System.Management.Automation.Language.IScriptExtent * string * System.Management.Automation.Language.PipelineBaseAst * System.Management.Automation.Language.SwitchFlags * seq&lt;System.Management.Automation.Language.ExpressionAst * System.Management.Automation.Language.StatementBlockAst&gt; * System.Management.Automation.Language.StatementBlockAst -&gt; System.Management.Automation.Language.SwitchStatementAst" Usage="new System.Management.Automation.Language.SwitchStatementAst (extent, label, condition, flags, clauses, default)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="condition" Type="System.Management.Automation.Language.PipelineBaseAst" />
        <Parameter Name="flags" Type="System.Management.Automation.Language.SwitchFlags" />
        <Parameter Name="clauses" Type="System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt;" />
        <Parameter Name="default" Type="System.Management.Automation.Language.StatementBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the statement, from the label or switch keyword to the closing curly.</param>
        <param name="label">The optionally null label.</param>
        <param name="condition">The expression being switched upon.</param>
        <param name="flags">Any flags that affect how the <paramref name="condition" /> is tested.</param>
        <param name="clauses">
            A possibly null or empty collection of conditions and block of statements to execute if the condition matches.
            </param>
        <param name="default">The default clause to execute if no clauses match.</param>
        <summary>
            Construct a switch statement.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> is null.
            </exception>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="default" /> and <paramref name="clauses" /> are both null or empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Clauses">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;Tuple&lt;System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt; Clauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Tuple`2&lt;class System.Management.Automation.Language.ExpressionAst, class System.Management.Automation.Language.StatementBlockAst&gt;&gt; Clauses" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.SwitchStatementAst.Clauses" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clauses As ReadOnlyCollection(Of Tuple(Of ExpressionAst, StatementBlockAst))" />
      <MemberSignature Language="F#" Value="member this.Clauses : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.ExpressionAst * System.Management.Automation.Language.StatementBlockAst&gt;" Usage="System.Management.Automation.Language.SwitchStatementAst.Clauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Tuple&lt;System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A possibly empty collection of conditions and statement blocks representing the cases of the switch statement.
            If the collection is empty, the default clause is not null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.SwitchStatementAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="switchStatementAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the SwitchStatementAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StatementBlockAst Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StatementBlockAst Default" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.SwitchStatementAst.Default" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Default As StatementBlockAst" />
      <MemberSignature Language="F#" Value="member this.Default : System.Management.Automation.Language.StatementBlockAst" Usage="System.Management.Automation.Language.SwitchStatementAst.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StatementBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast for the default of the switch statement, or null if no default block was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.SwitchFlags Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.Language.SwitchFlags Flags" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.SwitchStatementAst.Flags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Flags As SwitchFlags" />
      <MemberSignature Language="F#" Value="member this.Flags : System.Management.Automation.Language.SwitchFlags" Usage="System.Management.Automation.Language.SwitchStatementAst.Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.SwitchFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The flags, if any specified on the switch statement.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>