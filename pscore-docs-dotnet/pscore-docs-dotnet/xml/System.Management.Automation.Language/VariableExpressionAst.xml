<Type Name="VariableExpressionAst" FullName="System.Management.Automation.Language.VariableExpressionAst">
  <TypeSignature Language="C#" Value="public class VariableExpressionAst : System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VariableExpressionAst extends System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.VariableExpressionAst" />
  <TypeSignature Language="VB.NET" Value="Public Class VariableExpressionAst&#xA;Inherits ExpressionAst" />
  <TypeSignature Language="F#" Value="type VariableExpressionAst = class&#xA;    inherit ExpressionAst&#xA;    interface ISupportsAssignment&#xA;    interface IAssignableValue" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.ExpressionAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast representing a variable reference, either normal references, e.g. <c>$true</c>, or splatted references
            <c>@PSBoundParameters</c>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariableExpressionAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.VariablePath variablePath, bool splatted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.VariablePath variablePath, bool splatted) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.VariableExpressionAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.VariablePath,System.Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.VariableExpressionAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.VariablePath * bool -&gt; System.Management.Automation.Language.VariableExpressionAst" Usage="new System.Management.Automation.Language.VariableExpressionAst (extent, variablePath, splatted)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="variablePath" Type="System.Management.Automation.VariablePath" />
        <Parameter Name="splatted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">To be added.</param>
        <param name="variablePath">To be added.</param>
        <param name="splatted">To be added.</param>
        <summary>
            Construct a variable reference with an existing VariablePath (rather than construct a new one.)
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="variablePath" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariableExpressionAst (System.Management.Automation.Language.IScriptExtent extent, string variableName, bool splatted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, string variableName, bool splatted) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.VariableExpressionAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, variableName As String, splatted As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.VariableExpressionAst : System.Management.Automation.Language.IScriptExtent * string * bool -&gt; System.Management.Automation.Language.VariableExpressionAst" Usage="new System.Management.Automation.Language.VariableExpressionAst (extent, variableName, splatted)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="variableName" Type="System.String" />
        <Parameter Name="splatted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the variable.</param>
        <param name="variableName">
            The name of the variable.  A leading '$' or '@' is not removed, those characters are assumed to be part of
            the variable name.
            </param>
        <param name="splatted">True if splatting, like <c>@PSBoundParameters</c>, false otherwise, like <c>$false</c>.</param>
        <summary>
            Construct a variable reference.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="variableName" /> is null, or if <paramref name="variableName" />
            is an empty string.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.VariableExpressionAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="variableExpressionAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the VariableExpressionAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstantVariable">
      <MemberSignature Language="C#" Value="public bool IsConstantVariable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsConstantVariable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.VariableExpressionAst.IsConstantVariable" />
      <MemberSignature Language="VB.NET" Value="Public Function IsConstantVariable () As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsConstantVariable : unit -&gt; bool" Usage="variableExpressionAst.IsConstantVariable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Check if the variable is one of $true, $false and $null
            </summary>
        <returns>
            True if it is a constant variable
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Splatted">
      <MemberSignature Language="C#" Value="public bool Splatted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Splatted" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.VariableExpressionAst.Splatted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Splatted As Boolean" />
      <MemberSignature Language="F#" Value="member this.Splatted : bool" Usage="System.Management.Automation.Language.VariableExpressionAst.Splatted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if splatting syntax was used, false otherwise.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariablePath">
      <MemberSignature Language="C#" Value="public System.Management.Automation.VariablePath VariablePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.VariablePath VariablePath" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.VariableExpressionAst.VariablePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VariablePath As VariablePath" />
      <MemberSignature Language="F#" Value="member this.VariablePath : System.Management.Automation.VariablePath" Usage="System.Management.Automation.Language.VariableExpressionAst.VariablePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.VariablePath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the variable.  This property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>