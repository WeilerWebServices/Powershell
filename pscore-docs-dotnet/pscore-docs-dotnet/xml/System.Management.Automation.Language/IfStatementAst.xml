<Type Name="IfStatementAst" FullName="System.Management.Automation.Language.IfStatementAst">
  <TypeSignature Language="C#" Value="public class IfStatementAst : System.Management.Automation.Language.StatementAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IfStatementAst extends System.Management.Automation.Language.StatementAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.IfStatementAst" />
  <TypeSignature Language="VB.NET" Value="Public Class IfStatementAst&#xA;Inherits StatementAst" />
  <TypeSignature Language="F#" Value="type IfStatementAst = class&#xA;    inherit StatementAst" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.StatementAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents an if statement.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IfStatementAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.Management.Automation.Language.PipelineBaseAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt; clauses, System.Management.Automation.Language.StatementBlockAst elseClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.Management.Automation.Language.PipelineBaseAst, class System.Management.Automation.Language.StatementBlockAst&gt;&gt; clauses, class System.Management.Automation.Language.StatementBlockAst elseClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.IfStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Tuple{System.Management.Automation.Language.PipelineBaseAst,System.Management.Automation.Language.StatementBlockAst}},System.Management.Automation.Language.StatementBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, clauses As IEnumerable(Of Tuple(Of PipelineBaseAst, StatementBlockAst)), elseClause As StatementBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.IfStatementAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.PipelineBaseAst * System.Management.Automation.Language.StatementBlockAst&gt; * System.Management.Automation.Language.StatementBlockAst -&gt; System.Management.Automation.Language.IfStatementAst" Usage="new System.Management.Automation.Language.IfStatementAst (extent, clauses, elseClause)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="clauses" Type="System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.Management.Automation.Language.PipelineBaseAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt;" />
        <Parameter Name="elseClause" Type="System.Management.Automation.Language.StatementBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">
            The extent of the statement, starting with the if keyword, ending at the closing curly of the last clause.
            </param>
        <param name="clauses">
            A non-empty collection of pairs of condition expressions and statement blocks.
            </param>
        <param name="elseClause">The else clause, or null if no clause was specified.</param>
        <summary>
            Construct an if statement.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">If <paramref name="extent" /> is null.</exception>
        <exception cref="T:System.Management.Automation.PSArgumentException">If <paramref name="clauses" /> is null or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clauses">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;Tuple&lt;System.Management.Automation.Language.PipelineBaseAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt; Clauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Tuple`2&lt;class System.Management.Automation.Language.PipelineBaseAst, class System.Management.Automation.Language.StatementBlockAst&gt;&gt; Clauses" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.IfStatementAst.Clauses" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clauses As ReadOnlyCollection(Of Tuple(Of PipelineBaseAst, StatementBlockAst))" />
      <MemberSignature Language="F#" Value="member this.Clauses : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.PipelineBaseAst * System.Management.Automation.Language.StatementBlockAst&gt;" Usage="System.Management.Automation.Language.IfStatementAst.Clauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Tuple&lt;System.Management.Automation.Language.PipelineBaseAst,System.Management.Automation.Language.StatementBlockAst&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The asts representing a pair of (condition,statements) that are tested, in sequence until the first condition
            tests true, in which case it's statements are executed, otherwise the <see cref="P:System.Management.Automation.Language.IfStatementAst.ElseClause" />, if any, is
            executed.  This property is never null and always has at least 1 value.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.IfStatementAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="ifStatementAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the IfStatementAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseClause">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StatementBlockAst ElseClause { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StatementBlockAst ElseClause" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.IfStatementAst.ElseClause" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElseClause As StatementBlockAst" />
      <MemberSignature Language="F#" Value="member this.ElseClause : System.Management.Automation.Language.StatementBlockAst" Usage="System.Management.Automation.Language.IfStatementAst.ElseClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StatementBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast for the else clause, or null if no else clause is specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>