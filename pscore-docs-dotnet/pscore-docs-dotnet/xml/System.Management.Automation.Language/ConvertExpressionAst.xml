<Type Name="ConvertExpressionAst" FullName="System.Management.Automation.Language.ConvertExpressionAst">
  <TypeSignature Language="C#" Value="public class ConvertExpressionAst : System.Management.Automation.Language.AttributedExpressionAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConvertExpressionAst extends System.Management.Automation.Language.AttributedExpressionAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.ConvertExpressionAst" />
  <TypeSignature Language="VB.NET" Value="Public Class ConvertExpressionAst&#xA;Inherits AttributedExpressionAst" />
  <TypeSignature Language="F#" Value="type ConvertExpressionAst = class&#xA;    inherit AttributedExpressionAst&#xA;    interface ISupportsAssignment" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.AttributedExpressionAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents a cast expression, e.g. <c>[wmiclass]"Win32_Process"</c>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConvertExpressionAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.TypeConstraintAst typeConstraint, System.Management.Automation.Language.ExpressionAst child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.TypeConstraintAst typeConstraint, class System.Management.Automation.Language.ExpressionAst child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ConvertExpressionAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.TypeConstraintAst,System.Management.Automation.Language.ExpressionAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, typeConstraint As TypeConstraintAst, child As ExpressionAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ConvertExpressionAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.TypeConstraintAst * System.Management.Automation.Language.ExpressionAst -&gt; System.Management.Automation.Language.ConvertExpressionAst" Usage="new System.Management.Automation.Language.ConvertExpressionAst (extent, typeConstraint, child)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="typeConstraint" Type="System.Management.Automation.Language.TypeConstraintAst" />
        <Parameter Name="child" Type="System.Management.Automation.Language.ExpressionAst" />
      </Parameters>
      <Docs>
        <param name="extent">
            The extent of the expression, starting with the type literal and ending after the expression being converted.
            </param>
        <param name="typeConstraint">The type to convert to.</param>
        <param name="child">The expression being converted.</param>
        <summary>
            Construct a cast expression.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" />, <paramref name="typeConstraint" />, or <paramref name="child" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ConvertExpressionAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="convertExpressionAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the ConvertExpressionAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticType">
      <MemberSignature Language="C#" Value="public override Type StaticType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type StaticType" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ConvertExpressionAst.StaticType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property StaticType As Type" />
      <MemberSignature Language="F#" Value="member this.StaticType : Type" Usage="System.Management.Automation.Language.ConvertExpressionAst.StaticType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The static type produced after the cast is normally the type named by <see cref="P:System.Management.Automation.Language.ConvertExpressionAst.Type" />, but in some cases
            it may not be, in which, <see cref="T:System.Object" /> is assumed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.TypeConstraintAst Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.TypeConstraintAst Type" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ConvertExpressionAst.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As TypeConstraintAst" />
      <MemberSignature Language="F#" Value="member this.Type : System.Management.Automation.Language.TypeConstraintAst" Usage="System.Management.Automation.Language.ConvertExpressionAst.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.TypeConstraintAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The type to convert to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>