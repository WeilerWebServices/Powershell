<Type Name="BinaryExpressionAst" FullName="System.Management.Automation.Language.BinaryExpressionAst">
  <TypeSignature Language="C#" Value="public class BinaryExpressionAst : System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryExpressionAst extends System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.BinaryExpressionAst" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryExpressionAst&#xA;Inherits ExpressionAst" />
  <TypeSignature Language="F#" Value="type BinaryExpressionAst = class&#xA;    inherit ExpressionAst" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.ExpressionAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast representing a binary expression, e.g. <c>$a + $b</c>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryExpressionAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.ExpressionAst left, System.Management.Automation.Language.TokenKind operator, System.Management.Automation.Language.ExpressionAst right, System.Management.Automation.Language.IScriptExtent errorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.ExpressionAst left, valuetype System.Management.Automation.Language.TokenKind operator, class System.Management.Automation.Language.ExpressionAst right, class System.Management.Automation.Language.IScriptExtent errorPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.BinaryExpressionAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.TokenKind,System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.IScriptExtent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, left As ExpressionAst, operator As TokenKind, right As ExpressionAst, errorPosition As IScriptExtent)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.BinaryExpressionAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.ExpressionAst * System.Management.Automation.Language.TokenKind * System.Management.Automation.Language.ExpressionAst * System.Management.Automation.Language.IScriptExtent -&gt; System.Management.Automation.Language.BinaryExpressionAst" Usage="new System.Management.Automation.Language.BinaryExpressionAst (extent, left, operator, right, errorPosition)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="left" Type="System.Management.Automation.Language.ExpressionAst" />
        <Parameter Name="operator" Type="System.Management.Automation.Language.TokenKind" />
        <Parameter Name="right" Type="System.Management.Automation.Language.ExpressionAst" />
        <Parameter Name="errorPosition" Type="System.Management.Automation.Language.IScriptExtent" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the expression.</param>
        <param name="left">The left hand operand.</param>
        <param name="operator">The binary operator.</param>
        <param name="right">The right hand operand.</param>
        <param name="errorPosition">
            The position to report if an error occurs at runtime while evaluating the binary operation.
            </param>
        <summary>
            Construct a binary expression.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="operator" /> is not a valid binary operator.
            </exception>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" />, <paramref name="left" />, <paramref name="right" />,
            or <paramref name="errorPosition" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.BinaryExpressionAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="binaryExpressionAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the BinaryExpressionAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorPosition">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.IScriptExtent ErrorPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.IScriptExtent ErrorPosition" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.BinaryExpressionAst.ErrorPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorPosition As IScriptExtent" />
      <MemberSignature Language="F#" Value="member this.ErrorPosition : System.Management.Automation.Language.IScriptExtent" Usage="System.Management.Automation.Language.BinaryExpressionAst.ErrorPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.IScriptExtent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The position to report an error if an error occurs at runtime.  The property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.ExpressionAst Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.ExpressionAst Left" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.BinaryExpressionAst.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As ExpressionAst" />
      <MemberSignature Language="F#" Value="member this.Left : System.Management.Automation.Language.ExpressionAst" Usage="System.Management.Automation.Language.BinaryExpressionAst.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.ExpressionAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast for the left hand side of the binary expression.  The property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.TokenKind Operator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.Language.TokenKind Operator" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.BinaryExpressionAst.Operator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Operator As TokenKind" />
      <MemberSignature Language="F#" Value="member this.Operator : System.Management.Automation.Language.TokenKind" Usage="System.Management.Automation.Language.BinaryExpressionAst.Operator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.TokenKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The operator token kind.  The value returned is always a binary operator.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.ExpressionAst Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.ExpressionAst Right" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.BinaryExpressionAst.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As ExpressionAst" />
      <MemberSignature Language="F#" Value="member this.Right : System.Management.Automation.Language.ExpressionAst" Usage="System.Management.Automation.Language.BinaryExpressionAst.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.ExpressionAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast for the right hand side of the binary expression.  The property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticType">
      <MemberSignature Language="C#" Value="public override Type StaticType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type StaticType" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.BinaryExpressionAst.StaticType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property StaticType As Type" />
      <MemberSignature Language="F#" Value="member this.StaticType : Type" Usage="System.Management.Automation.Language.BinaryExpressionAst.StaticType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The result type of the operation.  For most binary operators, the type is unknown until runtime, but
            xor always results in <c>typeof(bool)</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>