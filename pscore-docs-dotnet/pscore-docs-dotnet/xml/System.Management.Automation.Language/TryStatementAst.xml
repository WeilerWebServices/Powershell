<Type Name="TryStatementAst" FullName="System.Management.Automation.Language.TryStatementAst">
  <TypeSignature Language="C#" Value="public class TryStatementAst : System.Management.Automation.Language.StatementAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TryStatementAst extends System.Management.Automation.Language.StatementAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.TryStatementAst" />
  <TypeSignature Language="VB.NET" Value="Public Class TryStatementAst&#xA;Inherits StatementAst" />
  <TypeSignature Language="F#" Value="type TryStatementAst = class&#xA;    inherit StatementAst" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.StatementAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents a try statement.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TryStatementAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.StatementBlockAst body, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.CatchClauseAst&gt; catchClauses, System.Management.Automation.Language.StatementBlockAst finally);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.StatementBlockAst body, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.CatchClauseAst&gt; catchClauses, class System.Management.Automation.Language.StatementBlockAst finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.TryStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.StatementBlockAst,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.CatchClauseAst},System.Management.Automation.Language.StatementBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, body As StatementBlockAst, catchClauses As IEnumerable(Of CatchClauseAst), finally As StatementBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.TryStatementAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.StatementBlockAst * seq&lt;System.Management.Automation.Language.CatchClauseAst&gt; * System.Management.Automation.Language.StatementBlockAst -&gt; System.Management.Automation.Language.TryStatementAst" Usage="new System.Management.Automation.Language.TryStatementAst (extent, body, catchClauses, finally)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="body" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="catchClauses" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.CatchClauseAst&gt;" />
        <Parameter Name="finally" Type="System.Management.Automation.Language.StatementBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">
            The extent of the try statement, from the try keyword to the closing curly of the last catch or finally.
            </param>
        <param name="body">The region of guarded code.</param>
        <param name="catchClauses">The list of catch clauses, may be null.</param>
        <param name="finally">The finally clause, may be null.</param>
        <summary>
            Construct a try statement ast.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="body" /> is null.
            </exception>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="catchClauses" /> is null or is an empty collection and <paramref name="finally" /> is also
            null, then an exception is also raised as the try block must have a finally or at least one catch.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StatementBlockAst Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StatementBlockAst Body" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.TryStatementAst.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As StatementBlockAst" />
      <MemberSignature Language="F#" Value="member this.Body : System.Management.Automation.Language.StatementBlockAst" Usage="System.Management.Automation.Language.TryStatementAst.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StatementBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The body of the try statement.  This property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchClauses">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.CatchClauseAst&gt; CatchClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Management.Automation.Language.CatchClauseAst&gt; CatchClauses" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.TryStatementAst.CatchClauses" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CatchClauses As ReadOnlyCollection(Of CatchClauseAst)" />
      <MemberSignature Language="F#" Value="member this.CatchClauses : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.CatchClauseAst&gt;" Usage="System.Management.Automation.Language.TryStatementAst.CatchClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.CatchClauseAst&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A collection of catch clauses, which is empty if there are no catches.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.TryStatementAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="tryStatementAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the TryStatementAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StatementBlockAst Finally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StatementBlockAst Finally" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.TryStatementAst.Finally" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Finally As StatementBlockAst" />
      <MemberSignature Language="F#" Value="member this.Finally : System.Management.Automation.Language.StatementBlockAst" Usage="System.Management.Automation.Language.TryStatementAst.Finally" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StatementBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast for the finally block, or null if no finally block was specified, in which case <see cref="P:System.Management.Automation.Language.TryStatementAst.CatchClauses" />
            is a non-null, non-empty collection.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>