<Type Name="IndexExpressionAst" FullName="System.Management.Automation.Language.IndexExpressionAst">
  <TypeSignature Language="C#" Value="public class IndexExpressionAst : System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IndexExpressionAst extends System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.IndexExpressionAst" />
  <TypeSignature Language="VB.NET" Value="Public Class IndexExpressionAst&#xA;Inherits ExpressionAst" />
  <TypeSignature Language="F#" Value="type IndexExpressionAst = class&#xA;    inherit ExpressionAst&#xA;    interface ISupportsAssignment" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.ExpressionAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents an index expression, e.g. <c>$a[0]</c>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexExpressionAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.ExpressionAst target, System.Management.Automation.Language.ExpressionAst index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.ExpressionAst target, class System.Management.Automation.Language.ExpressionAst index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.IndexExpressionAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.ExpressionAst,System.Management.Automation.Language.ExpressionAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, target As ExpressionAst, index As ExpressionAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.IndexExpressionAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.ExpressionAst * System.Management.Automation.Language.ExpressionAst -&gt; System.Management.Automation.Language.IndexExpressionAst" Usage="new System.Management.Automation.Language.IndexExpressionAst (extent, target, index)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="target" Type="System.Management.Automation.Language.ExpressionAst" />
        <Parameter Name="index" Type="System.Management.Automation.Language.ExpressionAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the expression.</param>
        <param name="target">The expression being indexed.</param>
        <param name="index">The index expression.</param>
        <summary>
            Construct an ast for an index expression.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" />, <paramref name="target" />, or <paramref name="index" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.IndexExpressionAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="indexExpressionAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the IndexExpressionAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.ExpressionAst Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.ExpressionAst Index" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.IndexExpressionAst.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As ExpressionAst" />
      <MemberSignature Language="F#" Value="member this.Index : System.Management.Automation.Language.ExpressionAst" Usage="System.Management.Automation.Language.IndexExpressionAst.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.ExpressionAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return the ast for the index expression.  This value is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.ExpressionAst Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.ExpressionAst Target" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.IndexExpressionAst.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As ExpressionAst" />
      <MemberSignature Language="F#" Value="member this.Target : System.Management.Automation.Language.ExpressionAst" Usage="System.Management.Automation.Language.IndexExpressionAst.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.ExpressionAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return the ast for the expression being indexed.  This value is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>