<Type Name="ArrayLiteralAst" FullName="System.Management.Automation.Language.ArrayLiteralAst">
  <TypeSignature Language="C#" Value="public class ArrayLiteralAst : System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ArrayLiteralAst extends System.Management.Automation.Language.ExpressionAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.ArrayLiteralAst" />
  <TypeSignature Language="VB.NET" Value="Public Class ArrayLiteralAst&#xA;Inherits ExpressionAst" />
  <TypeSignature Language="F#" Value="type ArrayLiteralAst = class&#xA;    inherit ExpressionAst&#xA;    interface ISupportsAssignment" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.ExpressionAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast that represents an array literal expression, e.g. <c>1,2,3</c>.  An array expression, e.g. <c>@(dir)</c>,
            is represented by <see cref="T:System.Management.Automation.Language.ArrayExpressionAst" />.  An array literal expression can be constructed from a single
            element, as happens with the unary comma operator, e.g. <c>,4</c>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayLiteralAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IList&lt;System.Management.Automation.Language.ExpressionAst&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IList`1&lt;class System.Management.Automation.Language.ExpressionAst&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ArrayLiteralAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IList{System.Management.Automation.Language.ExpressionAst})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, elements As IList(Of ExpressionAst))" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ArrayLiteralAst : System.Management.Automation.Language.IScriptExtent * System.Collections.Generic.IList&lt;System.Management.Automation.Language.ExpressionAst&gt; -&gt; System.Management.Automation.Language.ArrayLiteralAst" Usage="new System.Management.Automation.Language.ArrayLiteralAst (extent, elements)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="elements" Type="System.Collections.Generic.IList&lt;System.Management.Automation.Language.ExpressionAst&gt;" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of all of the elements.</param>
        <param name="elements">The collection of asts that represent the array literal.</param>
        <summary>
            Construct an array literal expression.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> is null.
            </exception>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="elements" /> is null or is an empty collection.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ArrayLiteralAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="arrayLiteralAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the ArrayLiteralAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.ExpressionAst&gt; Elements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Management.Automation.Language.ExpressionAst&gt; Elements" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ArrayLiteralAst.Elements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elements As ReadOnlyCollection(Of ExpressionAst)" />
      <MemberSignature Language="F#" Value="member this.Elements : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.ExpressionAst&gt;" Usage="System.Management.Automation.Language.ArrayLiteralAst.Elements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.ExpressionAst&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The non-empty collection of asts of the elements of the array, or null if no elements were specified (e.g. <c>@()</c>).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticType">
      <MemberSignature Language="C#" Value="public override Type StaticType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type StaticType" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ArrayLiteralAst.StaticType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property StaticType As Type" />
      <MemberSignature Language="F#" Value="member this.StaticType : Type" Usage="System.Management.Automation.Language.ArrayLiteralAst.StaticType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The result of an <see cref="T:System.Management.Automation.Language.ArrayLiteralAst" /> is always <c>typeof(object[])</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>