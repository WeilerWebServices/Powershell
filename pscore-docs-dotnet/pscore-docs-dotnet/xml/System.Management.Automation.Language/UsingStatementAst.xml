<Type Name="UsingStatementAst" FullName="System.Management.Automation.Language.UsingStatementAst">
  <TypeSignature Language="C#" Value="public class UsingStatementAst : System.Management.Automation.Language.StatementAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UsingStatementAst extends System.Management.Automation.Language.StatementAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.UsingStatementAst" />
  <TypeSignature Language="VB.NET" Value="Public Class UsingStatementAst&#xA;Inherits StatementAst" />
  <TypeSignature Language="F#" Value="type UsingStatementAst = class&#xA;    inherit StatementAst" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.StatementAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast representing a using statement.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UsingStatementAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.HashtableAst moduleSpecification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.HashtableAst moduleSpecification) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.UsingStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.HashtableAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, moduleSpecification As HashtableAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.UsingStatementAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.HashtableAst -&gt; System.Management.Automation.Language.UsingStatementAst" Usage="new System.Management.Automation.Language.UsingStatementAst (extent, moduleSpecification)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="moduleSpecification" Type="System.Management.Automation.Language.HashtableAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the using statement including the using keyword.</param>
        <param name="moduleSpecification">HashtableAst that describes <see cref="T:Microsoft.PowerShell.Commands.ModuleSpecification" /> object</param>
        <summary>
            Construct a simple (one that is not a form of an alias) using module statement with module specification as hashtable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UsingStatementAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.StringConstantExpressionAst aliasName, System.Management.Automation.Language.HashtableAst moduleSpecification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.StringConstantExpressionAst aliasName, class System.Management.Automation.Language.HashtableAst moduleSpecification) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.UsingStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.StringConstantExpressionAst,System.Management.Automation.Language.HashtableAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, aliasName As StringConstantExpressionAst, moduleSpecification As HashtableAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.UsingStatementAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.StringConstantExpressionAst * System.Management.Automation.Language.HashtableAst -&gt; System.Management.Automation.Language.UsingStatementAst" Usage="new System.Management.Automation.Language.UsingStatementAst (extent, aliasName, moduleSpecification)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="aliasName" Type="System.Management.Automation.Language.StringConstantExpressionAst" />
        <Parameter Name="moduleSpecification" Type="System.Management.Automation.Language.HashtableAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the using statement including the using keyword.</param>
        <param name="aliasName">The name of the alias.</param>
        <param name="moduleSpecification">The module being aliased. Hashtable that describes <see cref="T:Microsoft.PowerShell.Commands.ModuleSpecification" /></param>
        <summary>
            Construct a using module statement that aliases an item with module specification as hashtable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UsingStatementAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.UsingStatementKind kind, System.Management.Automation.Language.StringConstantExpressionAst name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, valuetype System.Management.Automation.Language.UsingStatementKind kind, class System.Management.Automation.Language.StringConstantExpressionAst name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.UsingStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.UsingStatementKind,System.Management.Automation.Language.StringConstantExpressionAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, kind As UsingStatementKind, name As StringConstantExpressionAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.UsingStatementAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.UsingStatementKind * System.Management.Automation.Language.StringConstantExpressionAst -&gt; System.Management.Automation.Language.UsingStatementAst" Usage="new System.Management.Automation.Language.UsingStatementAst (extent, kind, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="kind" Type="System.Management.Automation.Language.UsingStatementKind" />
        <Parameter Name="name" Type="System.Management.Automation.Language.StringConstantExpressionAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the using statement including the using keyword.</param>
        <param name="kind">
            The kind of using statement, cannot be <see cref="F:System.Management.Automation.Language.UsingStatementKind.Command" />
            or <see cref="F:System.Management.Automation.Language.UsingStatementKind.Type" /></param>
        <param name="name">The item (assembly, module, or namespace) being used.</param>
        <summary>
            Construct a simple using statement (one that is not a form of an alias).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UsingStatementAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.UsingStatementKind kind, System.Management.Automation.Language.StringConstantExpressionAst aliasName, System.Management.Automation.Language.StringConstantExpressionAst resolvedAliasAst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, valuetype System.Management.Automation.Language.UsingStatementKind kind, class System.Management.Automation.Language.StringConstantExpressionAst aliasName, class System.Management.Automation.Language.StringConstantExpressionAst resolvedAliasAst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.UsingStatementAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.UsingStatementKind,System.Management.Automation.Language.StringConstantExpressionAst,System.Management.Automation.Language.StringConstantExpressionAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, kind As UsingStatementKind, aliasName As StringConstantExpressionAst, resolvedAliasAst As StringConstantExpressionAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.UsingStatementAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.UsingStatementKind * System.Management.Automation.Language.StringConstantExpressionAst * System.Management.Automation.Language.StringConstantExpressionAst -&gt; System.Management.Automation.Language.UsingStatementAst" Usage="new System.Management.Automation.Language.UsingStatementAst (extent, kind, aliasName, resolvedAliasAst)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="kind" Type="System.Management.Automation.Language.UsingStatementKind" />
        <Parameter Name="aliasName" Type="System.Management.Automation.Language.StringConstantExpressionAst" />
        <Parameter Name="resolvedAliasAst" Type="System.Management.Automation.Language.StringConstantExpressionAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the using statement including the using keyword.</param>
        <param name="kind">
            The kind of using statement, cannot be <see cref="F:System.Management.Automation.Language.UsingStatementKind.Assembly" />.
            </param>
        <param name="aliasName">The name of the alias.</param>
        <param name="resolvedAliasAst">The item being aliased.</param>
        <summary>
            Construct a using statement that aliases an item.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Alias">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StringConstantExpressionAst Alias { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StringConstantExpressionAst Alias" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.UsingStatementAst.Alias" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Alias As StringConstantExpressionAst" />
      <MemberSignature Language="F#" Value="member this.Alias : System.Management.Automation.Language.StringConstantExpressionAst" Usage="System.Management.Automation.Language.UsingStatementAst.Alias" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StringConstantExpressionAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the item being aliased.
            This property is mutually exclusive with <see cref="P:System.Management.Automation.Language.UsingStatementAst.ModuleSpecification" /> property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.UsingStatementAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="usingStatementAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the UsingStatementAst
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleSpecification">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.HashtableAst ModuleSpecification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.HashtableAst ModuleSpecification" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.UsingStatementAst.ModuleSpecification" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleSpecification As HashtableAst" />
      <MemberSignature Language="F#" Value="member this.ModuleSpecification : System.Management.Automation.Language.HashtableAst" Usage="System.Management.Automation.Language.UsingStatementAst.ModuleSpecification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.HashtableAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Hashtable that can be converted to <see cref="T:Microsoft.PowerShell.Commands.ModuleSpecification" />. Only for 'using module' case, otherwise null.
            This property is mutually exclusive with <see cref="P:System.Management.Automation.Language.UsingStatementAst.Alias" /> property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.StringConstantExpressionAst Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.StringConstantExpressionAst Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.UsingStatementAst.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As StringConstantExpressionAst" />
      <MemberSignature Language="F#" Value="member this.Name : System.Management.Automation.Language.StringConstantExpressionAst" Usage="System.Management.Automation.Language.UsingStatementAst.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.StringConstantExpressionAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When <see cref="P:System.Management.Automation.Language.UsingStatementAst.Alias" /> is null or <see cref="P:System.Management.Automation.Language.UsingStatementAst.ModuleSpecification" /> is null, the item being used, otherwise the alias name.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatementKind">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.UsingStatementKind UsingStatementKind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.Language.UsingStatementKind UsingStatementKind" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.UsingStatementAst.UsingStatementKind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UsingStatementKind As UsingStatementKind" />
      <MemberSignature Language="F#" Value="member this.UsingStatementKind : System.Management.Automation.Language.UsingStatementKind" Usage="System.Management.Automation.Language.UsingStatementAst.UsingStatementKind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.UsingStatementKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The kind of using statement.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>