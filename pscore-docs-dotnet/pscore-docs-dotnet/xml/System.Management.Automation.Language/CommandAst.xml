<Type Name="CommandAst" FullName="System.Management.Automation.Language.CommandAst">
  <TypeSignature Language="C#" Value="public class CommandAst : System.Management.Automation.Language.CommandBaseAst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandAst extends System.Management.Automation.Language.CommandBaseAst" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.CommandAst" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandAst&#xA;Inherits CommandBaseAst" />
  <TypeSignature Language="F#" Value="type CommandAst = class&#xA;    inherit CommandBaseAst" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.CommandBaseAst</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The ast for a command invocation, e.g. <c>dir *.ps1</c>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.CommandElementAst&gt; commandElements, System.Management.Automation.Language.TokenKind invocationOperator, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.RedirectionAst&gt; redirections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.CommandElementAst&gt; commandElements, valuetype System.Management.Automation.Language.TokenKind invocationOperator, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.RedirectionAst&gt; redirections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.CommandAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.CommandElementAst},System.Management.Automation.Language.TokenKind,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.RedirectionAst})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, commandElements As IEnumerable(Of CommandElementAst), invocationOperator As TokenKind, redirections As IEnumerable(Of RedirectionAst))" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.CommandAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.CommandElementAst&gt; * System.Management.Automation.Language.TokenKind * seq&lt;System.Management.Automation.Language.RedirectionAst&gt; -&gt; System.Management.Automation.Language.CommandAst" Usage="new System.Management.Automation.Language.CommandAst (extent, commandElements, invocationOperator, redirections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="commandElements" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.CommandElementAst&gt;" />
        <Parameter Name="invocationOperator" Type="System.Management.Automation.Language.TokenKind" />
        <Parameter Name="redirections" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.RedirectionAst&gt;" />
      </Parameters>
      <Docs>
        <param name="extent">
            The extent of the command, starting with either the optional invocation operator '&amp;' or '.' or the command name
            and ending with the last command element.
            </param>
        <param name="commandElements">The elements of the command (command name, parameters and expressions.)</param>
        <param name="invocationOperator">The invocation operator that was used, if any.</param>
        <param name="redirections">The redirections for the command, may be null.</param>
        <summary>
            Construct a command invocation.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> is null.
            </exception>
        <exception cref="T:System.Management.Automation.PSArgumentException">
            If <paramref name="commandElements" /> is null or is an empty collection.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CommandElements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.CommandElementAst&gt; CommandElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Management.Automation.Language.CommandElementAst&gt; CommandElements" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.CommandAst.CommandElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandElements As ReadOnlyCollection(Of CommandElementAst)" />
      <MemberSignature Language="F#" Value="member this.CommandElements : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.CommandElementAst&gt;" Usage="System.Management.Automation.Language.CommandAst.CommandElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.CommandElementAst&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A non-empty collection of command elements.  This property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.CommandAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="commandAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the CommandAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefiningKeyword">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.DynamicKeyword DefiningKeyword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.DynamicKeyword DefiningKeyword" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.CommandAst.DefiningKeyword" />
      <MemberSignature Language="VB.NET" Value="Public Property DefiningKeyword As DynamicKeyword" />
      <MemberSignature Language="F#" Value="member this.DefiningKeyword : System.Management.Automation.Language.DynamicKeyword with get, set" Usage="System.Management.Automation.Language.CommandAst.DefiningKeyword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.DynamicKeyword</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If this command was synthesized out of a dynamic keyword, this property will point to the DynamicKeyword
            data structure that was used to create this command.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommandName">
      <MemberSignature Language="C#" Value="public string GetCommandName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCommandName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.CommandAst.GetCommandName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCommandName () As String" />
      <MemberSignature Language="F#" Value="member this.GetCommandName : unit -&gt; string" Usage="commandAst.GetCommandName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Returns the name of the command invoked by this ast.</para>
          <para>This command name may not be known statically, in which case null is returned.</para>
          <para>
             For example, if the command name is in a variable: <example>&amp; $foo</example>, then the parser cannot know which command is executed.
             Similarly, if the command is being invoked in a module: <example>&amp; (gmo SomeModule) Bar</example>, then the parser does not know the
             command name is Bar because the parser can't determine that the expression <code>(gmo SomeModule)</code> returns a module instead
             of a string.
             </para>
        </summary>
        <returns>The command name, if known, null otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationOperator">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.TokenKind InvocationOperator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.Language.TokenKind InvocationOperator" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.CommandAst.InvocationOperator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvocationOperator As TokenKind" />
      <MemberSignature Language="F#" Value="member this.InvocationOperator : System.Management.Automation.Language.TokenKind" Usage="System.Management.Automation.Language.CommandAst.InvocationOperator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.TokenKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The invocation operator (either <see cref="F:System.Management.Automation.Language.TokenKind.Dot" /> or <see cref="F:System.Management.Automation.Language.TokenKind.Ampersand" />) if one was specified,
            otherwise the value is <see cref="F:System.Management.Automation.Language.TokenKind.Unknown" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>