<Type Name="ScriptBlockAst" FullName="System.Management.Automation.Language.ScriptBlockAst">
  <TypeSignature Language="C#" Value="public class ScriptBlockAst : System.Management.Automation.Language.Ast" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScriptBlockAst extends System.Management.Automation.Language.Ast" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Language.ScriptBlockAst" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptBlockAst&#xA;Inherits Ast" />
  <TypeSignature Language="F#" Value="type ScriptBlockAst = class&#xA;    inherit Ast&#xA;    interface IParameterMetadataProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.Language.Ast</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A ScriptBlockAst is the root ast node for a complete script.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.StatementBlockAst statements, bool isFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.StatementBlockAst statements, bool isFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.StatementBlockAst,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, paramBlock As ParamBlockAst, statements As StatementBlockAst, isFilter As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.StatementBlockAst * bool -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, paramBlock, statements, isFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="statements" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="isFilter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="statements">
            The statements that go in the end block if <paramref name="isFilter" /> is false, or the
            process block if <paramref name="isFilter" /> is true.
            </param>
        <param name="isFilter">True if the script block is a filter, false if it is a function or workflow.</param>
        <summary>
            Construct a ScriptBlockAst that does not use explicitly named blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="statements" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.List&lt;System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.StatementBlockAst statements, bool isFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.List`1&lt;class System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.StatementBlockAst statements, bool isFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.List{System.Management.Automation.Language.UsingStatementAst},System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.StatementBlockAst,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, usingStatements As List(Of UsingStatementAst), paramBlock As ParamBlockAst, statements As StatementBlockAst, isFilter As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * System.Collections.Generic.List&lt;System.Management.Automation.Language.UsingStatementAst&gt; * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.StatementBlockAst * bool -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, usingStatements, paramBlock, statements, isFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="usingStatements" Type="System.Collections.Generic.List&lt;System.Management.Automation.Language.UsingStatementAst&gt;" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="statements" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="isFilter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="usingStatements">The list of using statments, may be null.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="statements">
            The statements that go in the end block if <paramref name="isFilter" /> is false, or the
            process block if <paramref name="isFilter" /> is true.
            </param>
        <param name="isFilter">True if the script block is a filter, false if it is a function or workflow.</param>
        <summary>
            Construct a ScriptBlockAst that does not use explicitly named blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="statements" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.StatementBlockAst,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, paramBlock As ParamBlockAst, statements As StatementBlockAst, isFilter As Boolean, isConfiguration As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.StatementBlockAst * bool * bool -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, paramBlock, statements, isFilter, isConfiguration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="statements" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="isFilter" Type="System.Boolean" />
        <Parameter Name="isConfiguration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="statements">
            The statements that go in the end block if <paramref name="isFilter" /> is false, or the
            process block if <paramref name="isFilter" /> is true.
            </param>
        <param name="isFilter">True if the script block is a filter, false if it is a function or workflow.</param>
        <param name="isConfiguration">True if the script block is a configuration</param>
        <summary>
            Construct a ScriptBlockAst that does not use explicitly named blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="statements" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.AttributeAst&gt; attributes, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.AttributeAst&gt; attributes, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.AttributeAst},System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.StatementBlockAst,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, attributes As IEnumerable(Of AttributeAst), paramBlock As ParamBlockAst, statements As StatementBlockAst, isFilter As Boolean, isConfiguration As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.AttributeAst&gt; * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.StatementBlockAst * bool * bool -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, attributes, paramBlock, statements, isFilter, isConfiguration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.AttributeAst&gt;" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="statements" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="isFilter" Type="System.Boolean" />
        <Parameter Name="isConfiguration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="attributes">The attributes for the script block.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="statements">
            The statements that go in the end block if <paramref name="isFilter" /> is false, or the
            process block if <paramref name="isFilter" /> is true.
            </param>
        <param name="isFilter">True if the script block is a filter, false if it is a function or workflow.</param>
        <param name="isConfiguration">True if the script block is a configuration</param>
        <summary>
            Construct a ScriptBlockAst that does not use explicitly named blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="statements" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.UsingStatementAst},System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.StatementBlockAst,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, usingStatements As IEnumerable(Of UsingStatementAst), paramBlock As ParamBlockAst, statements As StatementBlockAst, isFilter As Boolean, isConfiguration As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.UsingStatementAst&gt; * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.StatementBlockAst * bool * bool -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, usingStatements, paramBlock, statements, isFilter, isConfiguration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="usingStatements" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt;" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="statements" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="isFilter" Type="System.Boolean" />
        <Parameter Name="isConfiguration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="usingStatements">The list of using statments, may be null.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="statements">
            The statements that go in the end block if <paramref name="isFilter" /> is false, or the
            process block if <paramref name="isFilter" /> is true.
            </param>
        <param name="isFilter">True if the script block is a filter, false if it is a function or workflow.</param>
        <param name="isConfiguration">True if the script block is a configuration</param>
        <summary>
            Construct a ScriptBlockAst that does not use explicitly named blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="statements" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.NamedBlockAst beginBlock, System.Management.Automation.Language.NamedBlockAst processBlock, System.Management.Automation.Language.NamedBlockAst endBlock, System.Management.Automation.Language.NamedBlockAst dynamicParamBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.NamedBlockAst beginBlock, class System.Management.Automation.Language.NamedBlockAst processBlock, class System.Management.Automation.Language.NamedBlockAst endBlock, class System.Management.Automation.Language.NamedBlockAst dynamicParamBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, paramBlock As ParamBlockAst, beginBlock As NamedBlockAst, processBlock As NamedBlockAst, endBlock As NamedBlockAst, dynamicParamBlock As NamedBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, paramBlock, beginBlock, processBlock, endBlock, dynamicParamBlock)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="beginBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="processBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="endBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="dynamicParamBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="beginBlock">The ast for the begin block, may be null.</param>
        <param name="processBlock">The ast for the process block, may be null.</param>
        <param name="endBlock">The ast for the end block, may be null.</param>
        <param name="dynamicParamBlock">The ast for the dynamicparam block, may be null.</param>
        <summary>
            Construct a ScriptBlockAst that uses explicitly named begin/process/end blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.AttributeAst&gt; attributes, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.AttributeAst&gt; attributes, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.StatementBlockAst statements, bool isFilter, bool isConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.UsingStatementAst},System.Collections.Generic.IEnumerable{System.Management.Automation.Language.AttributeAst},System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.StatementBlockAst,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, usingStatements As IEnumerable(Of UsingStatementAst), attributes As IEnumerable(Of AttributeAst), paramBlock As ParamBlockAst, statements As StatementBlockAst, isFilter As Boolean, isConfiguration As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.UsingStatementAst&gt; * seq&lt;System.Management.Automation.Language.AttributeAst&gt; * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.StatementBlockAst * bool * bool -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, usingStatements, attributes, paramBlock, statements, isFilter, isConfiguration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="usingStatements" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt;" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.AttributeAst&gt;" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="statements" Type="System.Management.Automation.Language.StatementBlockAst" />
        <Parameter Name="isFilter" Type="System.Boolean" />
        <Parameter Name="isConfiguration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="usingStatements">The list of using statments, may be null.</param>
        <param name="attributes">The attributes for the script block.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="statements">
            The statements that go in the end block if <paramref name="isFilter" /> is false, or the
            process block if <paramref name="isFilter" /> is true.
            </param>
        <param name="isFilter">True if the script block is a filter, false if it is a function or workflow.</param>
        <param name="isConfiguration">True if the script block is a configuration</param>
        <summary>
            Construct a ScriptBlockAst that does not use explicitly named blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> or <paramref name="statements" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.NamedBlockAst beginBlock, System.Management.Automation.Language.NamedBlockAst processBlock, System.Management.Automation.Language.NamedBlockAst endBlock, System.Management.Automation.Language.NamedBlockAst dynamicParamBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.NamedBlockAst beginBlock, class System.Management.Automation.Language.NamedBlockAst processBlock, class System.Management.Automation.Language.NamedBlockAst endBlock, class System.Management.Automation.Language.NamedBlockAst dynamicParamBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.UsingStatementAst},System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, usingStatements As IEnumerable(Of UsingStatementAst), paramBlock As ParamBlockAst, beginBlock As NamedBlockAst, processBlock As NamedBlockAst, endBlock As NamedBlockAst, dynamicParamBlock As NamedBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.UsingStatementAst&gt; * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, usingStatements, paramBlock, beginBlock, processBlock, endBlock, dynamicParamBlock)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="usingStatements" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt;" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="beginBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="processBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="endBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="dynamicParamBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="usingStatements">The list of using statments, may be null.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="beginBlock">The ast for the begin block, may be null.</param>
        <param name="processBlock">The ast for the process block, may be null.</param>
        <param name="endBlock">The ast for the end block, may be null.</param>
        <param name="dynamicParamBlock">The ast for the dynamicparam block, may be null.</param>
        <summary>
            Construct a ScriptBlockAst that uses explicitly named begin/process/end blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptBlockAst (System.Management.Automation.Language.IScriptExtent extent, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.AttributeAst&gt; attributes, System.Management.Automation.Language.ParamBlockAst paramBlock, System.Management.Automation.Language.NamedBlockAst beginBlock, System.Management.Automation.Language.NamedBlockAst processBlock, System.Management.Automation.Language.NamedBlockAst endBlock, System.Management.Automation.Language.NamedBlockAst dynamicParamBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Management.Automation.Language.IScriptExtent extent, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.UsingStatementAst&gt; usingStatements, class System.Collections.Generic.IEnumerable`1&lt;class System.Management.Automation.Language.AttributeAst&gt; attributes, class System.Management.Automation.Language.ParamBlockAst paramBlock, class System.Management.Automation.Language.NamedBlockAst beginBlock, class System.Management.Automation.Language.NamedBlockAst processBlock, class System.Management.Automation.Language.NamedBlockAst endBlock, class System.Management.Automation.Language.NamedBlockAst dynamicParamBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.#ctor(System.Management.Automation.Language.IScriptExtent,System.Collections.Generic.IEnumerable{System.Management.Automation.Language.UsingStatementAst},System.Collections.Generic.IEnumerable{System.Management.Automation.Language.AttributeAst},System.Management.Automation.Language.ParamBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst,System.Management.Automation.Language.NamedBlockAst)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (extent As IScriptExtent, usingStatements As IEnumerable(Of UsingStatementAst), attributes As IEnumerable(Of AttributeAst), paramBlock As ParamBlockAst, beginBlock As NamedBlockAst, processBlock As NamedBlockAst, endBlock As NamedBlockAst, dynamicParamBlock As NamedBlockAst)" />
      <MemberSignature Language="F#" Value="new System.Management.Automation.Language.ScriptBlockAst : System.Management.Automation.Language.IScriptExtent * seq&lt;System.Management.Automation.Language.UsingStatementAst&gt; * seq&lt;System.Management.Automation.Language.AttributeAst&gt; * System.Management.Automation.Language.ParamBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst * System.Management.Automation.Language.NamedBlockAst -&gt; System.Management.Automation.Language.ScriptBlockAst" Usage="new System.Management.Automation.Language.ScriptBlockAst (extent, usingStatements, attributes, paramBlock, beginBlock, processBlock, endBlock, dynamicParamBlock)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="extent" Type="System.Management.Automation.Language.IScriptExtent" />
        <Parameter Name="usingStatements" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.UsingStatementAst&gt;" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;System.Management.Automation.Language.AttributeAst&gt;" />
        <Parameter Name="paramBlock" Type="System.Management.Automation.Language.ParamBlockAst" />
        <Parameter Name="beginBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="processBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="endBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
        <Parameter Name="dynamicParamBlock" Type="System.Management.Automation.Language.NamedBlockAst" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the script block.</param>
        <param name="usingStatements">The list of using statments, may be null.</param>
        <param name="attributes">The set of attributes for the script block.</param>
        <param name="paramBlock">The ast for the param block, may be null.</param>
        <param name="beginBlock">The ast for the begin block, may be null.</param>
        <param name="processBlock">The ast for the process block, may be null.</param>
        <param name="endBlock">The ast for the end block, may be null.</param>
        <param name="dynamicParamBlock">The ast for the dynamicparam block, may be null.</param>
        <summary>
            Construct a ScriptBlockAst that uses explicitly named begin/process/end blocks.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.PSArgumentNullException">
            If <paramref name="extent" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.AttributeAst&gt; Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Management.Automation.Language.AttributeAst&gt; Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As ReadOnlyCollection(Of AttributeAst)" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.AttributeAst&gt;" Usage="System.Management.Automation.Language.ScriptBlockAst.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.AttributeAst&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The asts for attributes (such as [DscLocalConfigurationManager()]) used before the scriptblock.
            This property is never null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBlock">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.NamedBlockAst BeginBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.NamedBlockAst BeginBlock" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.BeginBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginBlock As NamedBlockAst" />
      <MemberSignature Language="F#" Value="member this.BeginBlock : System.Management.Automation.Language.NamedBlockAst" Usage="System.Management.Automation.Language.ScriptBlockAst.BeginBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.NamedBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast representing the begin block for a script block, or null if no begin block was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Management.Automation.Language.Ast Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Management.Automation.Language.Ast Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As Ast" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Management.Automation.Language.Ast" Usage="scriptBlockAst.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.Ast</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Copy the ScriptBlockAst instance
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicParamBlock">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.NamedBlockAst DynamicParamBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.NamedBlockAst DynamicParamBlock" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.DynamicParamBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicParamBlock As NamedBlockAst" />
      <MemberSignature Language="F#" Value="member this.DynamicParamBlock : System.Management.Automation.Language.NamedBlockAst" Usage="System.Management.Automation.Language.ScriptBlockAst.DynamicParamBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.NamedBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast representing the dynamicparam block for a script block, or null if no dynamicparam block was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBlock">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.NamedBlockAst EndBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.NamedBlockAst EndBlock" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.EndBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndBlock As NamedBlockAst" />
      <MemberSignature Language="F#" Value="member this.EndBlock : System.Management.Automation.Language.NamedBlockAst" Usage="System.Management.Automation.Language.ScriptBlockAst.EndBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.NamedBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast representing the end block for a script block, or null if no end block was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHelpContent">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.CommentHelpInfo GetHelpContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.Automation.Language.CommentHelpInfo GetHelpContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.GetHelpContent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHelpContent () As CommentHelpInfo" />
      <MemberSignature Language="F#" Value="member this.GetHelpContent : unit -&gt; System.Management.Automation.Language.CommentHelpInfo" Usage="scriptBlockAst.GetHelpContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.CommentHelpInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Return the help content, if any, for the script block.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScriptBlock">
      <MemberSignature Language="C#" Value="public System.Management.Automation.ScriptBlock GetScriptBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Management.Automation.ScriptBlock GetScriptBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Automation.Language.ScriptBlockAst.GetScriptBlock" />
      <MemberSignature Language="VB.NET" Value="Public Function GetScriptBlock () As ScriptBlock" />
      <MemberSignature Language="F#" Value="member this.GetScriptBlock : unit -&gt; System.Management.Automation.ScriptBlock" Usage="scriptBlockAst.GetScriptBlock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.ScriptBlock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Convert the ast into a script block that can be invoked.
            </summary>
        <returns>The compiled script block.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Management.Automation.ParseException">
            Thrown if there are any semantic errors in the ast.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ParamBlock">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.ParamBlockAst ParamBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.ParamBlockAst ParamBlock" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.ParamBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParamBlock As ParamBlockAst" />
      <MemberSignature Language="F#" Value="member this.ParamBlock : System.Management.Automation.Language.ParamBlockAst" Usage="System.Management.Automation.Language.ScriptBlockAst.ParamBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.ParamBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast representing the parameters for a script block, or null if no param block was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessBlock">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.NamedBlockAst ProcessBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.NamedBlockAst ProcessBlock" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.ProcessBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessBlock As NamedBlockAst" />
      <MemberSignature Language="F#" Value="member this.ProcessBlock : System.Management.Automation.Language.NamedBlockAst" Usage="System.Management.Automation.Language.ScriptBlockAst.ProcessBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.NamedBlockAst</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The ast representing the process block for a script block, or null if no process block was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptRequirements">
      <MemberSignature Language="C#" Value="public System.Management.Automation.Language.ScriptRequirements ScriptRequirements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.Language.ScriptRequirements ScriptRequirements" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.ScriptRequirements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptRequirements As ScriptRequirements" />
      <MemberSignature Language="F#" Value="member this.ScriptRequirements : System.Management.Automation.Language.ScriptRequirements" Usage="System.Management.Automation.Language.ScriptBlockAst.ScriptRequirements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.Automation.Language.ScriptRequirements</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            All of the parsed information from any #requires in the script, or null if #requires was not used.
            This property is only set for the top level script block (where <see cref="P:System.Management.Automation.Language.Ast.Parent" />) is null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.UsingStatementAst&gt; UsingStatements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Management.Automation.Language.UsingStatementAst&gt; UsingStatements" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Language.ScriptBlockAst.UsingStatements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UsingStatements As ReadOnlyCollection(Of UsingStatementAst)" />
      <MemberSignature Language="F#" Value="member this.UsingStatements : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.UsingStatementAst&gt;" Usage="System.Management.Automation.Language.ScriptBlockAst.UsingStatements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Management.Automation.Language.UsingStatementAst&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The asts for any using statements.  This property is never null.
            Elements of the collection are instances of either <see cref="T:System.Management.Automation.Language.UsingStatementAst" />
            or (only in error cases) <see cref="T:System.Management.Automation.Language.ErrorStatementAst" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>