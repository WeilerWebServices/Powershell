<Type Name="AuthenticatingWSManCommand" FullName="Microsoft.WSMan.Management.AuthenticatingWSManCommand">
  <TypeSignature Language="C#" Value="public class AuthenticatingWSManCommand : System.Management.Automation.PSCmdlet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticatingWSManCommand extends System.Management.Automation.PSCmdlet" />
  <TypeSignature Language="DocId" Value="T:Microsoft.WSMan.Management.AuthenticatingWSManCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticatingWSManCommand&#xA;Inherits PSCmdlet" />
  <TypeSignature Language="F#" Value="type AuthenticatingWSManCommand = class&#xA;    inherit PSCmdlet" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.WSMan.Management</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Automation.PSCmdlet</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Common base class for all WSMan cmdlets that
            take Authentication, CertificateThumbprint and Credential parameters
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatingWSManCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.WSMan.Management.AuthenticatingWSManCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.WSMan.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authentication">
      <MemberSignature Language="C#" Value="public virtual Microsoft.WSMan.Management.AuthenticationMechanism Authentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.WSMan.Management.AuthenticationMechanism Authentication" />
      <MemberSignature Language="DocId" Value="P:Microsoft.WSMan.Management.AuthenticatingWSManCommand.Authentication" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Authentication As AuthenticationMechanism" />
      <MemberSignature Language="F#" Value="member this.Authentication : Microsoft.WSMan.Management.AuthenticationMechanism with get, set" Usage="Microsoft.WSMan.Management.AuthenticatingWSManCommand.Authentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.WSMan.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.WSMan.Management.AuthenticationMechanism</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The following is the definition of the input parameter "Authentication".
            This parameter takes a set of authentication methods the user can select
            from. The available method are an enum called Authentication in the
            System.Management.Automation.Runspaces namespace. The available options
            should be as follows:
            - Default : Use the default authentication (ad defined by the underlying
            protocol) for establishing a remote connection.
            - Negotiate
            - Kerberos
            - Basic:  Use basic authentication for establishing a remote connection.
            -CredSSP: Use CredSSP authentication for establishing a remote connection
            which will enable the user to perform credential delegation. (i.e. second
            hop)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CertificateThumbprint">
      <MemberSignature Language="C#" Value="public virtual string CertificateThumbprint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CertificateThumbprint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.WSMan.Management.AuthenticatingWSManCommand.CertificateThumbprint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CertificateThumbprint As String" />
      <MemberSignature Language="F#" Value="member this.CertificateThumbprint : string with get, set" Usage="Microsoft.WSMan.Management.AuthenticatingWSManCommand.CertificateThumbprint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.WSMan.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the certificate thumbprint to be used to impersonate the user on the
            remote machine.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public virtual System.Management.Automation.PSCredential Credential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Management.Automation.PSCredential Credential" />
      <MemberSignature Language="DocId" Value="P:Microsoft.WSMan.Management.AuthenticatingWSManCommand.Credential" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credential As PSCredential" />
      <MemberSignature Language="F#" Value="member this.Credential : System.Management.Automation.PSCredential with get, set" Usage="Microsoft.WSMan.Management.AuthenticatingWSManCommand.Credential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.WSMan.Management</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Credential</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter(ValueFromPipelineByPropertyName=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateNotNullOrEmpty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.PSCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The following is the definition of the input parameter "Credential".
            Specifies a user account that has permission to perform this action. The
            default is the current user.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>