<Type Name="CommonParameters" FullName="System.Management.Automation.Internal.CommonParameters">
  <TypeSignature Language="C#" Value="public sealed class CommonParameters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CommonParameters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Automation.Internal.CommonParameters" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CommonParameters" />
  <TypeSignature Language="F#" Value="type CommonParameters = class" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Automation</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines the parameters that are present on all Cmdlets.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Debug" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Debug : System.Management.Automation.SwitchParameter with get, set" Usage="System.Management.Automation.Internal.CommonParameters.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the Debug parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command to provide Programmer/Support type
             messages to understand what is really occuring and give the user the
             opportunity to stop or debug the situation.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorAction">
      <MemberSignature Language="C#" Value="public System.Management.Automation.ActionPreference ErrorAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.ActionPreference ErrorAction" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.ErrorAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorAction As ActionPreference" />
      <MemberSignature Language="F#" Value="member this.ErrorAction : System.Management.Automation.ActionPreference with get, set" Usage="System.Management.Automation.Internal.CommonParameters.ErrorAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.ActionPreference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the ErrorAction parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command what to do when an error occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorVariable">
      <MemberSignature Language="C#" Value="public string ErrorVariable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorVariable" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.ErrorVariable" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorVariable As String" />
      <MemberSignature Language="F#" Value="member this.ErrorVariable : string with get, set" Usage="System.Management.Automation.Internal.CommonParameters.ErrorVariable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the ErrorVariable parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command which variable to populate with the errors.
             Use +varname to append to the variable rather than clearing it.
             </remarks>
        <!--
             897599-2003/10/20-JonN Need to figure out how to get a working
             commandline parameter without making it a public property
             -->
      </Docs>
    </Member>
    <Member MemberName="InformationAction">
      <MemberSignature Language="C#" Value="public System.Management.Automation.ActionPreference InformationAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.ActionPreference InformationAction" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.InformationAction" />
      <MemberSignature Language="VB.NET" Value="Public Property InformationAction As ActionPreference" />
      <MemberSignature Language="F#" Value="member this.InformationAction : System.Management.Automation.ActionPreference with get, set" Usage="System.Management.Automation.Internal.CommonParameters.InformationAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.ActionPreference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the InformationAction parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command what to do when an informational record occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="InformationVariable">
      <MemberSignature Language="C#" Value="public string InformationVariable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InformationVariable" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.InformationVariable" />
      <MemberSignature Language="VB.NET" Value="Public Property InformationVariable As String" />
      <MemberSignature Language="F#" Value="member this.InformationVariable : string with get, set" Usage="System.Management.Automation.Internal.CommonParameters.InformationVariable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the InformationVariable parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command which variable to populate with the informational output.
             Use +varname to append to the variable rather than clearing it.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutBuffer">
      <MemberSignature Language="C#" Value="public int OutBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.OutBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property OutBuffer As Integer" />
      <MemberSignature Language="F#" Value="member this.OutBuffer : int with get, set" Usage="System.Management.Automation.Internal.CommonParameters.OutBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.ValidateRange(Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the OutBuffer parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter configures the number of objects to buffer before calling the downstream Cmdlet
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutVariable">
      <MemberSignature Language="C#" Value="public string OutVariable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutVariable" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.OutVariable" />
      <MemberSignature Language="VB.NET" Value="Public Property OutVariable As String" />
      <MemberSignature Language="F#" Value="member this.OutVariable : string with get, set" Usage="System.Management.Automation.Internal.CommonParameters.OutVariable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the OutVariable parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command to set all success output in the specified variable.
             Similar to the way -errorvariable sets all errors to a variable name.
             Semantically this is equivalent to :  command |set-var varname -passthru
             but it should be MUCH faster as there is no binding that takes place
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="PipelineVariable">
      <MemberSignature Language="C#" Value="public string PipelineVariable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PipelineVariable" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.PipelineVariable" />
      <MemberSignature Language="VB.NET" Value="Public Property PipelineVariable As String" />
      <MemberSignature Language="F#" Value="member this.PipelineVariable : string with get, set" Usage="System.Management.Automation.Internal.CommonParameters.PipelineVariable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the PipelineVariable parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter defines a variable to hold the current pipeline output the command
             as it passes down the pipeline:
             Write-Output (1..10) -PipelineVariable WriteOutput | Foreach-Object { "Hello" }  |
                 Foreach-Object { $WriteOutput }
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbose">
      <MemberSignature Language="C#" Value="public System.Management.Automation.SwitchParameter Verbose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.SwitchParameter Verbose" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.Verbose" />
      <MemberSignature Language="VB.NET" Value="Public Property Verbose As SwitchParameter" />
      <MemberSignature Language="F#" Value="member this.Verbose : System.Management.Automation.SwitchParameter with get, set" Usage="System.Management.Automation.Internal.CommonParameters.Verbose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.SwitchParameter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the Verbose parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter
             tells the command to articulate the actions it performs while executing.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningAction">
      <MemberSignature Language="C#" Value="public System.Management.Automation.ActionPreference WarningAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Management.Automation.ActionPreference WarningAction" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.WarningAction" />
      <MemberSignature Language="VB.NET" Value="Public Property WarningAction As ActionPreference" />
      <MemberSignature Language="F#" Value="member this.WarningAction : System.Management.Automation.ActionPreference with get, set" Usage="System.Management.Automation.Internal.CommonParameters.WarningAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Management.Automation.ActionPreference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the WarningAction parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command what to do when a warning
             occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningVariable">
      <MemberSignature Language="C#" Value="public string WarningVariable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WarningVariable" />
      <MemberSignature Language="DocId" Value="P:System.Management.Automation.Internal.CommonParameters.WarningVariable" />
      <MemberSignature Language="VB.NET" Value="Public Property WarningVariable As String" />
      <MemberSignature Language="F#" Value="member this.WarningVariable : string with get, set" Usage="System.Management.Automation.Internal.CommonParameters.WarningVariable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Automation</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Management.Automation.Alias(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Management.Automation.Parameter</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the value of the WarningVariable parameter for the cmdlet.
             </summary>
        <value>To be added.</value>
        <remarks>
             This parameter tells the command which variable to populate with the warnings.
             Use +varname to append to the variable rather than clearing it.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>