<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowUnsecureConnectionMessage" xml:space="preserve">
    <value>The cmdlet '{0}' is trying to establish an unsecured connection with the OData endpoint through the URI '{1}'. Either supply a secured URI to the -{2} parameter or use -AllowUnsecureConnection switch paramter if you intend to use the current URI.</value>
  </data>
  <data name="ErrInvalidConnectionUri" xml:space="preserve">
    <value>The cmdlet '{0}' is trying to establish an unsecured connection with the OData endpoint through the URI '{1}'. Please supply a secured URI to the -{2} parameter.</value>
  </data>
  <data name="ErrOperationTimeout" xml:space="preserve">
    <value>The requested NetworkController operation timed out. Please retry.</value>
  </data>
  <data name="ErrTypeCastFailure" xml:space="preserve">
    <value>Failed to type cast the data sent from the server side endpoint to entity type '{0}' because the returned data either contained additional properties or one or more property values that could not be converted to the type expected by '{1}'. If you are executing this cmdlet from a Network Controller node, please ensure that the node is connected to the Internet and try again after some time. In case you are executing this cmdlet from a client node, please ensure all windows updates available for Remote Server Administration Tools are installed in the client node.</value>
  </data>
  <data name="IncorrectMethodName" xml:space="preserve">
    <value>Method name {0} has invalid format.</value>
  </data>
  <data name="IncorrectPropertyNameFormat" xml:space="preserve">
    <value>"Property {0} read from CDXML has invalid format."</value>
  </data>
  <data name="IncorrectResourceUri" xml:space="preserve">
    <value>"Incorrect base resource uri in CDXML module: {0}"</value>
  </data>
  <data name="InvokeRestMethodTerminatingError" xml:space="preserve">
    <value>Terminating error was thrown while executing '{0}' operation on the server side endpoint '{1}'.</value>
  </data>
  <data name="MissingCmdletAdapterPrivateData" xml:space="preserve">
    <value>The CmdletAdapterPrivateData section in '{0}' is missing an entry for the required data '{1}'</value>
  </data>
  <data name="NetworkControllerShouldContinueCrudMessage" xml:space="preserve">
    <value>Performing the operation '{0}' on entities of type '{1}' via '{3}'. Are you sure you want to continue?</value>
  </data>
  <data name="NetworkControllerShouldProcessCrudMessage" xml:space="preserve">
    <value>entities of type '{0}' via '{2}'</value>
  </data>
  <data name="NullValueForKey" xml:space="preserve">
    <value>Key {0} was null.</value>
  </data>
  <data name="ShouldContinueActionMessage" xml:space="preserve">
    <value>Performing the operation '{0}' on service '{1}' via '{2}'. Are you sure you want to continue?</value>
  </data>
  <data name="ShouldContinueCrudMessage" xml:space="preserve">
    <value>Performing the operation '{0}' on entities of type '{1}' in the entity set '{2}' via '{3}'. Are you sure you want to continue?</value>
  </data>
  <data name="ShouldProcessActionMessage" xml:space="preserve">
    <value>service '{0}' via '{1}'</value>
  </data>
  <data name="ShouldProcessCrudMessage" xml:space="preserve">
    <value>entities of type '{0}' in the entity set '{1}' via '{2}'</value>
  </data>
  <data name="TypeCastFailureAdditionalMembers" xml:space="preserve">
    <value>Failed to type cast the data sent from the server side endpoint to entity type '{0}' because the returned data either contained additional properties or one or more property values that could not be converted to the type expected by '{1}'. Use -AllowAdditionalData parameter to return all the server side data without any conversion.</value>
  </data>
  <data name="TypeConversionFailureWarningMessage" xml:space="preserve">
    <value>Failed to type cast the data sent from the server side endpoint to entity type '{0}'. Hence the retuned data will remain as PSCustomObject.</value>
  </data>
</root>